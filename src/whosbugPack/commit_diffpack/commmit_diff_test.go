package commit_diffpack

import (
	"fmt"
	"strings"
	"testing"
)

func TestQuatoToNum(t *testing.T) {
	text := "-1,20"
	res := QuatToNum(text[1:])
	fmt.Println(res)
}

func TestReplaceLines(t *testing.T) {
	text := "package com.springboot.demo.common.auth;\n \n import at.pollux.thymeleaf.shiro.dialect.ShiroDialect;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.shiro.codec.Base64;\n import org.apache.shiro.mgt.SecurityManager;\n+import org.apache.shiro.session.SessionListener;\n+import org.apache.shiro.session.mgt.SessionManager;\n import org.apache.shiro.spring.LifecycleBeanPostProcessor;\n import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\n import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n import org.apache.shiro.web.mgt.CookieRememberMeManager;\n import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n import org.apache.shiro.web.servlet.SimpleCookie;\n+import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\n import org.crazycake.shiro.RedisCacheManager;\n import org.crazycake.shiro.RedisManager;\n+import org.crazycake.shiro.RedisSessionDAO;\n import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.LinkedHashMap;\n \n /**\n  * 1、定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；\n  * <p>\n  * 2、在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；\n  * <p>\n  * 3、自定义Realm实现，Realm包含doGetAuthorizationInfo()和doGetAuthenticationInfo()方法\n  *\n  * @author hjy\n  * @date 2019/3/20\n  **/\n @Slf4j\n @Configuration\n public class ShiroConfig {\n \n     @Bean\n     public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {\n         ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n         // 设置securityManager\n         shiroFilterFactoryBean.setSecurityManager(securityManager);\n         // 登录的url\n         shiroFilterFactoryBean.setLoginUrl(\"/login\");\n         // 登录成功后跳转的url\n         shiroFilterFactoryBean.setSuccessUrl(\"/index\");\n         // 未授权url\n         shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\n \n         LinkedHashMap<String, String> filterChainDefinitionMap = new LinkedHashMap<>();\n \n         // 定义filterChain，静态资源不拦截\n         filterChainDefinitionMap.put(\"/css/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/js/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/fonts/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/img/**\", \"anon\");\n         // druid数据源监控页面不拦截\n         filterChainDefinitionMap.put(\"/druid/**\", \"anon\");\n         // 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了\n         filterChainDefinitionMap.put(\"/logout\", \"logout\");\n         filterChainDefinitionMap.put(\"/\", \"anon\");\n         // 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl\n         filterChainDefinitionMap.put(\"/**\", \"user\");\n         shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n         return shiroFilterFactoryBean;\n     }\n \n     /**\n      * 配置 SecurityManager 加载自定义 Realm\n      *\n      * @return\n      */\n     @Bean\n     public SecurityManager securityManager() {\n         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n         // 加载 shiroRealm\n         securityManager.setRealm(shiroRealm());\n         // 加载 cookie\n         securityManager.setRememberMeManager(rememberMeManager());\n         // 加载 redisManager\n         securityManager.setCacheManager(cacheManager());\n+        // 加载 SessionManager\n+        securityManager.setSessionManager(sessionManager());\n         return securityManager;\n     }\n \n     /**\n      * 注册 shiroRealm\n      * @return\n      */\n     @Bean\n     public ShiroRealm shiroRealm() {\n         // 配置 Realm\n         return new ShiroRealm();\n     }\n \n     /**\n      * cookie对象\n      * @return\n      */\n     public SimpleCookie rememberMeCookie() {\n         // 设置cookie名称，对应login.html页面的<input type=\"checkbox\" name=\"rememberMe\"/>\n         SimpleCookie cookie = new SimpleCookie(\"rememberMe\");\n         // 设置cookie的过期时间，单位为秒，这里为一天\n         cookie.setMaxAge(86400);\n         return cookie;\n     }\n \n     /**\n      * cookie管理对象\n      * @return\n      */\n     public CookieRememberMeManager rememberMeManager() {\n         CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();\n         cookieRememberMeManager.setCookie(rememberMeCookie());\n         // rememberMe cookie加密的密钥\n         cookieRememberMeManager.setCipherKey(Base64.decode(\"4AvVhmFLUs0KTA3Kprsdag==\"));\n         return cookieRememberMeManager;\n     }\n \n     /**\n      * LifecycleBeanPostProcessor，这是个DestructionAwareBeanPostProcessor的子类，\n      * 负责org.apache.shiro.util.Initializable类型bean的生命周期的，初始化和销毁。\n      * 主要是 AuthorizingRealm 类的子类，以及EhCacheManager类。\n      * @return\n      */\n     @Bean(name = \"lifecycleBeanPostProcessor\")\n     public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n         // Shiro生命周期处理器\n         log.info(\"ShiroConfiguration.getLifecycleBeanPostProcessor()\");\n         return new LifecycleBeanPostProcessor();\n     }\n \n     /**\n      * DefaultAdvisorAutoProxyCreator，Spring的一个bean，由Advisor决定对哪些类的方法进行AOP代理。\n      * @return\n      */\n     @Bean\n     @DependsOn({\"lifecycleBeanPostProcessor\"})\n     public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {\n         DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n         advisorAutoProxyCreator.setProxyTargetClass(true);\n         return advisorAutoProxyCreator;\n     }\n \n     /**\n      * AuthorizationAttributeSourceAdvisor，shiro里实现的 Advisor 类，\n      * 内部使用 AopAllianceAnnotationsAuthorizingMethodInterceptor 来拦截用以下注解的方法。\n      * 老实说，这里注入securityManager，我不知道有啥用，从source上看不出它在什么地方会被调用。\n      *\n      * @return\n      */\n     @Bean\n     public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {\n         AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n         authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n         return authorizationAttributeSourceAdvisor;\n     }\n \n \n     /**\n      * Redis 配置\n      * @return\n      */\n     public RedisManager redisManager() {\n         RedisManager redisManager = new RedisManager();\n         return redisManager;\n     }\n \n     /**\n      * RedisManager 配置\n      * @return\n      */\n     public RedisCacheManager cacheManager() {\n         RedisCacheManager redisCacheManager = new RedisCacheManager();\n         redisCacheManager.setRedisManager(redisManager());\n         return redisCacheManager;\n     }\n \n     /**\n      * 配置 thymeleaf 标签\n      * @return\n      */\n     @Bean\n     public ShiroDialect shiroDialect() {\n         return new ShiroDialect();\n     }\n \n+    @Bean\n+    public RedisSessionDAO sessionDAO() {\n+        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n+        redisSessionDAO.setRedisManager(redisManager());\n+        return redisSessionDAO;\n+    }\n+\n+    @Bean\n+    public SessionManager sessionManager() {\n+        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n+        Collection<SessionListener> listeners = new ArrayList<SessionListener>();\n+        listeners.add(new ShiroSessionListener());\n+        sessionManager.setSessionListeners(listeners);\n+        sessionManager.setSessionDAO(sessionDAO());\n+        return sessionManager;\n+    }\n+\n }"
	expected := "package com.springboot.demo.common.auth;\n \n import at.pollux.thymeleaf.shiro.dialect.ShiroDialect;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.shiro.codec.Base64;\n import org.apache.shiro.mgt.SecurityManager;\nimport org.apache.shiro.session.SessionListener;\nimport org.apache.shiro.session.mgt.SessionManager;\n import org.apache.shiro.spring.LifecycleBeanPostProcessor;\n import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\n import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n import org.apache.shiro.web.mgt.CookieRememberMeManager;\n import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n import org.apache.shiro.web.servlet.SimpleCookie;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\n import org.crazycake.shiro.RedisCacheManager;\n import org.crazycake.shiro.RedisManager;\nimport org.crazycake.shiro.RedisSessionDAO;\n import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n \nimport java.util.ArrayList;\nimport java.util.Collection;\n import java.util.LinkedHashMap;\n \n /**\n  * 1、定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；\n  * <p>\n  * 2、在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；\n  * <p>\n  * 3、自定义Realm实现，Realm包含doGetAuthorizationInfo()和doGetAuthenticationInfo()方法\n  *\n  * @author hjy\n  * @date 2019/3/20\n  **/\n @Slf4j\n @Configuration\n public class ShiroConfig {\n \n     @Bean\n     public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {\n         ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n         // 设置securityManager\n         shiroFilterFactoryBean.setSecurityManager(securityManager);\n         // 登录的url\n         shiroFilterFactoryBean.setLoginUrl(\"/login\");\n         // 登录成功后跳转的url\n         shiroFilterFactoryBean.setSuccessUrl(\"/index\");\n         // 未授权url\n         shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\n \n         LinkedHashMap<String, String> filterChainDefinitionMap = new LinkedHashMap<>();\n \n         // 定义filterChain，静态资源不拦截\n         filterChainDefinitionMap.put(\"/css/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/js/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/fonts/**\", \"anon\");\n         filterChainDefinitionMap.put(\"/img/**\", \"anon\");\n         // druid数据源监控页面不拦截\n         filterChainDefinitionMap.put(\"/druid/**\", \"anon\");\n         // 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了\n         filterChainDefinitionMap.put(\"/logout\", \"logout\");\n         filterChainDefinitionMap.put(\"/\", \"anon\");\n         // 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl\n         filterChainDefinitionMap.put(\"/**\", \"user\");\n         shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n         return shiroFilterFactoryBean;\n     }\n \n     /**\n      * 配置 SecurityManager 加载自定义 Realm\n      *\n      * @return\n      */\n     @Bean\n     public SecurityManager securityManager() {\n         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n         // 加载 shiroRealm\n         securityManager.setRealm(shiroRealm());\n         // 加载 cookie\n         securityManager.setRememberMeManager(rememberMeManager());\n         // 加载 redisManager\n         securityManager.setCacheManager(cacheManager());\n        // 加载 SessionManager\n        securityManager.setSessionManager(sessionManager());\n         return securityManager;\n     }\n \n     /**\n      * 注册 shiroRealm\n      * @return\n      */\n     @Bean\n     public ShiroRealm shiroRealm() {\n         // 配置 Realm\n         return new ShiroRealm();\n     }\n \n     /**\n      * cookie对象\n      * @return\n      */\n     public SimpleCookie rememberMeCookie() {\n         // 设置cookie名称，对应login.html页面的<input type=\"checkbox\" name=\"rememberMe\"/>\n         SimpleCookie cookie = new SimpleCookie(\"rememberMe\");\n         // 设置cookie的过期时间，单位为秒，这里为一天\n         cookie.setMaxAge(86400);\n         return cookie;\n     }\n \n     /**\n      * cookie管理对象\n      * @return\n      */\n     public CookieRememberMeManager rememberMeManager() {\n         CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();\n         cookieRememberMeManager.setCookie(rememberMeCookie());\n         // rememberMe cookie加密的密钥\n         cookieRememberMeManager.setCipherKey(Base64.decode(\"4AvVhmFLUs0KTA3Kprsdag==\"));\n         return cookieRememberMeManager;\n     }\n \n     /**\n      * LifecycleBeanPostProcessor，这是个DestructionAwareBeanPostProcessor的子类，\n      * 负责org.apache.shiro.util.Initializable类型bean的生命周期的，初始化和销毁。\n      * 主要是 AuthorizingRealm 类的子类，以及EhCacheManager类。\n      * @return\n      */\n     @Bean(name = \"lifecycleBeanPostProcessor\")\n     public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {\n         // Shiro生命周期处理器\n         log.info(\"ShiroConfiguration.getLifecycleBeanPostProcessor()\");\n         return new LifecycleBeanPostProcessor();\n     }\n \n     /**\n      * DefaultAdvisorAutoProxyCreator，Spring的一个bean，由Advisor决定对哪些类的方法进行AOP代理。\n      * @return\n      */\n     @Bean\n     @DependsOn({\"lifecycleBeanPostProcessor\"})\n     public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {\n         DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n         advisorAutoProxyCreator.setProxyTargetClass(true);\n         return advisorAutoProxyCreator;\n     }\n \n     /**\n      * AuthorizationAttributeSourceAdvisor，shiro里实现的 Advisor 类，\n      * 内部使用 AopAllianceAnnotationsAuthorizingMethodInterceptor 来拦截用以下注解的方法。\n      * 老实说，这里注入securityManager，我不知道有啥用，从source上看不出它在什么地方会被调用。\n      *\n      * @return\n      */\n     @Bean\n     public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {\n         AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n         authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n         return authorizationAttributeSourceAdvisor;\n     }\n \n \n     /**\n      * Redis 配置\n      * @return\n      */\n     public RedisManager redisManager() {\n         RedisManager redisManager = new RedisManager();\n         return redisManager;\n     }\n \n     /**\n      * RedisManager 配置\n      * @return\n      */\n     public RedisCacheManager cacheManager() {\n         RedisCacheManager redisCacheManager = new RedisCacheManager();\n         redisCacheManager.setRedisManager(redisManager());\n         return redisCacheManager;\n     }\n \n     /**\n      * 配置 thymeleaf 标签\n      * @return\n      */\n     @Bean\n     public ShiroDialect shiroDialect() {\n         return new ShiroDialect();\n     }\n \n    @Bean\n    public RedisSessionDAO sessionDAO() {\n        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n        redisSessionDAO.setRedisManager(redisManager());\n        return redisSessionDAO;\n    }\n\n    @Bean\n    public SessionManager sessionManager() {\n        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n        Collection<SessionListener> listeners = new ArrayList<SessionListener>();\n        listeners.add(new ShiroSessionListener());\n        sessionManager.setSessionListeners(listeners);\n        sessionManager.setSessionDAO(sessionDAO());\n        return sessionManager;\n    }\n\n }"
	lines := strings.Split(text, "\n")
	replaceLines(lines)
	if strings.Join(lines, "\n") != expected {
		t.Errorf("Not Pass")
	}
}
