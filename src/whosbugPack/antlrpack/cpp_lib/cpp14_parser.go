// Code generated from .\CPP14Parser.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // CPP14Parser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 147, 2112,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 3, 2, 5, 2, 386, 10, 2, 3, 2, 3, 2, 3, 3, 6, 3, 391, 10, 3, 13,
	3, 14, 3, 392, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 402, 10,
	3, 3, 4, 3, 4, 5, 4, 406, 10, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 5, 5, 415, 10, 5, 3, 5, 5, 5, 418, 10, 5, 3, 6, 3, 6, 5, 6, 422, 10,
	6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 430, 10, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 5, 7, 437, 10, 7, 3, 7, 5, 7, 440, 10, 7, 3, 7, 7, 7, 443,
	10, 7, 12, 7, 14, 7, 446, 11, 7, 3, 8, 3, 8, 5, 8, 450, 10, 8, 3, 8, 3,
	8, 3, 9, 3, 9, 5, 9, 456, 10, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	5, 10, 464, 10, 10, 5, 10, 466, 10, 10, 3, 11, 3, 11, 3, 12, 3, 12, 3,
	12, 7, 12, 473, 10, 12, 12, 12, 14, 12, 476, 11, 12, 3, 12, 5, 12, 479,
	10, 12, 3, 13, 3, 13, 5, 13, 483, 10, 13, 3, 14, 5, 14, 486, 10, 14, 3,
	14, 3, 14, 5, 14, 490, 10, 14, 3, 15, 5, 15, 493, 10, 15, 3, 15, 3, 15,
	3, 15, 3, 16, 3, 16, 5, 16, 500, 10, 16, 3, 16, 3, 16, 5, 16, 504, 10,
	16, 3, 16, 5, 16, 507, 10, 16, 3, 16, 5, 16, 510, 10, 16, 3, 16, 5, 16,
	513, 10, 16, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 519, 10, 17, 3, 17, 3,
	17, 5, 17, 523, 10, 17, 3, 17, 3, 17, 5, 17, 527, 10, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5,
	17, 541, 10, 17, 3, 17, 3, 17, 5, 17, 545, 10, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 5, 17, 551, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 558,
	10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 564, 10, 17, 3, 17, 3, 17, 5,
	17, 568, 10, 17, 3, 17, 3, 17, 7, 17, 572, 10, 17, 12, 17, 14, 17, 575,
	11, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 5, 20, 582, 10, 20, 3, 20, 3,
	20, 3, 20, 5, 20, 587, 10, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 600, 10, 20, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 5, 21, 607, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 619, 10, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 629, 10, 21, 3, 22, 3, 22,
	3, 23, 5, 23, 634, 10, 23, 3, 23, 3, 23, 5, 23, 638, 10, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 5, 23, 645, 10, 23, 3, 23, 5, 23, 648, 10, 23,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 5, 25, 656, 10, 25, 3, 26, 3,
	26, 5, 26, 660, 10, 26, 3, 26, 5, 26, 663, 10, 26, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 5, 27, 670, 10, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5,
	27, 677, 10, 27, 7, 27, 679, 10, 27, 12, 27, 14, 27, 682, 11, 27, 3, 28,
	3, 28, 5, 28, 686, 10, 28, 3, 28, 3, 28, 5, 28, 690, 10, 28, 3, 29, 5,
	29, 693, 10, 29, 3, 29, 3, 29, 3, 29, 5, 29, 698, 10, 29, 3, 29, 3, 29,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 5, 31, 713, 10, 31, 3, 32, 3, 32, 3, 32, 7, 32, 718, 10, 32, 12, 32,
	14, 32, 721, 11, 32, 3, 33, 3, 33, 3, 33, 7, 33, 726, 10, 33, 12, 33, 14,
	33, 729, 11, 33, 3, 34, 3, 34, 3, 34, 7, 34, 734, 10, 34, 12, 34, 14, 34,
	737, 11, 34, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 743, 10, 35, 12, 35, 14,
	35, 746, 11, 35, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 752, 10, 36, 3, 37,
	3, 37, 3, 37, 7, 37, 757, 10, 37, 12, 37, 14, 37, 760, 11, 37, 3, 38, 3,
	38, 3, 38, 7, 38, 765, 10, 38, 12, 38, 14, 38, 768, 11, 38, 3, 39, 3, 39,
	3, 39, 7, 39, 773, 10, 39, 12, 39, 14, 39, 776, 11, 39, 3, 40, 3, 40, 3,
	40, 7, 40, 781, 10, 40, 12, 40, 14, 40, 784, 11, 40, 3, 41, 3, 41, 3, 41,
	7, 41, 789, 10, 41, 12, 41, 14, 41, 792, 11, 41, 3, 42, 3, 42, 3, 42, 7,
	42, 797, 10, 42, 12, 42, 14, 42, 800, 11, 42, 3, 43, 3, 43, 3, 43, 7, 43,
	805, 10, 43, 12, 43, 14, 43, 808, 11, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 5, 44, 816, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	5, 45, 824, 10, 45, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 7, 47, 831, 10,
	47, 12, 47, 14, 47, 834, 11, 47, 3, 48, 3, 48, 3, 49, 3, 49, 3, 49, 5,
	49, 841, 10, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 849,
	10, 49, 5, 49, 851, 10, 49, 3, 50, 5, 50, 854, 10, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 5, 50, 860, 10, 50, 3, 50, 3, 50, 3, 50, 3, 51, 5, 51, 866,
	10, 51, 3, 51, 3, 51, 3, 52, 3, 52, 5, 52, 872, 10, 52, 3, 52, 3, 52, 3,
	53, 6, 53, 877, 10, 53, 13, 53, 14, 53, 878, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 5, 54, 888, 10, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3,
	54, 3, 54, 5, 54, 896, 10, 54, 3, 55, 3, 55, 5, 55, 900, 10, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 907, 10, 55, 5, 55, 909, 10, 55, 3,
	56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 929, 10, 56, 3,
	56, 3, 56, 5, 56, 933, 10, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 939,
	10, 56, 3, 56, 3, 56, 3, 56, 5, 56, 944, 10, 56, 3, 57, 3, 57, 5, 57, 948,
	10, 57, 3, 58, 5, 58, 951, 10, 58, 3, 58, 3, 58, 3, 58, 3, 59, 3, 59, 5,
	59, 958, 10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 965, 10, 60,
	3, 60, 3, 60, 5, 60, 969, 10, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 62, 6,
	62, 976, 10, 62, 13, 62, 14, 62, 977, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 989, 10, 63, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 999, 10, 64, 3, 65, 3, 65, 3, 65,
	5, 65, 1004, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 66, 5, 66, 1011, 10,
	66, 3, 66, 5, 66, 1014, 10, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1019, 10, 66,
	3, 66, 3, 66, 3, 66, 5, 66, 1024, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70,
	3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1045, 10, 70, 3, 71, 6, 71, 1048, 10,
	71, 13, 71, 14, 71, 1049, 3, 71, 5, 71, 1053, 10, 71, 3, 72, 3, 72, 3,
	73, 3, 73, 3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 5, 75, 1064, 10, 75, 3, 76,
	3, 76, 3, 76, 3, 76, 5, 76, 1070, 10, 76, 3, 77, 6, 77, 1073, 10, 77, 13,
	77, 14, 77, 1074, 3, 77, 5, 77, 1078, 10, 77, 3, 78, 6, 78, 1081, 10, 78,
	13, 78, 14, 78, 1082, 3, 78, 5, 78, 1086, 10, 78, 3, 79, 3, 79, 3, 80,
	3, 80, 3, 81, 5, 81, 1093, 10, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3,
	81, 3, 81, 5, 81, 1102, 10, 81, 3, 81, 6, 81, 1105, 10, 81, 13, 81, 14,
	81, 1106, 3, 81, 5, 81, 1110, 10, 81, 3, 81, 3, 81, 5, 81, 1114, 10, 81,
	3, 81, 3, 81, 5, 81, 1118, 10, 81, 3, 81, 3, 81, 5, 81, 1122, 10, 81, 3,
	81, 3, 81, 3, 81, 5, 81, 1127, 10, 81, 3, 81, 7, 81, 1130, 10, 81, 12,
	81, 14, 81, 1133, 11, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1138, 10, 81, 3,
	81, 3, 81, 3, 81, 3, 81, 5, 81, 1144, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82,
	5, 82, 1150, 10, 82, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1156, 10, 83, 3,
	83, 3, 83, 3, 84, 3, 84, 5, 84, 1162, 10, 84, 3, 84, 5, 84, 1165, 10, 84,
	3, 84, 3, 84, 3, 84, 3, 84, 5, 84, 1171, 10, 84, 3, 84, 3, 84, 5, 84, 1175,
	10, 84, 3, 84, 3, 84, 5, 84, 1179, 10, 84, 3, 84, 5, 84, 1182, 10, 84,
	3, 85, 3, 85, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1190, 10, 86, 5, 86, 1192,
	10, 86, 3, 86, 3, 86, 3, 87, 3, 87, 5, 87, 1198, 10, 87, 3, 87, 5, 87,
	1201, 10, 87, 3, 87, 5, 87, 1204, 10, 87, 3, 87, 5, 87, 1207, 10, 87, 3,
	88, 3, 88, 5, 88, 1211, 10, 88, 3, 88, 3, 88, 5, 88, 1215, 10, 88, 3, 88,
	3, 88, 3, 89, 3, 89, 5, 89, 1221, 10, 89, 3, 90, 3, 90, 3, 90, 3, 91, 3,
	91, 3, 91, 7, 91, 1229, 10, 91, 12, 91, 14, 91, 1232, 11, 91, 3, 92, 3,
	92, 3, 92, 5, 92, 1237, 10, 92, 3, 93, 3, 93, 3, 94, 3, 94, 5, 94, 1243,
	10, 94, 3, 95, 3, 95, 3, 96, 5, 96, 1248, 10, 96, 3, 96, 3, 96, 3, 96,
	5, 96, 1253, 10, 96, 3, 96, 3, 96, 5, 96, 1257, 10, 96, 3, 96, 3, 96, 3,
	97, 3, 97, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 5, 99, 1270,
	10, 99, 3, 99, 3, 99, 3, 100, 3, 100, 5, 100, 1276, 10, 100, 3, 100, 3,
	100, 5, 100, 1280, 10, 100, 3, 100, 3, 100, 3, 100, 3, 101, 5, 101, 1286,
	10, 101, 3, 101, 3, 101, 3, 101, 5, 101, 1291, 10, 101, 3, 101, 3, 101,
	3, 101, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 103, 3, 103,
	3, 103, 3, 103, 5, 103, 1306, 10, 103, 3, 103, 3, 103, 5, 103, 1310, 10,
	103, 3, 104, 6, 104, 1313, 10, 104, 13, 104, 14, 104, 1314, 3, 105, 3,
	105, 3, 105, 5, 105, 1320, 10, 105, 3, 105, 3, 105, 3, 105, 5, 105, 1325,
	10, 105, 3, 106, 3, 106, 3, 106, 3, 106, 5, 106, 1331, 10, 106, 3, 106,
	5, 106, 1334, 10, 106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107, 7, 107,
	1341, 10, 107, 12, 107, 14, 107, 1344, 11, 107, 3, 107, 5, 107, 1347, 10,
	107, 3, 108, 3, 108, 3, 108, 5, 108, 1352, 10, 108, 3, 108, 3, 108, 5,
	108, 1356, 10, 108, 3, 109, 3, 109, 3, 110, 3, 110, 5, 110, 1362, 10, 110,
	3, 110, 3, 110, 3, 111, 6, 111, 1367, 10, 111, 13, 111, 14, 111, 1368,
	3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112, 3, 112,
	3, 112, 3, 112, 3, 112, 3, 112, 6, 112, 1384, 10, 112, 13, 112, 14, 112,
	1385, 5, 112, 1388, 10, 112, 3, 113, 3, 113, 3, 113, 7, 113, 1393, 10,
	113, 12, 113, 14, 113, 1396, 11, 113, 3, 114, 3, 114, 5, 114, 1400, 10,
	114, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 5, 115, 1407, 10, 115, 3,
	116, 3, 116, 5, 116, 1411, 10, 116, 7, 116, 1413, 10, 116, 12, 116, 14,
	116, 1416, 11, 116, 3, 116, 3, 116, 3, 117, 3, 117, 3, 117, 5, 117, 1423,
	10, 117, 3, 117, 3, 117, 3, 117, 3, 117, 5, 117, 1429, 10, 117, 3, 117,
	3, 117, 3, 117, 3, 117, 5, 117, 1435, 10, 117, 3, 117, 3, 117, 5, 117,
	1439, 10, 117, 5, 117, 1441, 10, 117, 7, 117, 1443, 10, 117, 12, 117, 14,
	117, 1446, 11, 117, 3, 118, 3, 118, 5, 118, 1450, 10, 118, 3, 118, 3, 118,
	5, 118, 1454, 10, 118, 3, 118, 5, 118, 1457, 10, 118, 3, 118, 5, 118, 1460,
	10, 118, 3, 118, 5, 118, 1463, 10, 118, 3, 119, 3, 119, 3, 119, 5, 119,
	1468, 10, 119, 3, 120, 3, 120, 5, 120, 1472, 10, 120, 3, 120, 5, 120, 1475,
	10, 120, 3, 120, 3, 120, 5, 120, 1479, 10, 120, 3, 120, 5, 120, 1482, 10,
	120, 5, 120, 1484, 10, 120, 3, 121, 6, 121, 1487, 10, 121, 13, 121, 14,
	121, 1488, 3, 122, 3, 122, 3, 123, 3, 123, 3, 124, 5, 124, 1496, 10, 124,
	3, 124, 3, 124, 3, 125, 3, 125, 5, 125, 1502, 10, 125, 3, 126, 3, 126,
	5, 126, 1506, 10, 126, 3, 126, 3, 126, 3, 126, 3, 126, 5, 126, 1512, 10,
	126, 3, 127, 3, 127, 6, 127, 1516, 10, 127, 13, 127, 14, 127, 1517, 3,
	127, 5, 127, 1521, 10, 127, 5, 127, 1523, 10, 127, 3, 128, 3, 128, 3, 128,
	3, 128, 5, 128, 1529, 10, 128, 3, 128, 3, 128, 5, 128, 1533, 10, 128, 3,
	128, 3, 128, 3, 128, 3, 128, 5, 128, 1539, 10, 128, 3, 128, 3, 128, 3,
	128, 3, 128, 3, 128, 5, 128, 1546, 10, 128, 3, 128, 3, 128, 5, 128, 1550,
	10, 128, 5, 128, 1552, 10, 128, 7, 128, 1554, 10, 128, 12, 128, 14, 128,
	1557, 11, 128, 3, 129, 7, 129, 1560, 10, 129, 12, 129, 14, 129, 1563, 11,
	129, 3, 129, 3, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3,
	130, 5, 130, 1574, 10, 130, 3, 130, 3, 130, 5, 130, 1578, 10, 130, 5, 130,
	1580, 10, 130, 7, 130, 1582, 10, 130, 12, 130, 14, 130, 1585, 11, 130,
	3, 131, 3, 131, 5, 131, 1589, 10, 131, 3, 131, 5, 131, 1592, 10, 131, 3,
	132, 3, 132, 3, 132, 7, 132, 1597, 10, 132, 12, 132, 14, 132, 1600, 11,
	132, 3, 133, 5, 133, 1603, 10, 133, 3, 133, 3, 133, 3, 133, 5, 133, 1608,
	10, 133, 5, 133, 1610, 10, 133, 3, 133, 3, 133, 5, 133, 1614, 10, 133,
	3, 134, 5, 134, 1617, 10, 134, 3, 134, 5, 134, 1620, 10, 134, 3, 134, 3,
	134, 5, 134, 1624, 10, 134, 3, 134, 3, 134, 3, 135, 5, 135, 1629, 10, 135,
	3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 1636, 10, 135, 3, 136,
	3, 136, 3, 136, 3, 136, 3, 136, 5, 136, 1643, 10, 136, 3, 137, 3, 137,
	3, 137, 5, 137, 1648, 10, 137, 3, 138, 3, 138, 5, 138, 1652, 10, 138, 3,
	139, 3, 139, 5, 139, 1656, 10, 139, 3, 139, 3, 139, 3, 139, 5, 139, 1661,
	10, 139, 7, 139, 1663, 10, 139, 12, 139, 14, 139, 1666, 11, 139, 3, 140,
	3, 140, 3, 140, 5, 140, 1671, 10, 140, 5, 140, 1673, 10, 140, 3, 140, 3,
	140, 3, 141, 3, 141, 5, 141, 1679, 10, 141, 3, 142, 3, 142, 3, 142, 5,
	142, 1684, 10, 142, 3, 142, 3, 142, 3, 143, 3, 143, 5, 143, 1690, 10, 143,
	3, 143, 3, 143, 5, 143, 1694, 10, 143, 5, 143, 1696, 10, 143, 3, 143, 5,
	143, 1699, 10, 143, 3, 143, 3, 143, 5, 143, 1703, 10, 143, 3, 143, 3, 143,
	5, 143, 1707, 10, 143, 5, 143, 1709, 10, 143, 5, 143, 1711, 10, 143, 3,
	144, 5, 144, 1714, 10, 144, 3, 144, 3, 144, 3, 145, 3, 145, 3, 146, 3,
	146, 3, 147, 3, 147, 3, 147, 3, 147, 6, 147, 1726, 10, 147, 13, 147, 14,
	147, 1727, 3, 148, 5, 148, 1731, 10, 148, 3, 148, 5, 148, 1734, 10, 148,
	3, 148, 5, 148, 1737, 10, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 5, 148, 1746, 10, 148, 3, 149, 3, 149, 3, 149, 7, 149,
	1751, 10, 149, 12, 149, 14, 149, 1754, 11, 149, 3, 150, 3, 150, 5, 150,
	1758, 10, 150, 3, 150, 5, 150, 1761, 10, 150, 3, 150, 5, 150, 1764, 10,
	150, 5, 150, 1766, 10, 150, 3, 150, 5, 150, 1769, 10, 150, 3, 150, 5, 150,
	1772, 10, 150, 3, 150, 3, 150, 5, 150, 1776, 10, 150, 3, 151, 6, 151, 1779,
	10, 151, 13, 151, 14, 151, 1780, 3, 152, 3, 152, 3, 153, 3, 153, 3, 153,
	3, 153, 3, 154, 3, 154, 3, 154, 3, 155, 3, 155, 5, 155, 1794, 10, 155,
	3, 155, 3, 155, 3, 155, 5, 155, 1799, 10, 155, 7, 155, 1801, 10, 155, 12,
	155, 14, 155, 1804, 11, 155, 3, 156, 5, 156, 1807, 10, 156, 3, 156, 3,
	156, 3, 156, 5, 156, 1812, 10, 156, 3, 156, 3, 156, 3, 156, 5, 156, 1817,
	10, 156, 3, 156, 3, 156, 5, 156, 1821, 10, 156, 3, 157, 5, 157, 1824, 10,
	157, 3, 157, 3, 157, 5, 157, 1828, 10, 157, 3, 158, 3, 158, 3, 159, 3,
	159, 3, 160, 3, 160, 3, 160, 3, 161, 3, 161, 5, 161, 1839, 10, 161, 3,
	162, 3, 162, 5, 162, 1843, 10, 162, 3, 163, 3, 163, 3, 163, 3, 164, 3,
	164, 5, 164, 1850, 10, 164, 3, 164, 3, 164, 3, 164, 5, 164, 1855, 10, 164,
	7, 164, 1857, 10, 164, 12, 164, 14, 164, 1860, 11, 164, 3, 165, 3, 165,
	3, 165, 5, 165, 1865, 10, 165, 3, 165, 3, 165, 5, 165, 1869, 10, 165, 3,
	166, 3, 166, 5, 166, 1873, 10, 166, 3, 167, 3, 167, 3, 167, 3, 168, 3,
	168, 3, 168, 3, 168, 5, 168, 1882, 10, 168, 3, 169, 3, 169, 3, 169, 3,
	169, 3, 169, 3, 169, 3, 170, 3, 170, 3, 170, 7, 170, 1893, 10, 170, 12,
	170, 14, 170, 1896, 11, 170, 3, 171, 3, 171, 5, 171, 1900, 10, 171, 3,
	172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 1907, 10, 172, 3, 172, 3,
	172, 5, 172, 1911, 10, 172, 3, 172, 5, 172, 1914, 10, 172, 3, 172, 5, 172,
	1917, 10, 172, 3, 172, 5, 172, 1920, 10, 172, 3, 172, 3, 172, 5, 172, 1924,
	10, 172, 3, 173, 3, 173, 3, 173, 5, 173, 1929, 10, 173, 3, 173, 3, 173,
	3, 174, 3, 174, 3, 174, 5, 174, 1936, 10, 174, 3, 174, 3, 174, 5, 174,
	1940, 10, 174, 3, 174, 3, 174, 5, 174, 1944, 10, 174, 3, 175, 3, 175, 3,
	176, 3, 176, 5, 176, 1950, 10, 176, 3, 176, 3, 176, 3, 176, 5, 176, 1955,
	10, 176, 7, 176, 1957, 10, 176, 12, 176, 14, 176, 1960, 11, 176, 3, 177,
	3, 177, 3, 177, 5, 177, 1965, 10, 177, 3, 178, 3, 178, 3, 178, 3, 178,
	5, 178, 1971, 10, 178, 3, 178, 5, 178, 1974, 10, 178, 3, 179, 5, 179, 1977,
	10, 179, 3, 179, 3, 179, 3, 179, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180,
	3, 181, 3, 181, 3, 181, 3, 181, 3, 182, 3, 182, 5, 182, 1993, 10, 182,
	3, 182, 3, 182, 3, 182, 3, 183, 6, 183, 1999, 10, 183, 13, 183, 14, 183,
	2000, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 185, 5, 185, 2010,
	10, 185, 3, 185, 3, 185, 3, 185, 5, 185, 2015, 10, 185, 3, 185, 5, 185,
	2018, 10, 185, 3, 186, 3, 186, 5, 186, 2022, 10, 186, 3, 187, 3, 187, 5,
	187, 2026, 10, 187, 3, 188, 3, 188, 3, 188, 5, 188, 2031, 10, 188, 3, 188,
	3, 188, 3, 189, 3, 189, 5, 189, 2037, 10, 189, 3, 189, 3, 189, 3, 189,
	5, 189, 2042, 10, 189, 7, 189, 2044, 10, 189, 12, 189, 14, 189, 2047, 11,
	189, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 2055, 10,
	190, 3, 191, 3, 191, 3, 191, 5, 191, 2060, 10, 191, 3, 191, 3, 191, 3,
	191, 5, 191, 2065, 10, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3,
	191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3,
	191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3,
	191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3,
	191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 5,
	191, 2108, 10, 191, 3, 192, 3, 192, 3, 192, 3, 1049, 8, 12, 32, 52, 232,
	254, 258, 193, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,
	68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102,
	104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,
	134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
	164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192,
	194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222,
	224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252,
	254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282,
	284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312,
	314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342,
	344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372,
	374, 376, 378, 380, 382, 2, 25, 4, 2, 99, 99, 103, 103, 6, 2, 26, 26, 33,
	33, 60, 60, 67, 67, 4, 2, 126, 126, 131, 131, 3, 2, 122, 123, 4, 2, 93,
	95, 99, 102, 4, 2, 125, 125, 132, 132, 3, 2, 95, 97, 3, 2, 93, 94, 4, 2,
	104, 105, 118, 119, 3, 2, 116, 117, 4, 2, 103, 103, 106, 115, 7, 2, 38,
	38, 49, 49, 59, 59, 65, 65, 72, 72, 5, 2, 36, 36, 46, 46, 82, 82, 4, 2,
	48, 48, 62, 62, 4, 2, 63, 63, 80, 80, 4, 2, 23, 23, 68, 68, 3, 2, 87, 92,
	4, 2, 99, 99, 120, 120, 4, 2, 24, 24, 84, 84, 3, 2, 29, 30, 4, 2, 40, 40,
	55, 55, 3, 2, 56, 58, 3, 2, 3, 9, 2, 2345, 2, 385, 3, 2, 2, 2, 4, 401,
	3, 2, 2, 2, 6, 405, 3, 2, 2, 2, 8, 417, 3, 2, 2, 2, 10, 419, 3, 2, 2, 2,
	12, 425, 3, 2, 2, 2, 14, 447, 3, 2, 2, 2, 16, 453, 3, 2, 2, 2, 18, 465,
	3, 2, 2, 2, 20, 467, 3, 2, 2, 2, 22, 469, 3, 2, 2, 2, 24, 482, 3, 2, 2,
	2, 26, 489, 3, 2, 2, 2, 28, 492, 3, 2, 2, 2, 30, 497, 3, 2, 2, 2, 32, 544,
	3, 2, 2, 2, 34, 576, 3, 2, 2, 2, 36, 578, 3, 2, 2, 2, 38, 599, 3, 2, 2,
	2, 40, 628, 3, 2, 2, 2, 42, 630, 3, 2, 2, 2, 44, 633, 3, 2, 2, 2, 46, 649,
	3, 2, 2, 2, 48, 653, 3, 2, 2, 2, 50, 662, 3, 2, 2, 2, 52, 664, 3, 2, 2,
	2, 54, 689, 3, 2, 2, 2, 56, 692, 3, 2, 2, 2, 58, 701, 3, 2, 2, 2, 60, 712,
	3, 2, 2, 2, 62, 714, 3, 2, 2, 2, 64, 722, 3, 2, 2, 2, 66, 730, 3, 2, 2,
	2, 68, 738, 3, 2, 2, 2, 70, 751, 3, 2, 2, 2, 72, 753, 3, 2, 2, 2, 74, 761,
	3, 2, 2, 2, 76, 769, 3, 2, 2, 2, 78, 777, 3, 2, 2, 2, 80, 785, 3, 2, 2,
	2, 82, 793, 3, 2, 2, 2, 84, 801, 3, 2, 2, 2, 86, 809, 3, 2, 2, 2, 88, 823,
	3, 2, 2, 2, 90, 825, 3, 2, 2, 2, 92, 827, 3, 2, 2, 2, 94, 835, 3, 2, 2,
	2, 96, 850, 3, 2, 2, 2, 98, 853, 3, 2, 2, 2, 100, 865, 3, 2, 2, 2, 102,
	869, 3, 2, 2, 2, 104, 876, 3, 2, 2, 2, 106, 895, 3, 2, 2, 2, 108, 908,
	3, 2, 2, 2, 110, 943, 3, 2, 2, 2, 112, 947, 3, 2, 2, 2, 114, 950, 3, 2,
	2, 2, 116, 957, 3, 2, 2, 2, 118, 968, 3, 2, 2, 2, 120, 972, 3, 2, 2, 2,
	122, 975, 3, 2, 2, 2, 124, 988, 3, 2, 2, 2, 126, 998, 3, 2, 2, 2, 128,
	1000, 3, 2, 2, 2, 130, 1023, 3, 2, 2, 2, 132, 1025, 3, 2, 2, 2, 134, 1033,
	3, 2, 2, 2, 136, 1035, 3, 2, 2, 2, 138, 1044, 3, 2, 2, 2, 140, 1047, 3,
	2, 2, 2, 142, 1054, 3, 2, 2, 2, 144, 1056, 3, 2, 2, 2, 146, 1058, 3, 2,
	2, 2, 148, 1063, 3, 2, 2, 2, 150, 1069, 3, 2, 2, 2, 152, 1072, 3, 2, 2,
	2, 154, 1080, 3, 2, 2, 2, 156, 1087, 3, 2, 2, 2, 158, 1089, 3, 2, 2, 2,
	160, 1143, 3, 2, 2, 2, 162, 1149, 3, 2, 2, 2, 164, 1151, 3, 2, 2, 2, 166,
	1181, 3, 2, 2, 2, 168, 1183, 3, 2, 2, 2, 170, 1185, 3, 2, 2, 2, 172, 1195,
	3, 2, 2, 2, 174, 1208, 3, 2, 2, 2, 176, 1218, 3, 2, 2, 2, 178, 1222, 3,
	2, 2, 2, 180, 1225, 3, 2, 2, 2, 182, 1233, 3, 2, 2, 2, 184, 1238, 3, 2,
	2, 2, 186, 1242, 3, 2, 2, 2, 188, 1244, 3, 2, 2, 2, 190, 1247, 3, 2, 2,
	2, 192, 1260, 3, 2, 2, 2, 194, 1262, 3, 2, 2, 2, 196, 1269, 3, 2, 2, 2,
	198, 1273, 3, 2, 2, 2, 200, 1285, 3, 2, 2, 2, 202, 1295, 3, 2, 2, 2, 204,
	1301, 3, 2, 2, 2, 206, 1312, 3, 2, 2, 2, 208, 1324, 3, 2, 2, 2, 210, 1326,
	3, 2, 2, 2, 212, 1337, 3, 2, 2, 2, 214, 1351, 3, 2, 2, 2, 216, 1357, 3,
	2, 2, 2, 218, 1359, 3, 2, 2, 2, 220, 1366, 3, 2, 2, 2, 222, 1387, 3, 2,
	2, 2, 224, 1389, 3, 2, 2, 2, 226, 1397, 3, 2, 2, 2, 228, 1406, 3, 2, 2,
	2, 230, 1414, 3, 2, 2, 2, 232, 1428, 3, 2, 2, 2, 234, 1447, 3, 2, 2, 2,
	236, 1464, 3, 2, 2, 2, 238, 1483, 3, 2, 2, 2, 240, 1486, 3, 2, 2, 2, 242,
	1490, 3, 2, 2, 2, 244, 1492, 3, 2, 2, 2, 246, 1495, 3, 2, 2, 2, 248, 1499,
	3, 2, 2, 2, 250, 1511, 3, 2, 2, 2, 252, 1522, 3, 2, 2, 2, 254, 1538, 3,
	2, 2, 2, 256, 1561, 3, 2, 2, 2, 258, 1566, 3, 2, 2, 2, 260, 1586, 3, 2,
	2, 2, 262, 1593, 3, 2, 2, 2, 264, 1602, 3, 2, 2, 2, 266, 1616, 3, 2, 2,
	2, 268, 1635, 3, 2, 2, 2, 270, 1642, 3, 2, 2, 2, 272, 1647, 3, 2, 2, 2,
	274, 1651, 3, 2, 2, 2, 276, 1653, 3, 2, 2, 2, 278, 1667, 3, 2, 2, 2, 280,
	1678, 3, 2, 2, 2, 282, 1680, 3, 2, 2, 2, 284, 1710, 3, 2, 2, 2, 286, 1713,
	3, 2, 2, 2, 288, 1717, 3, 2, 2, 2, 290, 1719, 3, 2, 2, 2, 292, 1725, 3,
	2, 2, 2, 294, 1745, 3, 2, 2, 2, 296, 1747, 3, 2, 2, 2, 298, 1775, 3, 2,
	2, 2, 300, 1778, 3, 2, 2, 2, 302, 1782, 3, 2, 2, 2, 304, 1784, 3, 2, 2,
	2, 306, 1788, 3, 2, 2, 2, 308, 1791, 3, 2, 2, 2, 310, 1806, 3, 2, 2, 2,
	312, 1827, 3, 2, 2, 2, 314, 1829, 3, 2, 2, 2, 316, 1831, 3, 2, 2, 2, 318,
	1833, 3, 2, 2, 2, 320, 1836, 3, 2, 2, 2, 322, 1840, 3, 2, 2, 2, 324, 1844,
	3, 2, 2, 2, 326, 1847, 3, 2, 2, 2, 328, 1861, 3, 2, 2, 2, 330, 1872, 3,
	2, 2, 2, 332, 1874, 3, 2, 2, 2, 334, 1877, 3, 2, 2, 2, 336, 1883, 3, 2,
	2, 2, 338, 1889, 3, 2, 2, 2, 340, 1899, 3, 2, 2, 2, 342, 1910, 3, 2, 2,
	2, 344, 1925, 3, 2, 2, 2, 346, 1943, 3, 2, 2, 2, 348, 1945, 3, 2, 2, 2,
	350, 1947, 3, 2, 2, 2, 352, 1964, 3, 2, 2, 2, 354, 1966, 3, 2, 2, 2, 356,
	1976, 3, 2, 2, 2, 358, 1981, 3, 2, 2, 2, 360, 1986, 3, 2, 2, 2, 362, 1990,
	3, 2, 2, 2, 364, 1998, 3, 2, 2, 2, 366, 2002, 3, 2, 2, 2, 368, 2017, 3,
	2, 2, 2, 370, 2019, 3, 2, 2, 2, 372, 2025, 3, 2, 2, 2, 374, 2027, 3, 2,
	2, 2, 376, 2034, 3, 2, 2, 2, 378, 2054, 3, 2, 2, 2, 380, 2107, 3, 2, 2,
	2, 382, 2109, 3, 2, 2, 2, 384, 386, 5, 122, 62, 2, 385, 384, 3, 2, 2, 2,
	385, 386, 3, 2, 2, 2, 386, 387, 3, 2, 2, 2, 387, 388, 7, 2, 2, 3, 388,
	3, 3, 2, 2, 2, 389, 391, 5, 382, 192, 2, 390, 389, 3, 2, 2, 2, 391, 392,
	3, 2, 2, 2, 392, 390, 3, 2, 2, 2, 392, 393, 3, 2, 2, 2, 393, 402, 3, 2,
	2, 2, 394, 402, 7, 71, 2, 2, 395, 396, 7, 87, 2, 2, 396, 397, 5, 92, 47,
	2, 397, 398, 7, 88, 2, 2, 398, 402, 3, 2, 2, 2, 399, 402, 5, 6, 4, 2, 400,
	402, 5, 14, 8, 2, 401, 390, 3, 2, 2, 2, 401, 394, 3, 2, 2, 2, 401, 395,
	3, 2, 2, 2, 401, 399, 3, 2, 2, 2, 401, 400, 3, 2, 2, 2, 402, 5, 3, 2, 2,
	2, 403, 406, 5, 8, 5, 2, 404, 406, 5, 10, 6, 2, 405, 403, 3, 2, 2, 2, 405,
	404, 3, 2, 2, 2, 406, 7, 3, 2, 2, 2, 407, 418, 7, 134, 2, 2, 408, 418,
	5, 332, 167, 2, 409, 418, 5, 318, 160, 2, 410, 418, 5, 334, 168, 2, 411,
	414, 7, 101, 2, 2, 412, 415, 5, 280, 141, 2, 413, 415, 5, 164, 83, 2, 414,
	412, 3, 2, 2, 2, 414, 413, 3, 2, 2, 2, 415, 418, 3, 2, 2, 2, 416, 418,
	5, 346, 174, 2, 417, 407, 3, 2, 2, 2, 417, 408, 3, 2, 2, 2, 417, 409, 3,
	2, 2, 2, 417, 410, 3, 2, 2, 2, 417, 411, 3, 2, 2, 2, 417, 416, 3, 2, 2,
	2, 418, 9, 3, 2, 2, 2, 419, 421, 5, 12, 7, 2, 420, 422, 7, 70, 2, 2, 421,
	420, 3, 2, 2, 2, 421, 422, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2, 423, 424,
	5, 8, 5, 2, 424, 11, 3, 2, 2, 2, 425, 429, 8, 7, 1, 2, 426, 430, 5, 162,
	82, 2, 427, 430, 5, 186, 94, 2, 428, 430, 5, 164, 83, 2, 429, 426, 3, 2,
	2, 2, 429, 427, 3, 2, 2, 2, 429, 428, 3, 2, 2, 2, 429, 430, 3, 2, 2, 2,
	430, 431, 3, 2, 2, 2, 431, 432, 7, 129, 2, 2, 432, 444, 3, 2, 2, 2, 433,
	439, 12, 3, 2, 2, 434, 440, 7, 134, 2, 2, 435, 437, 7, 70, 2, 2, 436, 435,
	3, 2, 2, 2, 436, 437, 3, 2, 2, 2, 437, 438, 3, 2, 2, 2, 438, 440, 5, 344,
	173, 2, 439, 434, 3, 2, 2, 2, 439, 436, 3, 2, 2, 2, 440, 441, 3, 2, 2,
	2, 441, 443, 7, 129, 2, 2, 442, 433, 3, 2, 2, 2, 443, 446, 3, 2, 2, 2,
	444, 442, 3, 2, 2, 2, 444, 445, 3, 2, 2, 2, 445, 13, 3, 2, 2, 2, 446, 444,
	3, 2, 2, 2, 447, 449, 5, 16, 9, 2, 448, 450, 5, 30, 16, 2, 449, 448, 3,
	2, 2, 2, 449, 450, 3, 2, 2, 2, 450, 451, 3, 2, 2, 2, 451, 452, 5, 102,
	52, 2, 452, 15, 3, 2, 2, 2, 453, 455, 7, 89, 2, 2, 454, 456, 5, 18, 10,
	2, 455, 454, 3, 2, 2, 2, 455, 456, 3, 2, 2, 2, 456, 457, 3, 2, 2, 2, 457,
	458, 7, 90, 2, 2, 458, 17, 3, 2, 2, 2, 459, 466, 5, 22, 12, 2, 460, 463,
	5, 20, 11, 2, 461, 462, 7, 124, 2, 2, 462, 464, 5, 22, 12, 2, 463, 461,
	3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 466, 3, 2, 2, 2, 465, 459, 3, 2,
	2, 2, 465, 460, 3, 2, 2, 2, 466, 19, 3, 2, 2, 2, 467, 468, 9, 2, 2, 2,
	468, 21, 3, 2, 2, 2, 469, 474, 5, 24, 13, 2, 470, 471, 7, 124, 2, 2, 471,
	473, 5, 24, 13, 2, 472, 470, 3, 2, 2, 2, 473, 476, 3, 2, 2, 2, 474, 472,
	3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 478, 3, 2, 2, 2, 476, 474, 3, 2,
	2, 2, 477, 479, 7, 133, 2, 2, 478, 477, 3, 2, 2, 2, 478, 479, 3, 2, 2,
	2, 479, 23, 3, 2, 2, 2, 480, 483, 5, 26, 14, 2, 481, 483, 5, 28, 15, 2,
	482, 480, 3, 2, 2, 2, 482, 481, 3, 2, 2, 2, 483, 25, 3, 2, 2, 2, 484, 486,
	7, 99, 2, 2, 485, 484, 3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 487, 3, 2,
	2, 2, 487, 490, 7, 134, 2, 2, 488, 490, 7, 71, 2, 2, 489, 485, 3, 2, 2,
	2, 489, 488, 3, 2, 2, 2, 490, 27, 3, 2, 2, 2, 491, 493, 7, 99, 2, 2, 492,
	491, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494, 495,
	7, 134, 2, 2, 495, 496, 5, 270, 136, 2, 496, 29, 3, 2, 2, 2, 497, 499,
	7, 87, 2, 2, 498, 500, 5, 260, 131, 2, 499, 498, 3, 2, 2, 2, 499, 500,
	3, 2, 2, 2, 500, 501, 3, 2, 2, 2, 501, 503, 7, 88, 2, 2, 502, 504, 7, 49,
	2, 2, 503, 502, 3, 2, 2, 2, 503, 504, 3, 2, 2, 2, 504, 506, 3, 2, 2, 2,
	505, 507, 5, 372, 187, 2, 506, 505, 3, 2, 2, 2, 506, 507, 3, 2, 2, 2, 507,
	509, 3, 2, 2, 2, 508, 510, 5, 206, 104, 2, 509, 508, 3, 2, 2, 2, 509, 510,
	3, 2, 2, 2, 510, 512, 3, 2, 2, 2, 511, 513, 5, 236, 119, 2, 512, 511, 3,
	2, 2, 2, 512, 513, 3, 2, 2, 2, 513, 31, 3, 2, 2, 2, 514, 515, 8, 17, 1,
	2, 515, 545, 5, 4, 3, 2, 516, 519, 5, 160, 81, 2, 517, 519, 5, 354, 178,
	2, 518, 516, 3, 2, 2, 2, 518, 517, 3, 2, 2, 2, 519, 526, 3, 2, 2, 2, 520,
	522, 7, 87, 2, 2, 521, 523, 5, 36, 19, 2, 522, 521, 3, 2, 2, 2, 522, 523,
	3, 2, 2, 2, 523, 524, 3, 2, 2, 2, 524, 527, 7, 88, 2, 2, 525, 527, 5, 278,
	140, 2, 526, 520, 3, 2, 2, 2, 526, 525, 3, 2, 2, 2, 527, 545, 3, 2, 2,
	2, 528, 529, 9, 3, 2, 2, 529, 530, 7, 104, 2, 2, 530, 531, 5, 248, 125,
	2, 531, 532, 7, 105, 2, 2, 532, 533, 7, 87, 2, 2, 533, 534, 5, 92, 47,
	2, 534, 535, 7, 88, 2, 2, 535, 545, 3, 2, 2, 2, 536, 537, 5, 34, 18, 2,
	537, 540, 7, 87, 2, 2, 538, 541, 5, 92, 47, 2, 539, 541, 5, 248, 125, 2,
	540, 538, 3, 2, 2, 2, 540, 539, 3, 2, 2, 2, 541, 542, 3, 2, 2, 2, 542,
	543, 7, 88, 2, 2, 543, 545, 3, 2, 2, 2, 544, 514, 3, 2, 2, 2, 544, 518,
	3, 2, 2, 2, 544, 528, 3, 2, 2, 2, 544, 536, 3, 2, 2, 2, 545, 573, 3, 2,
	2, 2, 546, 547, 12, 9, 2, 2, 547, 550, 7, 89, 2, 2, 548, 551, 5, 92, 47,
	2, 549, 551, 5, 278, 140, 2, 550, 548, 3, 2, 2, 2, 550, 549, 3, 2, 2, 2,
	551, 552, 3, 2, 2, 2, 552, 553, 7, 90, 2, 2, 553, 572, 3, 2, 2, 2, 554,
	555, 12, 8, 2, 2, 555, 557, 7, 87, 2, 2, 556, 558, 5, 36, 19, 2, 557, 556,
	3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 572, 7, 88,
	2, 2, 560, 561, 12, 6, 2, 2, 561, 567, 9, 4, 2, 2, 562, 564, 7, 70, 2,
	2, 563, 562, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565,
	568, 5, 6, 4, 2, 566, 568, 5, 38, 20, 2, 567, 563, 3, 2, 2, 2, 567, 566,
	3, 2, 2, 2, 568, 572, 3, 2, 2, 2, 569, 570, 12, 5, 2, 2, 570, 572, 9, 5,
	2, 2, 571, 546, 3, 2, 2, 2, 571, 554, 3, 2, 2, 2, 571, 560, 3, 2, 2, 2,
	571, 569, 3, 2, 2, 2, 572, 575, 3, 2, 2, 2, 573, 571, 3, 2, 2, 2, 573,
	574, 3, 2, 2, 2, 574, 33, 3, 2, 2, 2, 575, 573, 3, 2, 2, 2, 576, 577, 7,
	77, 2, 2, 577, 35, 3, 2, 2, 2, 578, 579, 5, 276, 139, 2, 579, 37, 3, 2,
	2, 2, 580, 582, 5, 12, 7, 2, 581, 580, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2,
	582, 586, 3, 2, 2, 2, 583, 584, 5, 162, 82, 2, 584, 585, 7, 129, 2, 2,
	585, 587, 3, 2, 2, 2, 586, 583, 3, 2, 2, 2, 586, 587, 3, 2, 2, 2, 587,
	588, 3, 2, 2, 2, 588, 589, 7, 101, 2, 2, 589, 600, 5, 162, 82, 2, 590,
	591, 5, 12, 7, 2, 591, 592, 7, 70, 2, 2, 592, 593, 5, 344, 173, 2, 593,
	594, 7, 129, 2, 2, 594, 595, 7, 101, 2, 2, 595, 596, 5, 162, 82, 2, 596,
	600, 3, 2, 2, 2, 597, 598, 7, 101, 2, 2, 598, 600, 5, 164, 83, 2, 599,
	581, 3, 2, 2, 2, 599, 590, 3, 2, 2, 2, 599, 597, 3, 2, 2, 2, 600, 39, 3,
	2, 2, 2, 601, 629, 5, 32, 17, 2, 602, 607, 7, 122, 2, 2, 603, 607, 7, 123,
	2, 2, 604, 607, 5, 42, 22, 2, 605, 607, 7, 64, 2, 2, 606, 602, 3, 2, 2,
	2, 606, 603, 3, 2, 2, 2, 606, 604, 3, 2, 2, 2, 606, 605, 3, 2, 2, 2, 607,
	608, 3, 2, 2, 2, 608, 629, 5, 40, 21, 2, 609, 618, 7, 64, 2, 2, 610, 611,
	7, 87, 2, 2, 611, 612, 5, 248, 125, 2, 612, 613, 7, 88, 2, 2, 613, 619,
	3, 2, 2, 2, 614, 615, 7, 133, 2, 2, 615, 616, 7, 87, 2, 2, 616, 617, 7,
	134, 2, 2, 617, 619, 7, 88, 2, 2, 618, 610, 3, 2, 2, 2, 618, 614, 3, 2,
	2, 2, 619, 629, 3, 2, 2, 2, 620, 621, 7, 13, 2, 2, 621, 622, 7, 87, 2,
	2, 622, 623, 5, 248, 125, 2, 623, 624, 7, 88, 2, 2, 624, 629, 3, 2, 2,
	2, 625, 629, 5, 58, 30, 2, 626, 629, 5, 44, 23, 2, 627, 629, 5, 56, 29,
	2, 628, 601, 3, 2, 2, 2, 628, 606, 3, 2, 2, 2, 628, 609, 3, 2, 2, 2, 628,
	620, 3, 2, 2, 2, 628, 625, 3, 2, 2, 2, 628, 626, 3, 2, 2, 2, 628, 627,
	3, 2, 2, 2, 629, 41, 3, 2, 2, 2, 630, 631, 9, 6, 2, 2, 631, 43, 3, 2, 2,
	2, 632, 634, 7, 129, 2, 2, 633, 632, 3, 2, 2, 2, 633, 634, 3, 2, 2, 2,
	634, 635, 3, 2, 2, 2, 635, 637, 7, 51, 2, 2, 636, 638, 5, 46, 24, 2, 637,
	636, 3, 2, 2, 2, 637, 638, 3, 2, 2, 2, 638, 644, 3, 2, 2, 2, 639, 645,
	5, 48, 25, 2, 640, 641, 7, 87, 2, 2, 641, 642, 5, 248, 125, 2, 642, 643,
	7, 88, 2, 2, 643, 645, 3, 2, 2, 2, 644, 639, 3, 2, 2, 2, 644, 640, 3, 2,
	2, 2, 645, 647, 3, 2, 2, 2, 646, 648, 5, 54, 28, 2, 647, 646, 3, 2, 2,
	2, 647, 648, 3, 2, 2, 2, 648, 45, 3, 2, 2, 2, 649, 650, 7, 87, 2, 2, 650,
	651, 5, 36, 19, 2, 651, 652, 7, 88, 2, 2, 652, 47, 3, 2, 2, 2, 653, 655,
	5, 152, 77, 2, 654, 656, 5, 50, 26, 2, 655, 654, 3, 2, 2, 2, 655, 656,
	3, 2, 2, 2, 656, 49, 3, 2, 2, 2, 657, 659, 5, 238, 120, 2, 658, 660, 5,
	50, 26, 2, 659, 658, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2, 660, 663, 3, 2,
	2, 2, 661, 663, 5, 52, 27, 2, 662, 657, 3, 2, 2, 2, 662, 661, 3, 2, 2,
	2, 663, 51, 3, 2, 2, 2, 664, 665, 8, 27, 1, 2, 665, 666, 7, 89, 2, 2, 666,
	667, 5, 92, 47, 2, 667, 669, 7, 90, 2, 2, 668, 670, 5, 206, 104, 2, 669,
	668, 3, 2, 2, 2, 669, 670, 3, 2, 2, 2, 670, 680, 3, 2, 2, 2, 671, 672,
	12, 3, 2, 2, 672, 673, 7, 89, 2, 2, 673, 674, 5, 94, 48, 2, 674, 676, 7,
	90, 2, 2, 675, 677, 5, 206, 104, 2, 676, 675, 3, 2, 2, 2, 676, 677, 3,
	2, 2, 2, 677, 679, 3, 2, 2, 2, 678, 671, 3, 2, 2, 2, 679, 682, 3, 2, 2,
	2, 680, 678, 3, 2, 2, 2, 680, 681, 3, 2, 2, 2, 681, 53, 3, 2, 2, 2, 682,
	680, 3, 2, 2, 2, 683, 685, 7, 87, 2, 2, 684, 686, 5, 36, 19, 2, 685, 684,
	3, 2, 2, 2, 685, 686, 3, 2, 2, 2, 686, 687, 3, 2, 2, 2, 687, 690, 7, 88,
	2, 2, 688, 690, 5, 278, 140, 2, 689, 683, 3, 2, 2, 2, 689, 688, 3, 2, 2,
	2, 690, 55, 3, 2, 2, 2, 691, 693, 7, 129, 2, 2, 692, 691, 3, 2, 2, 2, 692,
	693, 3, 2, 2, 2, 693, 694, 3, 2, 2, 2, 694, 697, 7, 30, 2, 2, 695, 696,
	7, 89, 2, 2, 696, 698, 7, 90, 2, 2, 697, 695, 3, 2, 2, 2, 697, 698, 3,
	2, 2, 2, 698, 699, 3, 2, 2, 2, 699, 700, 5, 60, 31, 2, 700, 57, 3, 2, 2,
	2, 701, 702, 7, 52, 2, 2, 702, 703, 7, 87, 2, 2, 703, 704, 5, 92, 47, 2,
	704, 705, 7, 88, 2, 2, 705, 59, 3, 2, 2, 2, 706, 713, 5, 40, 21, 2, 707,
	708, 7, 87, 2, 2, 708, 709, 5, 248, 125, 2, 709, 710, 7, 88, 2, 2, 710,
	711, 5, 60, 31, 2, 711, 713, 3, 2, 2, 2, 712, 706, 3, 2, 2, 2, 712, 707,
	3, 2, 2, 2, 713, 61, 3, 2, 2, 2, 714, 719, 5, 60, 31, 2, 715, 716, 9, 7,
	2, 2, 716, 718, 5, 60, 31, 2, 717, 715, 3, 2, 2, 2, 718, 721, 3, 2, 2,
	2, 719, 717, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 63, 3, 2, 2, 2, 721,
	719, 3, 2, 2, 2, 722, 727, 5, 62, 32, 2, 723, 724, 9, 8, 2, 2, 724, 726,
	5, 62, 32, 2, 725, 723, 3, 2, 2, 2, 726, 729, 3, 2, 2, 2, 727, 725, 3,
	2, 2, 2, 727, 728, 3, 2, 2, 2, 728, 65, 3, 2, 2, 2, 729, 727, 3, 2, 2,
	2, 730, 735, 5, 64, 33, 2, 731, 732, 9, 9, 2, 2, 732, 734, 5, 64, 33, 2,
	733, 731, 3, 2, 2, 2, 734, 737, 3, 2, 2, 2, 735, 733, 3, 2, 2, 2, 735,
	736, 3, 2, 2, 2, 736, 67, 3, 2, 2, 2, 737, 735, 3, 2, 2, 2, 738, 744, 5,
	66, 34, 2, 739, 740, 5, 70, 36, 2, 740, 741, 5, 66, 34, 2, 741, 743, 3,
	2, 2, 2, 742, 739, 3, 2, 2, 2, 743, 746, 3, 2, 2, 2, 744, 742, 3, 2, 2,
	2, 744, 745, 3, 2, 2, 2, 745, 69, 3, 2, 2, 2, 746, 744, 3, 2, 2, 2, 747,
	748, 7, 105, 2, 2, 748, 752, 7, 105, 2, 2, 749, 750, 7, 104, 2, 2, 750,
	752, 7, 104, 2, 2, 751, 747, 3, 2, 2, 2, 751, 749, 3, 2, 2, 2, 752, 71,
	3, 2, 2, 2, 753, 758, 5, 68, 35, 2, 754, 755, 9, 10, 2, 2, 755, 757, 5,
	68, 35, 2, 756, 754, 3, 2, 2, 2, 757, 760, 3, 2, 2, 2, 758, 756, 3, 2,
	2, 2, 758, 759, 3, 2, 2, 2, 759, 73, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2,
	761, 766, 5, 72, 37, 2, 762, 763, 9, 11, 2, 2, 763, 765, 5, 72, 37, 2,
	764, 762, 3, 2, 2, 2, 765, 768, 3, 2, 2, 2, 766, 764, 3, 2, 2, 2, 766,
	767, 3, 2, 2, 2, 767, 75, 3, 2, 2, 2, 768, 766, 3, 2, 2, 2, 769, 774, 5,
	74, 38, 2, 770, 771, 7, 99, 2, 2, 771, 773, 5, 74, 38, 2, 772, 770, 3,
	2, 2, 2, 773, 776, 3, 2, 2, 2, 774, 772, 3, 2, 2, 2, 774, 775, 3, 2, 2,
	2, 775, 77, 3, 2, 2, 2, 776, 774, 3, 2, 2, 2, 777, 782, 5, 76, 39, 2, 778,
	779, 7, 98, 2, 2, 779, 781, 5, 76, 39, 2, 780, 778, 3, 2, 2, 2, 781, 784,
	3, 2, 2, 2, 782, 780, 3, 2, 2, 2, 782, 783, 3, 2, 2, 2, 783, 79, 3, 2,
	2, 2, 784, 782, 3, 2, 2, 2, 785, 790, 5, 78, 40, 2, 786, 787, 7, 100, 2,
	2, 787, 789, 5, 78, 40, 2, 788, 786, 3, 2, 2, 2, 789, 792, 3, 2, 2, 2,
	790, 788, 3, 2, 2, 2, 790, 791, 3, 2, 2, 2, 791, 81, 3, 2, 2, 2, 792, 790,
	3, 2, 2, 2, 793, 798, 5, 80, 41, 2, 794, 795, 7, 120, 2, 2, 795, 797, 5,
	80, 41, 2, 796, 794, 3, 2, 2, 2, 797, 800, 3, 2, 2, 2, 798, 796, 3, 2,
	2, 2, 798, 799, 3, 2, 2, 2, 799, 83, 3, 2, 2, 2, 800, 798, 3, 2, 2, 2,
	801, 806, 5, 82, 42, 2, 802, 803, 7, 121, 2, 2, 803, 805, 5, 82, 42, 2,
	804, 802, 3, 2, 2, 2, 805, 808, 3, 2, 2, 2, 806, 804, 3, 2, 2, 2, 806,
	807, 3, 2, 2, 2, 807, 85, 3, 2, 2, 2, 808, 806, 3, 2, 2, 2, 809, 815, 5,
	84, 43, 2, 810, 811, 7, 127, 2, 2, 811, 812, 5, 92, 47, 2, 812, 813, 7,
	128, 2, 2, 813, 814, 5, 88, 45, 2, 814, 816, 3, 2, 2, 2, 815, 810, 3, 2,
	2, 2, 815, 816, 3, 2, 2, 2, 816, 87, 3, 2, 2, 2, 817, 824, 5, 86, 44, 2,
	818, 819, 5, 84, 43, 2, 819, 820, 5, 90, 46, 2, 820, 821, 5, 274, 138,
	2, 821, 824, 3, 2, 2, 2, 822, 824, 5, 370, 186, 2, 823, 817, 3, 2, 2, 2,
	823, 818, 3, 2, 2, 2, 823, 822, 3, 2, 2, 2, 824, 89, 3, 2, 2, 2, 825, 826,
	9, 12, 2, 2, 826, 91, 3, 2, 2, 2, 827, 832, 5, 88, 45, 2, 828, 829, 7,
	124, 2, 2, 829, 831, 5, 88, 45, 2, 830, 828, 3, 2, 2, 2, 831, 834, 3, 2,
	2, 2, 832, 830, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 93, 3, 2, 2, 2,
	834, 832, 3, 2, 2, 2, 835, 836, 5, 86, 44, 2, 836, 95, 3, 2, 2, 2, 837,
	851, 5, 98, 50, 2, 838, 851, 5, 120, 61, 2, 839, 841, 5, 206, 104, 2, 840,
	839, 3, 2, 2, 2, 840, 841, 3, 2, 2, 2, 841, 848, 3, 2, 2, 2, 842, 849,
	5, 100, 51, 2, 843, 849, 5, 102, 52, 2, 844, 849, 5, 106, 54, 2, 845, 849,
	5, 110, 56, 2, 846, 849, 5, 118, 60, 2, 847, 849, 5, 360, 181, 2, 848,
	842, 3, 2, 2, 2, 848, 843, 3, 2, 2, 2, 848, 844, 3, 2, 2, 2, 848, 845,
	3, 2, 2, 2, 848, 846, 3, 2, 2, 2, 848, 847, 3, 2, 2, 2, 849, 851, 3, 2,
	2, 2, 850, 837, 3, 2, 2, 2, 850, 838, 3, 2, 2, 2, 850, 840, 3, 2, 2, 2,
	851, 97, 3, 2, 2, 2, 852, 854, 5, 206, 104, 2, 853, 852, 3, 2, 2, 2, 853,
	854, 3, 2, 2, 2, 854, 859, 3, 2, 2, 2, 855, 860, 7, 134, 2, 2, 856, 857,
	7, 18, 2, 2, 857, 860, 5, 94, 48, 2, 858, 860, 7, 29, 2, 2, 859, 855, 3,
	2, 2, 2, 859, 856, 3, 2, 2, 2, 859, 858, 3, 2, 2, 2, 860, 861, 3, 2, 2,
	2, 861, 862, 7, 128, 2, 2, 862, 863, 5, 96, 49, 2, 863, 99, 3, 2, 2, 2,
	864, 866, 5, 92, 47, 2, 865, 864, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866,
	867, 3, 2, 2, 2, 867, 868, 7, 130, 2, 2, 868, 101, 3, 2, 2, 2, 869, 871,
	7, 91, 2, 2, 870, 872, 5, 104, 53, 2, 871, 870, 3, 2, 2, 2, 871, 872, 3,
	2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 874, 7, 92, 2, 2, 874, 103, 3, 2, 2,
	2, 875, 877, 5, 96, 49, 2, 876, 875, 3, 2, 2, 2, 877, 878, 3, 2, 2, 2,
	878, 876, 3, 2, 2, 2, 878, 879, 3, 2, 2, 2, 879, 105, 3, 2, 2, 2, 880,
	881, 7, 45, 2, 2, 881, 882, 7, 87, 2, 2, 882, 883, 5, 108, 55, 2, 883,
	884, 7, 88, 2, 2, 884, 887, 5, 96, 49, 2, 885, 886, 7, 34, 2, 2, 886, 888,
	5, 96, 49, 2, 887, 885, 3, 2, 2, 2, 887, 888, 3, 2, 2, 2, 888, 896, 3,
	2, 2, 2, 889, 890, 7, 69, 2, 2, 890, 891, 7, 87, 2, 2, 891, 892, 5, 108,
	55, 2, 892, 893, 7, 88, 2, 2, 893, 894, 5, 96, 49, 2, 894, 896, 3, 2, 2,
	2, 895, 880, 3, 2, 2, 2, 895, 889, 3, 2, 2, 2, 896, 107, 3, 2, 2, 2, 897,
	909, 5, 92, 47, 2, 898, 900, 5, 206, 104, 2, 899, 898, 3, 2, 2, 2, 899,
	900, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901, 902, 5, 140, 71, 2, 902, 906,
	5, 228, 115, 2, 903, 904, 7, 103, 2, 2, 904, 907, 5, 274, 138, 2, 905,
	907, 5, 278, 140, 2, 906, 903, 3, 2, 2, 2, 906, 905, 3, 2, 2, 2, 907, 909,
	3, 2, 2, 2, 908, 897, 3, 2, 2, 2, 908, 899, 3, 2, 2, 2, 909, 109, 3, 2,
	2, 2, 910, 911, 7, 86, 2, 2, 911, 912, 7, 87, 2, 2, 912, 913, 5, 108, 55,
	2, 913, 914, 7, 88, 2, 2, 914, 915, 5, 96, 49, 2, 915, 944, 3, 2, 2, 2,
	916, 917, 7, 31, 2, 2, 917, 918, 5, 96, 49, 2, 918, 919, 7, 86, 2, 2, 919,
	920, 7, 87, 2, 2, 920, 921, 5, 92, 47, 2, 921, 922, 7, 88, 2, 2, 922, 923,
	7, 130, 2, 2, 923, 944, 3, 2, 2, 2, 924, 925, 7, 42, 2, 2, 925, 938, 7,
	87, 2, 2, 926, 928, 5, 112, 57, 2, 927, 929, 5, 108, 55, 2, 928, 927, 3,
	2, 2, 2, 928, 929, 3, 2, 2, 2, 929, 930, 3, 2, 2, 2, 930, 932, 7, 130,
	2, 2, 931, 933, 5, 92, 47, 2, 932, 931, 3, 2, 2, 2, 932, 933, 3, 2, 2,
	2, 933, 939, 3, 2, 2, 2, 934, 935, 5, 114, 58, 2, 935, 936, 7, 128, 2,
	2, 936, 937, 5, 116, 59, 2, 937, 939, 3, 2, 2, 2, 938, 926, 3, 2, 2, 2,
	938, 934, 3, 2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 941, 7, 88, 2, 2, 941,
	942, 5, 96, 49, 2, 942, 944, 3, 2, 2, 2, 943, 910, 3, 2, 2, 2, 943, 916,
	3, 2, 2, 2, 943, 924, 3, 2, 2, 2, 944, 111, 3, 2, 2, 2, 945, 948, 5, 100,
	51, 2, 946, 948, 5, 130, 66, 2, 947, 945, 3, 2, 2, 2, 947, 946, 3, 2, 2,
	2, 948, 113, 3, 2, 2, 2, 949, 951, 5, 206, 104, 2, 950, 949, 3, 2, 2, 2,
	950, 951, 3, 2, 2, 2, 951, 952, 3, 2, 2, 2, 952, 953, 5, 140, 71, 2, 953,
	954, 5, 228, 115, 2, 954, 115, 3, 2, 2, 2, 955, 958, 5, 92, 47, 2, 956,
	958, 5, 278, 140, 2, 957, 955, 3, 2, 2, 2, 957, 956, 3, 2, 2, 2, 958, 117,
	3, 2, 2, 2, 959, 969, 7, 17, 2, 2, 960, 969, 7, 27, 2, 2, 961, 964, 7,
	61, 2, 2, 962, 965, 5, 92, 47, 2, 963, 965, 5, 278, 140, 2, 964, 962, 3,
	2, 2, 2, 964, 963, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965, 969, 3, 2, 2,
	2, 966, 967, 7, 44, 2, 2, 967, 969, 7, 134, 2, 2, 968, 959, 3, 2, 2, 2,
	968, 960, 3, 2, 2, 2, 968, 961, 3, 2, 2, 2, 968, 966, 3, 2, 2, 2, 969,
	970, 3, 2, 2, 2, 970, 971, 7, 130, 2, 2, 971, 119, 3, 2, 2, 2, 972, 973,
	5, 126, 64, 2, 973, 121, 3, 2, 2, 2, 974, 976, 5, 124, 63, 2, 975, 974,
	3, 2, 2, 2, 976, 977, 3, 2, 2, 2, 977, 975, 3, 2, 2, 2, 977, 978, 3, 2,
	2, 2, 978, 123, 3, 2, 2, 2, 979, 989, 5, 126, 64, 2, 980, 989, 5, 266,
	134, 2, 981, 989, 5, 336, 169, 2, 982, 989, 5, 356, 179, 2, 983, 989, 5,
	358, 180, 2, 984, 989, 5, 204, 103, 2, 985, 989, 5, 190, 96, 2, 986, 989,
	5, 134, 68, 2, 987, 989, 5, 136, 69, 2, 988, 979, 3, 2, 2, 2, 988, 980,
	3, 2, 2, 2, 988, 981, 3, 2, 2, 2, 988, 982, 3, 2, 2, 2, 988, 983, 3, 2,
	2, 2, 988, 984, 3, 2, 2, 2, 988, 985, 3, 2, 2, 2, 988, 986, 3, 2, 2, 2,
	988, 987, 3, 2, 2, 2, 989, 125, 3, 2, 2, 2, 990, 999, 5, 130, 66, 2, 991,
	999, 5, 202, 102, 2, 992, 999, 5, 194, 98, 2, 993, 999, 5, 198, 100, 2,
	994, 999, 5, 200, 101, 2, 995, 999, 5, 132, 67, 2, 996, 999, 5, 128, 65,
	2, 997, 999, 5, 174, 88, 2, 998, 990, 3, 2, 2, 2, 998, 991, 3, 2, 2, 2,
	998, 992, 3, 2, 2, 2, 998, 993, 3, 2, 2, 2, 998, 994, 3, 2, 2, 2, 998,
	995, 3, 2, 2, 2, 998, 996, 3, 2, 2, 2, 998, 997, 3, 2, 2, 2, 999, 127,
	3, 2, 2, 2, 1000, 1001, 7, 81, 2, 2, 1001, 1003, 7, 134, 2, 2, 1002, 1004,
	5, 206, 104, 2, 1003, 1002, 3, 2, 2, 2, 1003, 1004, 3, 2, 2, 2, 1004, 1005,
	3, 2, 2, 2, 1005, 1006, 7, 103, 2, 2, 1006, 1007, 5, 248, 125, 2, 1007,
	1008, 7, 130, 2, 2, 1008, 129, 3, 2, 2, 2, 1009, 1011, 5, 140, 71, 2, 1010,
	1009, 3, 2, 2, 2, 1010, 1011, 3, 2, 2, 2, 1011, 1013, 3, 2, 2, 2, 1012,
	1014, 5, 224, 113, 2, 1013, 1012, 3, 2, 2, 2, 1013, 1014, 3, 2, 2, 2, 1014,
	1015, 3, 2, 2, 2, 1015, 1024, 7, 130, 2, 2, 1016, 1018, 5, 206, 104, 2,
	1017, 1019, 5, 140, 71, 2, 1018, 1017, 3, 2, 2, 2, 1018, 1019, 3, 2, 2,
	2, 1019, 1020, 3, 2, 2, 2, 1020, 1021, 5, 224, 113, 2, 1021, 1022, 7, 130,
	2, 2, 1022, 1024, 3, 2, 2, 2, 1023, 1010, 3, 2, 2, 2, 1023, 1016, 3, 2,
	2, 2, 1024, 131, 3, 2, 2, 2, 1025, 1026, 7, 66, 2, 2, 1026, 1027, 7, 87,
	2, 2, 1027, 1028, 5, 94, 48, 2, 1028, 1029, 7, 124, 2, 2, 1029, 1030, 7,
	6, 2, 2, 1030, 1031, 7, 88, 2, 2, 1031, 1032, 7, 130, 2, 2, 1032, 133,
	3, 2, 2, 2, 1033, 1034, 7, 130, 2, 2, 1034, 135, 3, 2, 2, 2, 1035, 1036,
	5, 206, 104, 2, 1036, 1037, 7, 130, 2, 2, 1037, 137, 3, 2, 2, 2, 1038,
	1045, 5, 142, 72, 2, 1039, 1045, 5, 148, 75, 2, 1040, 1045, 5, 144, 73,
	2, 1041, 1045, 7, 43, 2, 2, 1042, 1045, 7, 76, 2, 2, 1043, 1045, 7, 25,
	2, 2, 1044, 1038, 3, 2, 2, 2, 1044, 1039, 3, 2, 2, 2, 1044, 1040, 3, 2,
	2, 2, 1044, 1041, 3, 2, 2, 2, 1044, 1042, 3, 2, 2, 2, 1044, 1043, 3, 2,
	2, 2, 1045, 139, 3, 2, 2, 2, 1046, 1048, 5, 138, 70, 2, 1047, 1046, 3,
	2, 2, 2, 1048, 1049, 3, 2, 2, 2, 1049, 1050, 3, 2, 2, 2, 1049, 1047, 3,
	2, 2, 2, 1050, 1052, 3, 2, 2, 2, 1051, 1053, 5, 206, 104, 2, 1052, 1051,
	3, 2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 141, 3, 2, 2, 2, 1054, 1055,
	9, 13, 2, 2, 1055, 143, 3, 2, 2, 2, 1056, 1057, 9, 14, 2, 2, 1057, 145,
	3, 2, 2, 2, 1058, 1059, 7, 134, 2, 2, 1059, 147, 3, 2, 2, 2, 1060, 1064,
	5, 150, 76, 2, 1061, 1064, 5, 282, 142, 2, 1062, 1064, 5, 170, 86, 2, 1063,
	1060, 3, 2, 2, 2, 1063, 1061, 3, 2, 2, 2, 1063, 1062, 3, 2, 2, 2, 1064,
	149, 3, 2, 2, 2, 1065, 1070, 5, 160, 81, 2, 1066, 1070, 5, 166, 84, 2,
	1067, 1070, 5, 354, 178, 2, 1068, 1070, 5, 242, 122, 2, 1069, 1065, 3,
	2, 2, 2, 1069, 1066, 3, 2, 2, 2, 1069, 1067, 3, 2, 2, 2, 1069, 1068, 3,
	2, 2, 2, 1070, 151, 3, 2, 2, 2, 1071, 1073, 5, 148, 75, 2, 1072, 1071,
	3, 2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1072, 3, 2, 2, 2, 1074, 1075,
	3, 2, 2, 2, 1075, 1077, 3, 2, 2, 2, 1076, 1078, 5, 206, 104, 2, 1077, 1076,
	3, 2, 2, 2, 1077, 1078, 3, 2, 2, 2, 1078, 153, 3, 2, 2, 2, 1079, 1081,
	5, 150, 76, 2, 1080, 1079, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1080,
	3, 2, 2, 2, 1082, 1083, 3, 2, 2, 2, 1083, 1085, 3, 2, 2, 2, 1084, 1086,
	5, 206, 104, 2, 1085, 1084, 3, 2, 2, 2, 1085, 1086, 3, 2, 2, 2, 1086, 155,
	3, 2, 2, 2, 1087, 1088, 9, 15, 2, 2, 1088, 157, 3, 2, 2, 2, 1089, 1090,
	9, 16, 2, 2, 1090, 159, 3, 2, 2, 2, 1091, 1093, 5, 12, 7, 2, 1092, 1091,
	3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2, 1094, 1144,
	5, 162, 82, 2, 1095, 1096, 5, 12, 7, 2, 1096, 1097, 7, 70, 2, 2, 1097,
	1098, 5, 344, 173, 2, 1098, 1144, 3, 2, 2, 2, 1099, 1144, 5, 158, 80, 2,
	1100, 1102, 5, 158, 80, 2, 1101, 1100, 3, 2, 2, 2, 1101, 1102, 3, 2, 2,
	2, 1102, 1104, 3, 2, 2, 2, 1103, 1105, 5, 156, 79, 2, 1104, 1103, 3, 2,
	2, 2, 1105, 1106, 3, 2, 2, 2, 1106, 1104, 3, 2, 2, 2, 1106, 1107, 3, 2,
	2, 2, 1107, 1144, 3, 2, 2, 2, 1108, 1110, 5, 158, 80, 2, 1109, 1108, 3,
	2, 2, 2, 1109, 1110, 3, 2, 2, 2, 1110, 1111, 3, 2, 2, 2, 1111, 1144, 7,
	20, 2, 2, 1112, 1114, 5, 158, 80, 2, 1113, 1112, 3, 2, 2, 2, 1113, 1114,
	3, 2, 2, 2, 1114, 1115, 3, 2, 2, 2, 1115, 1144, 7, 21, 2, 2, 1116, 1118,
	5, 158, 80, 2, 1117, 1116, 3, 2, 2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1119,
	3, 2, 2, 2, 1119, 1144, 7, 22, 2, 2, 1120, 1122, 5, 158, 80, 2, 1121, 1120,
	3, 2, 2, 2, 1121, 1122, 3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123, 1144,
	7, 85, 2, 2, 1124, 1144, 7, 16, 2, 2, 1125, 1127, 5, 158, 80, 2, 1126,
	1125, 3, 2, 2, 2, 1126, 1127, 3, 2, 2, 2, 1127, 1131, 3, 2, 2, 2, 1128,
	1130, 5, 156, 79, 2, 1129, 1128, 3, 2, 2, 2, 1130, 1133, 3, 2, 2, 2, 1131,
	1129, 3, 2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 1134, 3, 2, 2, 2, 1133,
	1131, 3, 2, 2, 2, 1134, 1144, 7, 47, 2, 2, 1135, 1144, 7, 41, 2, 2, 1136,
	1138, 5, 156, 79, 2, 1137, 1136, 3, 2, 2, 2, 1137, 1138, 3, 2, 2, 2, 1138,
	1139, 3, 2, 2, 2, 1139, 1144, 7, 32, 2, 2, 1140, 1144, 7, 83, 2, 2, 1141,
	1144, 7, 15, 2, 2, 1142, 1144, 5, 164, 83, 2, 1143, 1092, 3, 2, 2, 2, 1143,
	1095, 3, 2, 2, 2, 1143, 1099, 3, 2, 2, 2, 1143, 1101, 3, 2, 2, 2, 1143,
	1109, 3, 2, 2, 2, 1143, 1113, 3, 2, 2, 2, 1143, 1117, 3, 2, 2, 2, 1143,
	1121, 3, 2, 2, 2, 1143, 1124, 3, 2, 2, 2, 1143, 1126, 3, 2, 2, 2, 1143,
	1135, 3, 2, 2, 2, 1143, 1137, 3, 2, 2, 2, 1143, 1140, 3, 2, 2, 2, 1143,
	1141, 3, 2, 2, 2, 1143, 1142, 3, 2, 2, 2, 1144, 161, 3, 2, 2, 2, 1145,
	1150, 5, 280, 141, 2, 1146, 1150, 5, 168, 85, 2, 1147, 1150, 5, 146, 74,
	2, 1148, 1150, 5, 344, 173, 2, 1149, 1145, 3, 2, 2, 2, 1149, 1146, 3, 2,
	2, 2, 1149, 1147, 3, 2, 2, 2, 1149, 1148, 3, 2, 2, 2, 1150, 163, 3, 2,
	2, 2, 1151, 1152, 7, 28, 2, 2, 1152, 1155, 7, 87, 2, 2, 1153, 1156, 5,
	92, 47, 2, 1154, 1156, 7, 15, 2, 2, 1155, 1153, 3, 2, 2, 2, 1155, 1154,
	3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2, 1157, 1158, 7, 88, 2, 2, 1158, 165,
	3, 2, 2, 2, 1159, 1174, 5, 290, 146, 2, 1160, 1162, 5, 206, 104, 2, 1161,
	1160, 3, 2, 2, 2, 1161, 1162, 3, 2, 2, 2, 1162, 1164, 3, 2, 2, 2, 1163,
	1165, 5, 12, 7, 2, 1164, 1163, 3, 2, 2, 2, 1164, 1165, 3, 2, 2, 2, 1165,
	1166, 3, 2, 2, 2, 1166, 1175, 7, 134, 2, 2, 1167, 1175, 5, 344, 173, 2,
	1168, 1170, 5, 12, 7, 2, 1169, 1171, 7, 70, 2, 2, 1170, 1169, 3, 2, 2,
	2, 1170, 1171, 3, 2, 2, 2, 1171, 1172, 3, 2, 2, 2, 1172, 1173, 5, 344,
	173, 2, 1173, 1175, 3, 2, 2, 2, 1174, 1161, 3, 2, 2, 2, 1174, 1167, 3,
	2, 2, 2, 1174, 1168, 3, 2, 2, 2, 1175, 1182, 3, 2, 2, 2, 1176, 1178, 7,
	35, 2, 2, 1177, 1179, 5, 12, 7, 2, 1178, 1177, 3, 2, 2, 2, 1178, 1179,
	3, 2, 2, 2, 1179, 1180, 3, 2, 2, 2, 1180, 1182, 7, 134, 2, 2, 1181, 1159,
	3, 2, 2, 2, 1181, 1176, 3, 2, 2, 2, 1182, 167, 3, 2, 2, 2, 1183, 1184,
	7, 134, 2, 2, 1184, 169, 3, 2, 2, 2, 1185, 1186, 5, 172, 87, 2, 1186, 1191,
	7, 91, 2, 2, 1187, 1189, 5, 180, 91, 2, 1188, 1190, 7, 124, 2, 2, 1189,
	1188, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1192, 3, 2, 2, 2, 1191,
	1187, 3, 2, 2, 2, 1191, 1192, 3, 2, 2, 2, 1192, 1193, 3, 2, 2, 2, 1193,
	1194, 7, 92, 2, 2, 1194, 171, 3, 2, 2, 2, 1195, 1197, 5, 176, 89, 2, 1196,
	1198, 5, 206, 104, 2, 1197, 1196, 3, 2, 2, 2, 1197, 1198, 3, 2, 2, 2, 1198,
	1203, 3, 2, 2, 2, 1199, 1201, 5, 12, 7, 2, 1200, 1199, 3, 2, 2, 2, 1200,
	1201, 3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2, 1202, 1204, 7, 134, 2, 2, 1203,
	1200, 3, 2, 2, 2, 1203, 1204, 3, 2, 2, 2, 1204, 1206, 3, 2, 2, 2, 1205,
	1207, 5, 178, 90, 2, 1206, 1205, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207,
	173, 3, 2, 2, 2, 1208, 1210, 5, 176, 89, 2, 1209, 1211, 5, 206, 104, 2,
	1210, 1209, 3, 2, 2, 2, 1210, 1211, 3, 2, 2, 2, 1211, 1212, 3, 2, 2, 2,
	1212, 1214, 7, 134, 2, 2, 1213, 1215, 5, 178, 90, 2, 1214, 1213, 3, 2,
	2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 1216, 3, 2, 2, 2, 1216, 1217, 7, 130,
	2, 2, 1217, 175, 3, 2, 2, 2, 1218, 1220, 7, 35, 2, 2, 1219, 1221, 9, 17,
	2, 2, 1220, 1219, 3, 2, 2, 2, 1220, 1221, 3, 2, 2, 2, 1221, 177, 3, 2,
	2, 2, 1222, 1223, 7, 128, 2, 2, 1223, 1224, 5, 152, 77, 2, 1224, 179, 3,
	2, 2, 2, 1225, 1230, 5, 182, 92, 2, 1226, 1227, 7, 124, 2, 2, 1227, 1229,
	5, 182, 92, 2, 1228, 1226, 3, 2, 2, 2, 1229, 1232, 3, 2, 2, 2, 1230, 1228,
	3, 2, 2, 2, 1230, 1231, 3, 2, 2, 2, 1231, 181, 3, 2, 2, 2, 1232, 1230,
	3, 2, 2, 2, 1233, 1236, 5, 184, 93, 2, 1234, 1235, 7, 103, 2, 2, 1235,
	1237, 5, 94, 48, 2, 1236, 1234, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237,
	183, 3, 2, 2, 2, 1238, 1239, 7, 134, 2, 2, 1239, 185, 3, 2, 2, 2, 1240,
	1243, 5, 188, 95, 2, 1241, 1243, 5, 192, 97, 2, 1242, 1240, 3, 2, 2, 2,
	1242, 1241, 3, 2, 2, 2, 1243, 187, 3, 2, 2, 2, 1244, 1245, 7, 134, 2, 2,
	1245, 189, 3, 2, 2, 2, 1246, 1248, 7, 46, 2, 2, 1247, 1246, 3, 2, 2, 2,
	1247, 1248, 3, 2, 2, 2, 1248, 1249, 3, 2, 2, 2, 1249, 1252, 7, 50, 2, 2,
	1250, 1253, 7, 134, 2, 2, 1251, 1253, 5, 188, 95, 2, 1252, 1250, 3, 2,
	2, 2, 1252, 1251, 3, 2, 2, 2, 1252, 1253, 3, 2, 2, 2, 1253, 1254, 3, 2,
	2, 2, 1254, 1256, 7, 91, 2, 2, 1255, 1257, 5, 122, 62, 2, 1256, 1255, 3,
	2, 2, 2, 1256, 1257, 3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258, 1259, 7,
	92, 2, 2, 1259, 191, 3, 2, 2, 2, 1260, 1261, 7, 134, 2, 2, 1261, 193, 3,
	2, 2, 2, 1262, 1263, 7, 50, 2, 2, 1263, 1264, 7, 134, 2, 2, 1264, 1265,
	7, 103, 2, 2, 1265, 1266, 5, 196, 99, 2, 1266, 1267, 7, 130, 2, 2, 1267,
	195, 3, 2, 2, 2, 1268, 1270, 5, 12, 7, 2, 1269, 1268, 3, 2, 2, 2, 1269,
	1270, 3, 2, 2, 2, 1270, 1271, 3, 2, 2, 2, 1271, 1272, 5, 186, 94, 2, 1272,
	197, 3, 2, 2, 2, 1273, 1279, 7, 81, 2, 2, 1274, 1276, 7, 78, 2, 2, 1275,
	1274, 3, 2, 2, 2, 1275, 1276, 3, 2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277,
	1280, 5, 12, 7, 2, 1278, 1280, 7, 129, 2, 2, 1279, 1275, 3, 2, 2, 2, 1279,
	1278, 3, 2, 2, 2, 1280, 1281, 3, 2, 2, 2, 1281, 1282, 5, 8, 5, 2, 1282,
	1283, 7, 130, 2, 2, 1283, 199, 3, 2, 2, 2, 1284, 1286, 5, 206, 104, 2,
	1285, 1284, 3, 2, 2, 2, 1285, 1286, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2,
	1287, 1288, 7, 81, 2, 2, 1288, 1290, 7, 50, 2, 2, 1289, 1291, 5, 12, 7,
	2, 1290, 1289, 3, 2, 2, 2, 1290, 1291, 3, 2, 2, 2, 1291, 1292, 3, 2, 2,
	2, 1292, 1293, 5, 186, 94, 2, 1293, 1294, 7, 130, 2, 2, 1294, 201, 3, 2,
	2, 2, 1295, 1296, 7, 14, 2, 2, 1296, 1297, 7, 87, 2, 2, 1297, 1298, 7,
	6, 2, 2, 1298, 1299, 7, 88, 2, 2, 1299, 1300, 7, 130, 2, 2, 1300, 203,
	3, 2, 2, 2, 1301, 1302, 7, 38, 2, 2, 1302, 1309, 7, 6, 2, 2, 1303, 1305,
	7, 91, 2, 2, 1304, 1306, 5, 122, 62, 2, 1305, 1304, 3, 2, 2, 2, 1305, 1306,
	3, 2, 2, 2, 1306, 1307, 3, 2, 2, 2, 1307, 1310, 7, 92, 2, 2, 1308, 1310,
	5, 124, 63, 2, 1309, 1303, 3, 2, 2, 2, 1309, 1308, 3, 2, 2, 2, 1310, 205,
	3, 2, 2, 2, 1311, 1313, 5, 208, 105, 2, 1312, 1311, 3, 2, 2, 2, 1313, 1314,
	3, 2, 2, 2, 1314, 1312, 3, 2, 2, 2, 1314, 1315, 3, 2, 2, 2, 1315, 207,
	3, 2, 2, 2, 1316, 1317, 7, 89, 2, 2, 1317, 1319, 7, 89, 2, 2, 1318, 1320,
	5, 212, 107, 2, 1319, 1318, 3, 2, 2, 2, 1319, 1320, 3, 2, 2, 2, 1320, 1321,
	3, 2, 2, 2, 1321, 1322, 7, 90, 2, 2, 1322, 1325, 7, 90, 2, 2, 1323, 1325,
	5, 210, 106, 2, 1324, 1316, 3, 2, 2, 2, 1324, 1323, 3, 2, 2, 2, 1325, 209,
	3, 2, 2, 2, 1326, 1327, 7, 12, 2, 2, 1327, 1330, 7, 87, 2, 2, 1328, 1331,
	5, 248, 125, 2, 1329, 1331, 5, 94, 48, 2, 1330, 1328, 3, 2, 2, 2, 1330,
	1329, 3, 2, 2, 2, 1331, 1333, 3, 2, 2, 2, 1332, 1334, 7, 133, 2, 2, 1333,
	1332, 3, 2, 2, 2, 1333, 1334, 3, 2, 2, 2, 1334, 1335, 3, 2, 2, 2, 1335,
	1336, 7, 88, 2, 2, 1336, 211, 3, 2, 2, 2, 1337, 1342, 5, 214, 108, 2, 1338,
	1339, 7, 124, 2, 2, 1339, 1341, 5, 214, 108, 2, 1340, 1338, 3, 2, 2, 2,
	1341, 1344, 3, 2, 2, 2, 1342, 1340, 3, 2, 2, 2, 1342, 1343, 3, 2, 2, 2,
	1343, 1346, 3, 2, 2, 2, 1344, 1342, 3, 2, 2, 2, 1345, 1347, 7, 133, 2,
	2, 1346, 1345, 3, 2, 2, 2, 1346, 1347, 3, 2, 2, 2, 1347, 213, 3, 2, 2,
	2, 1348, 1349, 5, 216, 109, 2, 1349, 1350, 7, 129, 2, 2, 1350, 1352, 3,
	2, 2, 2, 1351, 1348, 3, 2, 2, 2, 1351, 1352, 3, 2, 2, 2, 1352, 1353, 3,
	2, 2, 2, 1353, 1355, 7, 134, 2, 2, 1354, 1356, 5, 218, 110, 2, 1355, 1354,
	3, 2, 2, 2, 1355, 1356, 3, 2, 2, 2, 1356, 215, 3, 2, 2, 2, 1357, 1358,
	7, 134, 2, 2, 1358, 217, 3, 2, 2, 2, 1359, 1361, 7, 87, 2, 2, 1360, 1362,
	5, 220, 111, 2, 1361, 1360, 3, 2, 2, 2, 1361, 1362, 3, 2, 2, 2, 1362, 1363,
	3, 2, 2, 2, 1363, 1364, 7, 88, 2, 2, 1364, 219, 3, 2, 2, 2, 1365, 1367,
	5, 222, 112, 2, 1366, 1365, 3, 2, 2, 2, 1367, 1368, 3, 2, 2, 2, 1368, 1366,
	3, 2, 2, 2, 1368, 1369, 3, 2, 2, 2, 1369, 221, 3, 2, 2, 2, 1370, 1371,
	7, 87, 2, 2, 1371, 1372, 5, 220, 111, 2, 1372, 1373, 7, 88, 2, 2, 1373,
	1388, 3, 2, 2, 2, 1374, 1375, 7, 89, 2, 2, 1375, 1376, 5, 220, 111, 2,
	1376, 1377, 7, 90, 2, 2, 1377, 1388, 3, 2, 2, 2, 1378, 1379, 7, 91, 2,
	2, 1379, 1380, 5, 220, 111, 2, 1380, 1381, 7, 92, 2, 2, 1381, 1388, 3,
	2, 2, 2, 1382, 1384, 10, 18, 2, 2, 1383, 1382, 3, 2, 2, 2, 1384, 1385,
	3, 2, 2, 2, 1385, 1383, 3, 2, 2, 2, 1385, 1386, 3, 2, 2, 2, 1386, 1388,
	3, 2, 2, 2, 1387, 1370, 3, 2, 2, 2, 1387, 1374, 3, 2, 2, 2, 1387, 1378,
	3, 2, 2, 2, 1387, 1383, 3, 2, 2, 2, 1388, 223, 3, 2, 2, 2, 1389, 1394,
	5, 226, 114, 2, 1390, 1391, 7, 124, 2, 2, 1391, 1393, 5, 226, 114, 2, 1392,
	1390, 3, 2, 2, 2, 1393, 1396, 3, 2, 2, 2, 1394, 1392, 3, 2, 2, 2, 1394,
	1395, 3, 2, 2, 2, 1395, 225, 3, 2, 2, 2, 1396, 1394, 3, 2, 2, 2, 1397,
	1399, 5, 228, 115, 2, 1398, 1400, 5, 270, 136, 2, 1399, 1398, 3, 2, 2,
	2, 1399, 1400, 3, 2, 2, 2, 1400, 227, 3, 2, 2, 2, 1401, 1407, 5, 230, 116,
	2, 1402, 1403, 5, 232, 117, 2, 1403, 1404, 5, 234, 118, 2, 1404, 1405,
	5, 236, 119, 2, 1405, 1407, 3, 2, 2, 2, 1406, 1401, 3, 2, 2, 2, 1406, 1402,
	3, 2, 2, 2, 1407, 229, 3, 2, 2, 2, 1408, 1410, 5, 238, 120, 2, 1409, 1411,
	7, 24, 2, 2, 1410, 1409, 3, 2, 2, 2, 1410, 1411, 3, 2, 2, 2, 1411, 1413,
	3, 2, 2, 2, 1412, 1408, 3, 2, 2, 2, 1413, 1416, 3, 2, 2, 2, 1414, 1412,
	3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415, 1417, 3, 2, 2, 2, 1416, 1414,
	3, 2, 2, 2, 1417, 1418, 5, 232, 117, 2, 1418, 231, 3, 2, 2, 2, 1419, 1420,
	8, 117, 1, 2, 1420, 1422, 5, 246, 124, 2, 1421, 1423, 5, 206, 104, 2, 1422,
	1421, 3, 2, 2, 2, 1422, 1423, 3, 2, 2, 2, 1423, 1429, 3, 2, 2, 2, 1424,
	1425, 7, 87, 2, 2, 1425, 1426, 5, 230, 116, 2, 1426, 1427, 7, 88, 2, 2,
	1427, 1429, 3, 2, 2, 2, 1428, 1419, 3, 2, 2, 2, 1428, 1424, 3, 2, 2, 2,
	1429, 1444, 3, 2, 2, 2, 1430, 1440, 12, 4, 2, 2, 1431, 1441, 5, 234, 118,
	2, 1432, 1434, 7, 89, 2, 2, 1433, 1435, 5, 94, 48, 2, 1434, 1433, 3, 2,
	2, 2, 1434, 1435, 3, 2, 2, 2, 1435, 1436, 3, 2, 2, 2, 1436, 1438, 7, 90,
	2, 2, 1437, 1439, 5, 206, 104, 2, 1438, 1437, 3, 2, 2, 2, 1438, 1439, 3,
	2, 2, 2, 1439, 1441, 3, 2, 2, 2, 1440, 1431, 3, 2, 2, 2, 1440, 1432, 3,
	2, 2, 2, 1441, 1443, 3, 2, 2, 2, 1442, 1430, 3, 2, 2, 2, 1443, 1446, 3,
	2, 2, 2, 1444, 1442, 3, 2, 2, 2, 1444, 1445, 3, 2, 2, 2, 1445, 233, 3,
	2, 2, 2, 1446, 1444, 3, 2, 2, 2, 1447, 1449, 7, 87, 2, 2, 1448, 1450, 5,
	260, 131, 2, 1449, 1448, 3, 2, 2, 2, 1449, 1450, 3, 2, 2, 2, 1450, 1451,
	3, 2, 2, 2, 1451, 1453, 7, 88, 2, 2, 1452, 1454, 5, 240, 121, 2, 1453,
	1452, 3, 2, 2, 2, 1453, 1454, 3, 2, 2, 2, 1454, 1456, 3, 2, 2, 2, 1455,
	1457, 5, 244, 123, 2, 1456, 1455, 3, 2, 2, 2, 1456, 1457, 3, 2, 2, 2, 1457,
	1459, 3, 2, 2, 2, 1458, 1460, 5, 372, 187, 2, 1459, 1458, 3, 2, 2, 2, 1459,
	1460, 3, 2, 2, 2, 1460, 1462, 3, 2, 2, 2, 1461, 1463, 5, 206, 104, 2, 1462,
	1461, 3, 2, 2, 2, 1462, 1463, 3, 2, 2, 2, 1463, 235, 3, 2, 2, 2, 1464,
	1465, 7, 126, 2, 2, 1465, 1467, 5, 154, 78, 2, 1466, 1468, 5, 250, 126,
	2, 1467, 1466, 3, 2, 2, 2, 1467, 1468, 3, 2, 2, 2, 1468, 237, 3, 2, 2,
	2, 1469, 1471, 9, 19, 2, 2, 1470, 1472, 5, 206, 104, 2, 1471, 1470, 3,
	2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472, 1484, 3, 2, 2, 2, 1473, 1475, 5,
	12, 7, 2, 1474, 1473, 3, 2, 2, 2, 1474, 1475, 3, 2, 2, 2, 1475, 1476, 3,
	2, 2, 2, 1476, 1478, 7, 95, 2, 2, 1477, 1479, 5, 206, 104, 2, 1478, 1477,
	3, 2, 2, 2, 1478, 1479, 3, 2, 2, 2, 1479, 1481, 3, 2, 2, 2, 1480, 1482,
	5, 240, 121, 2, 1481, 1480, 3, 2, 2, 2, 1481, 1482, 3, 2, 2, 2, 1482, 1484,
	3, 2, 2, 2, 1483, 1469, 3, 2, 2, 2, 1483, 1474, 3, 2, 2, 2, 1484, 239,
	3, 2, 2, 2, 1485, 1487, 5, 242, 122, 2, 1486, 1485, 3, 2, 2, 2, 1487, 1488,
	3, 2, 2, 2, 1488, 1486, 3, 2, 2, 2, 1488, 1489, 3, 2, 2, 2, 1489, 241,
	3, 2, 2, 2, 1490, 1491, 9, 20, 2, 2, 1491, 243, 3, 2, 2, 2, 1492, 1493,
	9, 19, 2, 2, 1493, 245, 3, 2, 2, 2, 1494, 1496, 7, 133, 2, 2, 1495, 1494,
	3, 2, 2, 2, 1495, 1496, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 1498,
	5, 6, 4, 2, 1498, 247, 3, 2, 2, 2, 1499, 1501, 5, 152, 77, 2, 1500, 1502,
	5, 250, 126, 2, 1501, 1500, 3, 2, 2, 2, 1501, 1502, 3, 2, 2, 2, 1502, 249,
	3, 2, 2, 2, 1503, 1512, 5, 252, 127, 2, 1504, 1506, 5, 254, 128, 2, 1505,
	1504, 3, 2, 2, 2, 1505, 1506, 3, 2, 2, 2, 1506, 1507, 3, 2, 2, 2, 1507,
	1508, 5, 234, 118, 2, 1508, 1509, 5, 236, 119, 2, 1509, 1512, 3, 2, 2,
	2, 1510, 1512, 5, 256, 129, 2, 1511, 1503, 3, 2, 2, 2, 1511, 1505, 3, 2,
	2, 2, 1511, 1510, 3, 2, 2, 2, 1512, 251, 3, 2, 2, 2, 1513, 1523, 5, 254,
	128, 2, 1514, 1516, 5, 238, 120, 2, 1515, 1514, 3, 2, 2, 2, 1516, 1517,
	3, 2, 2, 2, 1517, 1515, 3, 2, 2, 2, 1517, 1518, 3, 2, 2, 2, 1518, 1520,
	3, 2, 2, 2, 1519, 1521, 5, 254, 128, 2, 1520, 1519, 3, 2, 2, 2, 1520, 1521,
	3, 2, 2, 2, 1521, 1523, 3, 2, 2, 2, 1522, 1513, 3, 2, 2, 2, 1522, 1515,
	3, 2, 2, 2, 1523, 253, 3, 2, 2, 2, 1524, 1525, 8, 128, 1, 2, 1525, 1539,
	5, 234, 118, 2, 1526, 1528, 7, 89, 2, 2, 1527, 1529, 5, 94, 48, 2, 1528,
	1527, 3, 2, 2, 2, 1528, 1529, 3, 2, 2, 2, 1529, 1530, 3, 2, 2, 2, 1530,
	1532, 7, 90, 2, 2, 1531, 1533, 5, 206, 104, 2, 1532, 1531, 3, 2, 2, 2,
	1532, 1533, 3, 2, 2, 2, 1533, 1539, 3, 2, 2, 2, 1534, 1535, 7, 87, 2, 2,
	1535, 1536, 5, 252, 127, 2, 1536, 1537, 7, 88, 2, 2, 1537, 1539, 3, 2,
	2, 2, 1538, 1524, 3, 2, 2, 2, 1538, 1526, 3, 2, 2, 2, 1538, 1534, 3, 2,
	2, 2, 1539, 1555, 3, 2, 2, 2, 1540, 1551, 12, 6, 2, 2, 1541, 1552, 5, 234,
	118, 2, 1542, 1543, 5, 254, 128, 2, 1543, 1545, 7, 89, 2, 2, 1544, 1546,
	5, 94, 48, 2, 1545, 1544, 3, 2, 2, 2, 1545, 1546, 3, 2, 2, 2, 1546, 1547,
	3, 2, 2, 2, 1547, 1549, 7, 90, 2, 2, 1548, 1550, 5, 206, 104, 2, 1549,
	1548, 3, 2, 2, 2, 1549, 1550, 3, 2, 2, 2, 1550, 1552, 3, 2, 2, 2, 1551,
	1541, 3, 2, 2, 2, 1551, 1542, 3, 2, 2, 2, 1552, 1554, 3, 2, 2, 2, 1553,
	1540, 3, 2, 2, 2, 1554, 1557, 3, 2, 2, 2, 1555, 1553, 3, 2, 2, 2, 1555,
	1556, 3, 2, 2, 2, 1556, 255, 3, 2, 2, 2, 1557, 1555, 3, 2, 2, 2, 1558,
	1560, 5, 238, 120, 2, 1559, 1558, 3, 2, 2, 2, 1560, 1563, 3, 2, 2, 2, 1561,
	1559, 3, 2, 2, 2, 1561, 1562, 3, 2, 2, 2, 1562, 1564, 3, 2, 2, 2, 1563,
	1561, 3, 2, 2, 2, 1564, 1565, 5, 258, 130, 2, 1565, 257, 3, 2, 2, 2, 1566,
	1567, 8, 130, 1, 2, 1567, 1568, 7, 133, 2, 2, 1568, 1583, 3, 2, 2, 2, 1569,
	1579, 12, 4, 2, 2, 1570, 1580, 5, 234, 118, 2, 1571, 1573, 7, 89, 2, 2,
	1572, 1574, 5, 94, 48, 2, 1573, 1572, 3, 2, 2, 2, 1573, 1574, 3, 2, 2,
	2, 1574, 1575, 3, 2, 2, 2, 1575, 1577, 7, 90, 2, 2, 1576, 1578, 5, 206,
	104, 2, 1577, 1576, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578, 1580, 3,
	2, 2, 2, 1579, 1570, 3, 2, 2, 2, 1579, 1571, 3, 2, 2, 2, 1580, 1582, 3,
	2, 2, 2, 1581, 1569, 3, 2, 2, 2, 1582, 1585, 3, 2, 2, 2, 1583, 1581, 3,
	2, 2, 2, 1583, 1584, 3, 2, 2, 2, 1584, 259, 3, 2, 2, 2, 1585, 1583, 3,
	2, 2, 2, 1586, 1591, 5, 262, 132, 2, 1587, 1589, 7, 124, 2, 2, 1588, 1587,
	3, 2, 2, 2, 1588, 1589, 3, 2, 2, 2, 1589, 1590, 3, 2, 2, 2, 1590, 1592,
	7, 133, 2, 2, 1591, 1588, 3, 2, 2, 2, 1591, 1592, 3, 2, 2, 2, 1592, 261,
	3, 2, 2, 2, 1593, 1598, 5, 264, 133, 2, 1594, 1595, 7, 124, 2, 2, 1595,
	1597, 5, 264, 133, 2, 1596, 1594, 3, 2, 2, 2, 1597, 1600, 3, 2, 2, 2, 1598,
	1596, 3, 2, 2, 2, 1598, 1599, 3, 2, 2, 2, 1599, 263, 3, 2, 2, 2, 1600,
	1598, 3, 2, 2, 2, 1601, 1603, 5, 206, 104, 2, 1602, 1601, 3, 2, 2, 2, 1602,
	1603, 3, 2, 2, 2, 1603, 1604, 3, 2, 2, 2, 1604, 1609, 5, 140, 71, 2, 1605,
	1610, 5, 228, 115, 2, 1606, 1608, 5, 250, 126, 2, 1607, 1606, 3, 2, 2,
	2, 1607, 1608, 3, 2, 2, 2, 1608, 1610, 3, 2, 2, 2, 1609, 1605, 3, 2, 2,
	2, 1609, 1607, 3, 2, 2, 2, 1610, 1613, 3, 2, 2, 2, 1611, 1612, 7, 103,
	2, 2, 1612, 1614, 5, 274, 138, 2, 1613, 1611, 3, 2, 2, 2, 1613, 1614, 3,
	2, 2, 2, 1614, 265, 3, 2, 2, 2, 1615, 1617, 5, 206, 104, 2, 1616, 1615,
	3, 2, 2, 2, 1616, 1617, 3, 2, 2, 2, 1617, 1619, 3, 2, 2, 2, 1618, 1620,
	5, 140, 71, 2, 1619, 1618, 3, 2, 2, 2, 1619, 1620, 3, 2, 2, 2, 1620, 1621,
	3, 2, 2, 2, 1621, 1623, 5, 228, 115, 2, 1622, 1624, 5, 300, 151, 2, 1623,
	1622, 3, 2, 2, 2, 1623, 1624, 3, 2, 2, 2, 1624, 1625, 3, 2, 2, 2, 1625,
	1626, 5, 268, 135, 2, 1626, 267, 3, 2, 2, 2, 1627, 1629, 5, 324, 163, 2,
	1628, 1627, 3, 2, 2, 2, 1628, 1629, 3, 2, 2, 2, 1629, 1630, 3, 2, 2, 2,
	1630, 1636, 5, 102, 52, 2, 1631, 1636, 5, 362, 182, 2, 1632, 1633, 7, 103,
	2, 2, 1633, 1634, 9, 21, 2, 2, 1634, 1636, 7, 130, 2, 2, 1635, 1628, 3,
	2, 2, 2, 1635, 1631, 3, 2, 2, 2, 1635, 1632, 3, 2, 2, 2, 1636, 269, 3,
	2, 2, 2, 1637, 1643, 5, 272, 137, 2, 1638, 1639, 7, 87, 2, 2, 1639, 1640,
	5, 36, 19, 2, 1640, 1641, 7, 88, 2, 2, 1641, 1643, 3, 2, 2, 2, 1642, 1637,
	3, 2, 2, 2, 1642, 1638, 3, 2, 2, 2, 1643, 271, 3, 2, 2, 2, 1644, 1645,
	7, 103, 2, 2, 1645, 1648, 5, 274, 138, 2, 1646, 1648, 5, 278, 140, 2, 1647,
	1644, 3, 2, 2, 2, 1647, 1646, 3, 2, 2, 2, 1648, 273, 3, 2, 2, 2, 1649,
	1652, 5, 88, 45, 2, 1650, 1652, 5, 278, 140, 2, 1651, 1649, 3, 2, 2, 2,
	1651, 1650, 3, 2, 2, 2, 1652, 275, 3, 2, 2, 2, 1653, 1655, 5, 274, 138,
	2, 1654, 1656, 7, 133, 2, 2, 1655, 1654, 3, 2, 2, 2, 1655, 1656, 3, 2,
	2, 2, 1656, 1664, 3, 2, 2, 2, 1657, 1658, 7, 124, 2, 2, 1658, 1660, 5,
	274, 138, 2, 1659, 1661, 7, 133, 2, 2, 1660, 1659, 3, 2, 2, 2, 1660, 1661,
	3, 2, 2, 2, 1661, 1663, 3, 2, 2, 2, 1662, 1657, 3, 2, 2, 2, 1663, 1666,
	3, 2, 2, 2, 1664, 1662, 3, 2, 2, 2, 1664, 1665, 3, 2, 2, 2, 1665, 277,
	3, 2, 2, 2, 1666, 1664, 3, 2, 2, 2, 1667, 1672, 7, 91, 2, 2, 1668, 1670,
	5, 276, 139, 2, 1669, 1671, 7, 124, 2, 2, 1670, 1669, 3, 2, 2, 2, 1670,
	1671, 3, 2, 2, 2, 1671, 1673, 3, 2, 2, 2, 1672, 1668, 3, 2, 2, 2, 1672,
	1673, 3, 2, 2, 2, 1673, 1674, 3, 2, 2, 2, 1674, 1675, 7, 92, 2, 2, 1675,
	279, 3, 2, 2, 2, 1676, 1679, 7, 134, 2, 2, 1677, 1679, 5, 344, 173, 2,
	1678, 1676, 3, 2, 2, 2, 1678, 1677, 3, 2, 2, 2, 1679, 281, 3, 2, 2, 2,
	1680, 1681, 5, 284, 143, 2, 1681, 1683, 7, 91, 2, 2, 1682, 1684, 5, 292,
	147, 2, 1683, 1682, 3, 2, 2, 2, 1683, 1684, 3, 2, 2, 2, 1684, 1685, 3,
	2, 2, 2, 1685, 1686, 7, 92, 2, 2, 1686, 283, 3, 2, 2, 2, 1687, 1689, 5,
	290, 146, 2, 1688, 1690, 5, 206, 104, 2, 1689, 1688, 3, 2, 2, 2, 1689,
	1690, 3, 2, 2, 2, 1690, 1695, 3, 2, 2, 2, 1691, 1693, 5, 286, 144, 2, 1692,
	1694, 5, 288, 145, 2, 1693, 1692, 3, 2, 2, 2, 1693, 1694, 3, 2, 2, 2, 1694,
	1696, 3, 2, 2, 2, 1695, 1691, 3, 2, 2, 2, 1695, 1696, 3, 2, 2, 2, 1696,
	1698, 3, 2, 2, 2, 1697, 1699, 5, 306, 154, 2, 1698, 1697, 3, 2, 2, 2, 1698,
	1699, 3, 2, 2, 2, 1699, 1711, 3, 2, 2, 2, 1700, 1702, 7, 79, 2, 2, 1701,
	1703, 5, 206, 104, 2, 1702, 1701, 3, 2, 2, 2, 1702, 1703, 3, 2, 2, 2, 1703,
	1708, 3, 2, 2, 2, 1704, 1706, 5, 286, 144, 2, 1705, 1707, 5, 288, 145,
	2, 1706, 1705, 3, 2, 2, 2, 1706, 1707, 3, 2, 2, 2, 1707, 1709, 3, 2, 2,
	2, 1708, 1704, 3, 2, 2, 2, 1708, 1709, 3, 2, 2, 2, 1709, 1711, 3, 2, 2,
	2, 1710, 1687, 3, 2, 2, 2, 1710, 1700, 3, 2, 2, 2, 1711, 285, 3, 2, 2,
	2, 1712, 1714, 5, 12, 7, 2, 1713, 1712, 3, 2, 2, 2, 1713, 1714, 3, 2, 2,
	2, 1714, 1715, 3, 2, 2, 2, 1715, 1716, 5, 280, 141, 2, 1716, 287, 3, 2,
	2, 2, 1717, 1718, 7, 40, 2, 2, 1718, 289, 3, 2, 2, 2, 1719, 1720, 9, 17,
	2, 2, 1720, 291, 3, 2, 2, 2, 1721, 1726, 5, 294, 148, 2, 1722, 1723, 5,
	316, 159, 2, 1723, 1724, 7, 128, 2, 2, 1724, 1726, 3, 2, 2, 2, 1725, 1721,
	3, 2, 2, 2, 1725, 1722, 3, 2, 2, 2, 1726, 1727, 3, 2, 2, 2, 1727, 1725,
	3, 2, 2, 2, 1727, 1728, 3, 2, 2, 2, 1728, 293, 3, 2, 2, 2, 1729, 1731,
	5, 206, 104, 2, 1730, 1729, 3, 2, 2, 2, 1730, 1731, 3, 2, 2, 2, 1731, 1733,
	3, 2, 2, 2, 1732, 1734, 5, 140, 71, 2, 1733, 1732, 3, 2, 2, 2, 1733, 1734,
	3, 2, 2, 2, 1734, 1736, 3, 2, 2, 2, 1735, 1737, 5, 296, 149, 2, 1736, 1735,
	3, 2, 2, 2, 1736, 1737, 3, 2, 2, 2, 1737, 1738, 3, 2, 2, 2, 1738, 1746,
	7, 130, 2, 2, 1739, 1746, 5, 266, 134, 2, 1740, 1746, 5, 198, 100, 2, 1741,
	1746, 5, 132, 67, 2, 1742, 1746, 5, 336, 169, 2, 1743, 1746, 5, 128, 65,
	2, 1744, 1746, 5, 134, 68, 2, 1745, 1730, 3, 2, 2, 2, 1745, 1739, 3, 2,
	2, 2, 1745, 1740, 3, 2, 2, 2, 1745, 1741, 3, 2, 2, 2, 1745, 1742, 3, 2,
	2, 2, 1745, 1743, 3, 2, 2, 2, 1745, 1744, 3, 2, 2, 2, 1746, 295, 3, 2,
	2, 2, 1747, 1752, 5, 298, 150, 2, 1748, 1749, 7, 124, 2, 2, 1749, 1751,
	5, 298, 150, 2, 1750, 1748, 3, 2, 2, 2, 1751, 1754, 3, 2, 2, 2, 1752, 1750,
	3, 2, 2, 2, 1752, 1753, 3, 2, 2, 2, 1753, 297, 3, 2, 2, 2, 1754, 1752,
	3, 2, 2, 2, 1755, 1765, 5, 228, 115, 2, 1756, 1758, 5, 300, 151, 2, 1757,
	1756, 3, 2, 2, 2, 1757, 1758, 3, 2, 2, 2, 1758, 1760, 3, 2, 2, 2, 1759,
	1761, 5, 304, 153, 2, 1760, 1759, 3, 2, 2, 2, 1760, 1761, 3, 2, 2, 2, 1761,
	1766, 3, 2, 2, 2, 1762, 1764, 5, 272, 137, 2, 1763, 1762, 3, 2, 2, 2, 1763,
	1764, 3, 2, 2, 2, 1764, 1766, 3, 2, 2, 2, 1765, 1757, 3, 2, 2, 2, 1765,
	1763, 3, 2, 2, 2, 1766, 1776, 3, 2, 2, 2, 1767, 1769, 7, 134, 2, 2, 1768,
	1767, 3, 2, 2, 2, 1768, 1769, 3, 2, 2, 2, 1769, 1771, 3, 2, 2, 2, 1770,
	1772, 5, 206, 104, 2, 1771, 1770, 3, 2, 2, 2, 1771, 1772, 3, 2, 2, 2, 1772,
	1773, 3, 2, 2, 2, 1773, 1774, 7, 128, 2, 2, 1774, 1776, 5, 94, 48, 2, 1775,
	1755, 3, 2, 2, 2, 1775, 1768, 3, 2, 2, 2, 1776, 299, 3, 2, 2, 2, 1777,
	1779, 5, 302, 152, 2, 1778, 1777, 3, 2, 2, 2, 1779, 1780, 3, 2, 2, 2, 1780,
	1778, 3, 2, 2, 2, 1780, 1781, 3, 2, 2, 2, 1781, 301, 3, 2, 2, 2, 1782,
	1783, 9, 22, 2, 2, 1783, 303, 3, 2, 2, 2, 1784, 1785, 7, 103, 2, 2, 1785,
	1786, 7, 136, 2, 2, 1786, 1787, 8, 153, 1, 2, 1787, 305, 3, 2, 2, 2, 1788,
	1789, 7, 128, 2, 2, 1789, 1790, 5, 308, 155, 2, 1790, 307, 3, 2, 2, 2,
	1791, 1793, 5, 310, 156, 2, 1792, 1794, 7, 133, 2, 2, 1793, 1792, 3, 2,
	2, 2, 1793, 1794, 3, 2, 2, 2, 1794, 1802, 3, 2, 2, 2, 1795, 1796, 7, 124,
	2, 2, 1796, 1798, 5, 310, 156, 2, 1797, 1799, 7, 133, 2, 2, 1798, 1797,
	3, 2, 2, 2, 1798, 1799, 3, 2, 2, 2, 1799, 1801, 3, 2, 2, 2, 1800, 1795,
	3, 2, 2, 2, 1801, 1804, 3, 2, 2, 2, 1802, 1800, 3, 2, 2, 2, 1802, 1803,
	3, 2, 2, 2, 1803, 309, 3, 2, 2, 2, 1804, 1802, 3, 2, 2, 2, 1805, 1807,
	5, 206, 104, 2, 1806, 1805, 3, 2, 2, 2, 1806, 1807, 3, 2, 2, 2, 1807, 1820,
	3, 2, 2, 2, 1808, 1821, 5, 314, 158, 2, 1809, 1811, 7, 82, 2, 2, 1810,
	1812, 5, 316, 159, 2, 1811, 1810, 3, 2, 2, 2, 1811, 1812, 3, 2, 2, 2, 1812,
	1813, 3, 2, 2, 2, 1813, 1821, 5, 314, 158, 2, 1814, 1816, 5, 316, 159,
	2, 1815, 1817, 7, 82, 2, 2, 1816, 1815, 3, 2, 2, 2, 1816, 1817, 3, 2, 2,
	2, 1817, 1818, 3, 2, 2, 2, 1818, 1819, 5, 314, 158, 2, 1819, 1821, 3, 2,
	2, 2, 1820, 1808, 3, 2, 2, 2, 1820, 1809, 3, 2, 2, 2, 1820, 1814, 3, 2,
	2, 2, 1821, 311, 3, 2, 2, 2, 1822, 1824, 5, 12, 7, 2, 1823, 1822, 3, 2,
	2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1828, 5, 280,
	141, 2, 1826, 1828, 5, 164, 83, 2, 1827, 1823, 3, 2, 2, 2, 1827, 1826,
	3, 2, 2, 2, 1828, 313, 3, 2, 2, 2, 1829, 1830, 5, 312, 157, 2, 1830, 315,
	3, 2, 2, 2, 1831, 1832, 9, 23, 2, 2, 1832, 317, 3, 2, 2, 2, 1833, 1834,
	7, 54, 2, 2, 1834, 1835, 5, 320, 161, 2, 1835, 319, 3, 2, 2, 2, 1836, 1838,
	5, 152, 77, 2, 1837, 1839, 5, 322, 162, 2, 1838, 1837, 3, 2, 2, 2, 1838,
	1839, 3, 2, 2, 2, 1839, 321, 3, 2, 2, 2, 1840, 1842, 5, 238, 120, 2, 1841,
	1843, 5, 322, 162, 2, 1842, 1841, 3, 2, 2, 2, 1842, 1843, 3, 2, 2, 2, 1843,
	323, 3, 2, 2, 2, 1844, 1845, 7, 128, 2, 2, 1845, 1846, 5, 326, 164, 2,
	1846, 325, 3, 2, 2, 2, 1847, 1849, 5, 328, 165, 2, 1848, 1850, 7, 133,
	2, 2, 1849, 1848, 3, 2, 2, 2, 1849, 1850, 3, 2, 2, 2, 1850, 1858, 3, 2,
	2, 2, 1851, 1852, 7, 124, 2, 2, 1852, 1854, 5, 328, 165, 2, 1853, 1855,
	7, 133, 2, 2, 1854, 1853, 3, 2, 2, 2, 1854, 1855, 3, 2, 2, 2, 1855, 1857,
	3, 2, 2, 2, 1856, 1851, 3, 2, 2, 2, 1857, 1860, 3, 2, 2, 2, 1858, 1856,
	3, 2, 2, 2, 1858, 1859, 3, 2, 2, 2, 1859, 327, 3, 2, 2, 2, 1860, 1858,
	3, 2, 2, 2, 1861, 1868, 5, 330, 166, 2, 1862, 1864, 7, 87, 2, 2, 1863,
	1865, 5, 36, 19, 2, 1864, 1863, 3, 2, 2, 2, 1864, 1865, 3, 2, 2, 2, 1865,
	1866, 3, 2, 2, 2, 1866, 1869, 7, 88, 2, 2, 1867, 1869, 5, 278, 140, 2,
	1868, 1862, 3, 2, 2, 2, 1868, 1867, 3, 2, 2, 2, 1869, 329, 3, 2, 2, 2,
	1870, 1873, 5, 312, 157, 2, 1871, 1873, 7, 134, 2, 2, 1872, 1870, 3, 2,
	2, 2, 1872, 1871, 3, 2, 2, 2, 1873, 331, 3, 2, 2, 2, 1874, 1875, 7, 54,
	2, 2, 1875, 1876, 5, 380, 191, 2, 1876, 333, 3, 2, 2, 2, 1877, 1881, 7,
	54, 2, 2, 1878, 1879, 7, 6, 2, 2, 1879, 1882, 7, 134, 2, 2, 1880, 1882,
	7, 142, 2, 2, 1881, 1878, 3, 2, 2, 2, 1881, 1880, 3, 2, 2, 2, 1882, 335,
	3, 2, 2, 2, 1883, 1884, 7, 70, 2, 2, 1884, 1885, 7, 104, 2, 2, 1885, 1886,
	5, 338, 170, 2, 1886, 1887, 7, 105, 2, 2, 1887, 1888, 5, 124, 63, 2, 1888,
	337, 3, 2, 2, 2, 1889, 1894, 5, 340, 171, 2, 1890, 1891, 7, 124, 2, 2,
	1891, 1893, 5, 340, 171, 2, 1892, 1890, 3, 2, 2, 2, 1893, 1896, 3, 2, 2,
	2, 1894, 1892, 3, 2, 2, 2, 1894, 1895, 3, 2, 2, 2, 1895, 339, 3, 2, 2,
	2, 1896, 1894, 3, 2, 2, 2, 1897, 1900, 5, 342, 172, 2, 1898, 1900, 5, 264,
	133, 2, 1899, 1897, 3, 2, 2, 2, 1899, 1898, 3, 2, 2, 2, 1900, 341, 3, 2,
	2, 2, 1901, 1902, 7, 70, 2, 2, 1902, 1903, 7, 104, 2, 2, 1903, 1904, 5,
	338, 170, 2, 1904, 1905, 7, 105, 2, 2, 1905, 1907, 3, 2, 2, 2, 1906, 1901,
	3, 2, 2, 2, 1906, 1907, 3, 2, 2, 2, 1907, 1908, 3, 2, 2, 2, 1908, 1911,
	7, 23, 2, 2, 1909, 1911, 7, 78, 2, 2, 1910, 1906, 3, 2, 2, 2, 1910, 1909,
	3, 2, 2, 2, 1911, 1923, 3, 2, 2, 2, 1912, 1914, 7, 133, 2, 2, 1913, 1912,
	3, 2, 2, 2, 1913, 1914, 3, 2, 2, 2, 1914, 1916, 3, 2, 2, 2, 1915, 1917,
	7, 134, 2, 2, 1916, 1915, 3, 2, 2, 2, 1916, 1917, 3, 2, 2, 2, 1917, 1924,
	3, 2, 2, 2, 1918, 1920, 7, 134, 2, 2, 1919, 1918, 3, 2, 2, 2, 1919, 1920,
	3, 2, 2, 2, 1920, 1921, 3, 2, 2, 2, 1921, 1922, 7, 103, 2, 2, 1922, 1924,
	5, 248, 125, 2, 1923, 1913, 3, 2, 2, 2, 1923, 1919, 3, 2, 2, 2, 1924, 343,
	3, 2, 2, 2, 1925, 1926, 5, 348, 175, 2, 1926, 1928, 7, 104, 2, 2, 1927,
	1929, 5, 350, 176, 2, 1928, 1927, 3, 2, 2, 2, 1928, 1929, 3, 2, 2, 2, 1929,
	1930, 3, 2, 2, 2, 1930, 1931, 7, 105, 2, 2, 1931, 345, 3, 2, 2, 2, 1932,
	1944, 5, 344, 173, 2, 1933, 1936, 5, 332, 167, 2, 1934, 1936, 5, 334, 168,
	2, 1935, 1933, 3, 2, 2, 2, 1935, 1934, 3, 2, 2, 2, 1936, 1937, 3, 2, 2,
	2, 1937, 1939, 7, 104, 2, 2, 1938, 1940, 5, 350, 176, 2, 1939, 1938, 3,
	2, 2, 2, 1939, 1940, 3, 2, 2, 2, 1940, 1941, 3, 2, 2, 2, 1941, 1942, 7,
	105, 2, 2, 1942, 1944, 3, 2, 2, 2, 1943, 1932, 3, 2, 2, 2, 1943, 1935,
	3, 2, 2, 2, 1944, 347, 3, 2, 2, 2, 1945, 1946, 7, 134, 2, 2, 1946, 349,
	3, 2, 2, 2, 1947, 1949, 5, 352, 177, 2, 1948, 1950, 7, 133, 2, 2, 1949,
	1948, 3, 2, 2, 2, 1949, 1950, 3, 2, 2, 2, 1950, 1958, 3, 2, 2, 2, 1951,
	1952, 7, 124, 2, 2, 1952, 1954, 5, 352, 177, 2, 1953, 1955, 7, 133, 2,
	2, 1954, 1953, 3, 2, 2, 2, 1954, 1955, 3, 2, 2, 2, 1955, 1957, 3, 2, 2,
	2, 1956, 1951, 3, 2, 2, 2, 1957, 1960, 3, 2, 2, 2, 1958, 1956, 3, 2, 2,
	2, 1958, 1959, 3, 2, 2, 2, 1959, 351, 3, 2, 2, 2, 1960, 1958, 3, 2, 2,
	2, 1961, 1965, 5, 248, 125, 2, 1962, 1965, 5, 94, 48, 2, 1963, 1965, 5,
	6, 4, 2, 1964, 1961, 3, 2, 2, 2, 1964, 1962, 3, 2, 2, 2, 1964, 1963, 3,
	2, 2, 2, 1965, 353, 3, 2, 2, 2, 1966, 1967, 7, 78, 2, 2, 1967, 1973, 5,
	12, 7, 2, 1968, 1974, 7, 134, 2, 2, 1969, 1971, 7, 70, 2, 2, 1970, 1969,
	3, 2, 2, 2, 1970, 1971, 3, 2, 2, 2, 1971, 1972, 3, 2, 2, 2, 1972, 1974,
	5, 344, 173, 2, 1973, 1968, 3, 2, 2, 2, 1973, 1970, 3, 2, 2, 2, 1974, 355,
	3, 2, 2, 2, 1975, 1977, 7, 38, 2, 2, 1976, 1975, 3, 2, 2, 2, 1976, 1977,
	3, 2, 2, 2, 1977, 1978, 3, 2, 2, 2, 1978, 1979, 7, 70, 2, 2, 1979, 1980,
	5, 124, 63, 2, 1980, 357, 3, 2, 2, 2, 1981, 1982, 7, 70, 2, 2, 1982, 1983,
	7, 104, 2, 2, 1983, 1984, 7, 105, 2, 2, 1984, 1985, 5, 124, 63, 2, 1985,
	359, 3, 2, 2, 2, 1986, 1987, 7, 75, 2, 2, 1987, 1988, 5, 102, 52, 2, 1988,
	1989, 5, 364, 183, 2, 1989, 361, 3, 2, 2, 2, 1990, 1992, 7, 75, 2, 2, 1991,
	1993, 5, 324, 163, 2, 1992, 1991, 3, 2, 2, 2, 1992, 1993, 3, 2, 2, 2, 1993,
	1994, 3, 2, 2, 2, 1994, 1995, 5, 102, 52, 2, 1995, 1996, 5, 364, 183, 2,
	1996, 363, 3, 2, 2, 2, 1997, 1999, 5, 366, 184, 2, 1998, 1997, 3, 2, 2,
	2, 1999, 2000, 3, 2, 2, 2, 2000, 1998, 3, 2, 2, 2, 2000, 2001, 3, 2, 2,
	2, 2001, 365, 3, 2, 2, 2, 2002, 2003, 7, 19, 2, 2, 2003, 2004, 7, 87, 2,
	2, 2004, 2005, 5, 368, 185, 2, 2005, 2006, 7, 88, 2, 2, 2006, 2007, 5,
	102, 52, 2, 2007, 367, 3, 2, 2, 2, 2008, 2010, 5, 206, 104, 2, 2009, 2008,
	3, 2, 2, 2, 2009, 2010, 3, 2, 2, 2, 2010, 2011, 3, 2, 2, 2, 2011, 2014,
	5, 152, 77, 2, 2012, 2015, 5, 228, 115, 2, 2013, 2015, 5, 250, 126, 2,
	2014, 2012, 3, 2, 2, 2, 2014, 2013, 3, 2, 2, 2, 2014, 2015, 3, 2, 2, 2,
	2015, 2018, 3, 2, 2, 2, 2016, 2018, 7, 133, 2, 2, 2017, 2009, 3, 2, 2,
	2, 2017, 2016, 3, 2, 2, 2, 2018, 369, 3, 2, 2, 2, 2019, 2021, 7, 73, 2,
	2, 2020, 2022, 5, 88, 45, 2, 2021, 2020, 3, 2, 2, 2, 2021, 2022, 3, 2,
	2, 2, 2022, 371, 3, 2, 2, 2, 2023, 2026, 5, 374, 188, 2, 2024, 2026, 5,
	378, 190, 2, 2025, 2023, 3, 2, 2, 2, 2025, 2024, 3, 2, 2, 2, 2026, 373,
	3, 2, 2, 2, 2027, 2028, 7, 73, 2, 2, 2028, 2030, 7, 87, 2, 2, 2029, 2031,
	5, 376, 189, 2, 2030, 2029, 3, 2, 2, 2, 2030, 2031, 3, 2, 2, 2, 2031, 2032,
	3, 2, 2, 2, 2032, 2033, 7, 88, 2, 2, 2033, 375, 3, 2, 2, 2, 2034, 2036,
	5, 248, 125, 2, 2035, 2037, 7, 133, 2, 2, 2036, 2035, 3, 2, 2, 2, 2036,
	2037, 3, 2, 2, 2, 2037, 2045, 3, 2, 2, 2, 2038, 2039, 7, 124, 2, 2, 2039,
	2041, 5, 248, 125, 2, 2040, 2042, 7, 133, 2, 2, 2041, 2040, 3, 2, 2, 2,
	2041, 2042, 3, 2, 2, 2, 2042, 2044, 3, 2, 2, 2, 2043, 2038, 3, 2, 2, 2,
	2044, 2047, 3, 2, 2, 2, 2045, 2043, 3, 2, 2, 2, 2045, 2046, 3, 2, 2, 2,
	2046, 377, 3, 2, 2, 2, 2047, 2045, 3, 2, 2, 2, 2048, 2049, 7, 52, 2, 2,
	2049, 2050, 7, 87, 2, 2, 2050, 2051, 5, 94, 48, 2, 2051, 2052, 7, 88, 2,
	2, 2052, 2055, 3, 2, 2, 2, 2053, 2055, 7, 52, 2, 2, 2054, 2048, 3, 2, 2,
	2, 2054, 2053, 3, 2, 2, 2, 2055, 379, 3, 2, 2, 2, 2056, 2059, 7, 51, 2,
	2, 2057, 2058, 7, 89, 2, 2, 2058, 2060, 7, 90, 2, 2, 2059, 2057, 3, 2,
	2, 2, 2059, 2060, 3, 2, 2, 2, 2060, 2108, 3, 2, 2, 2, 2061, 2064, 7, 30,
	2, 2, 2062, 2063, 7, 89, 2, 2, 2063, 2065, 7, 90, 2, 2, 2064, 2062, 3,
	2, 2, 2, 2064, 2065, 3, 2, 2, 2, 2065, 2108, 3, 2, 2, 2, 2066, 2108, 7,
	93, 2, 2, 2067, 2108, 7, 94, 2, 2, 2068, 2108, 7, 95, 2, 2, 2069, 2108,
	7, 96, 2, 2, 2070, 2108, 7, 97, 2, 2, 2071, 2108, 7, 98, 2, 2, 2072, 2108,
	7, 99, 2, 2, 2073, 2108, 7, 100, 2, 2, 2074, 2108, 7, 101, 2, 2, 2075,
	2108, 7, 102, 2, 2, 2076, 2108, 7, 103, 2, 2, 2077, 2108, 7, 105, 2, 2,
	2078, 2108, 7, 104, 2, 2, 2079, 2108, 7, 119, 2, 2, 2080, 2108, 7, 106,
	2, 2, 2081, 2108, 7, 107, 2, 2, 2082, 2108, 7, 108, 2, 2, 2083, 2108, 7,
	110, 2, 2, 2084, 2108, 7, 111, 2, 2, 2085, 2108, 7, 112, 2, 2, 2086, 2108,
	7, 113, 2, 2, 2087, 2088, 7, 104, 2, 2, 2088, 2108, 7, 104, 2, 2, 2089,
	2090, 7, 105, 2, 2, 2090, 2108, 7, 105, 2, 2, 2091, 2108, 7, 115, 2, 2,
	2092, 2108, 7, 114, 2, 2, 2093, 2108, 7, 116, 2, 2, 2094, 2108, 7, 117,
	2, 2, 2095, 2108, 7, 118, 2, 2, 2096, 2108, 7, 120, 2, 2, 2097, 2108, 7,
	121, 2, 2, 2098, 2108, 7, 122, 2, 2, 2099, 2108, 7, 123, 2, 2, 2100, 2108,
	7, 124, 2, 2, 2101, 2108, 7, 125, 2, 2, 2102, 2108, 7, 126, 2, 2, 2103,
	2104, 7, 87, 2, 2, 2104, 2108, 7, 88, 2, 2, 2105, 2106, 7, 89, 2, 2, 2106,
	2108, 7, 90, 2, 2, 2107, 2056, 3, 2, 2, 2, 2107, 2061, 3, 2, 2, 2, 2107,
	2066, 3, 2, 2, 2, 2107, 2067, 3, 2, 2, 2, 2107, 2068, 3, 2, 2, 2, 2107,
	2069, 3, 2, 2, 2, 2107, 2070, 3, 2, 2, 2, 2107, 2071, 3, 2, 2, 2, 2107,
	2072, 3, 2, 2, 2, 2107, 2073, 3, 2, 2, 2, 2107, 2074, 3, 2, 2, 2, 2107,
	2075, 3, 2, 2, 2, 2107, 2076, 3, 2, 2, 2, 2107, 2077, 3, 2, 2, 2, 2107,
	2078, 3, 2, 2, 2, 2107, 2079, 3, 2, 2, 2, 2107, 2080, 3, 2, 2, 2, 2107,
	2081, 3, 2, 2, 2, 2107, 2082, 3, 2, 2, 2, 2107, 2083, 3, 2, 2, 2, 2107,
	2084, 3, 2, 2, 2, 2107, 2085, 3, 2, 2, 2, 2107, 2086, 3, 2, 2, 2, 2107,
	2087, 3, 2, 2, 2, 2107, 2089, 3, 2, 2, 2, 2107, 2091, 3, 2, 2, 2, 2107,
	2092, 3, 2, 2, 2, 2107, 2093, 3, 2, 2, 2, 2107, 2094, 3, 2, 2, 2, 2107,
	2095, 3, 2, 2, 2, 2107, 2096, 3, 2, 2, 2, 2107, 2097, 3, 2, 2, 2, 2107,
	2098, 3, 2, 2, 2, 2107, 2099, 3, 2, 2, 2, 2107, 2100, 3, 2, 2, 2, 2107,
	2101, 3, 2, 2, 2, 2107, 2102, 3, 2, 2, 2, 2107, 2103, 3, 2, 2, 2, 2107,
	2105, 3, 2, 2, 2, 2108, 381, 3, 2, 2, 2, 2109, 2110, 9, 24, 2, 2, 2110,
	383, 3, 2, 2, 2, 308, 385, 392, 401, 405, 414, 417, 421, 429, 436, 439,
	444, 449, 455, 463, 465, 474, 478, 482, 485, 489, 492, 499, 503, 506, 509,
	512, 518, 522, 526, 540, 544, 550, 557, 563, 567, 571, 573, 581, 586, 599,
	606, 618, 628, 633, 637, 644, 647, 655, 659, 662, 669, 676, 680, 685, 689,
	692, 697, 712, 719, 727, 735, 744, 751, 758, 766, 774, 782, 790, 798, 806,
	815, 823, 832, 840, 848, 850, 853, 859, 865, 871, 878, 887, 895, 899, 906,
	908, 928, 932, 938, 943, 947, 950, 957, 964, 968, 977, 988, 998, 1003,
	1010, 1013, 1018, 1023, 1044, 1049, 1052, 1063, 1069, 1074, 1077, 1082,
	1085, 1092, 1101, 1106, 1109, 1113, 1117, 1121, 1126, 1131, 1137, 1143,
	1149, 1155, 1161, 1164, 1170, 1174, 1178, 1181, 1189, 1191, 1197, 1200,
	1203, 1206, 1210, 1214, 1220, 1230, 1236, 1242, 1247, 1252, 1256, 1269,
	1275, 1279, 1285, 1290, 1305, 1309, 1314, 1319, 1324, 1330, 1333, 1342,
	1346, 1351, 1355, 1361, 1368, 1385, 1387, 1394, 1399, 1406, 1410, 1414,
	1422, 1428, 1434, 1438, 1440, 1444, 1449, 1453, 1456, 1459, 1462, 1467,
	1471, 1474, 1478, 1481, 1483, 1488, 1495, 1501, 1505, 1511, 1517, 1520,
	1522, 1528, 1532, 1538, 1545, 1549, 1551, 1555, 1561, 1573, 1577, 1579,
	1583, 1588, 1591, 1598, 1602, 1607, 1609, 1613, 1616, 1619, 1623, 1628,
	1635, 1642, 1647, 1651, 1655, 1660, 1664, 1670, 1672, 1678, 1683, 1689,
	1693, 1695, 1698, 1702, 1706, 1708, 1710, 1713, 1725, 1727, 1730, 1733,
	1736, 1745, 1752, 1757, 1760, 1763, 1765, 1768, 1771, 1775, 1780, 1793,
	1798, 1802, 1806, 1811, 1816, 1820, 1823, 1827, 1838, 1842, 1849, 1854,
	1858, 1864, 1868, 1872, 1881, 1894, 1899, 1906, 1910, 1913, 1916, 1919,
	1923, 1928, 1935, 1939, 1943, 1949, 1954, 1958, 1964, 1970, 1973, 1976,
	1992, 2000, 2009, 2014, 2017, 2021, 2025, 2030, 2036, 2041, 2045, 2054,
	2059, 2064, 2107,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "'alignas'", "'alignof'", "'asm'",
	"'auto'", "'bool'", "'break'", "'case'", "'catch'", "'char'", "'char16_t'",
	"'char32_t'", "'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'",
	"'decltype'", "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'",
	"'else'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'", "'final'",
	"'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", "'int'",
	"'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'", "'nullptr'",
	"'operator'", "'override'", "'private'", "'protected'", "'public'", "'register'",
	"'reinterpret_cast'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'",
	"'static_assert'", "'static_cast'", "'struct'", "'switch'", "'template'",
	"'this'", "'thread_local'", "'throw'", "'true'", "'try'", "'typedef'",
	"'typeid'", "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'",
	"'void'", "'volatile'", "'wchar_t'", "'while'", "'('", "')'", "'['", "']'",
	"'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'",
	"", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='",
	"'&='", "'|='", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", "", "",
	"'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", "'::'", "';'", "'.'",
	"'.*'", "'...'",
}
var symbolicNames = []string{
	"", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral",
	"BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro",
	"Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
	"Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr", "Const_cast",
	"Continue", "Decltype", "Default", "Delete", "Do", "Double", "Dynamic_cast",
	"Else", "Enum", "Explicit", "Export", "Extern", "False_", "Final", "Float",
	"For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace",
	"New", "Noexcept", "Nullptr", "Operator", "Override", "Private", "Protected",
	"Public", "Register", "Reinterpret_cast", "Return", "Short", "Signed",
	"Sizeof", "Static", "Static_assert", "Static_cast", "Struct", "Switch",
	"Template", "This", "Thread_local", "Throw", "True_", "Try", "Typedef",
	"Typeid_", "Typename_", "Union", "Unsigned", "Using", "Virtual", "Void",
	"Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket",
	"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div",
	"Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater",
	"PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign",
	"AndAssign", "OrAssign", "LeftShiftAssign", "RightShiftAssign", "Equal",
	"NotEqual", "LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus",
	"MinusMinus", "Comma", "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon",
	"Semi", "Dot", "DotStar", "Ellipsis", "Identifier", "DecimalLiteral", "OctalLiteral",
	"HexadecimalLiteral", "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral",
	"UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral",
	"Whitespace", "Newline", "BlockComment", "LineComment",
}

var ruleNames = []string{
	"translationUnit", "primaryExpression", "idExpression", "unqualifiedId",
	"qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer",
	"lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture",
	"initcapture", "lambdaDeclarator", "postfixExpression", "typeIdOfTheTypeId",
	"expressionList", "pseudoDestructorName", "unaryExpression", "unaryOperator",
	"newExpression", "newPlacement", "newTypeId", "newDeclarator", "noPointerNewDeclarator",
	"newInitializer", "deleteExpression", "noExceptExpression", "castExpression",
	"pointerMemberExpression", "multiplicativeExpression", "additiveExpression",
	"shiftExpression", "shiftOperator", "relationalExpression", "equalityExpression",
	"andExpression", "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression",
	"logicalOrExpression", "conditionalExpression", "assignmentExpression",
	"assignmentOperator", "expression", "constantExpression", "statement",
	"labeledStatement", "expressionStatement", "compoundStatement", "statementSeq",
	"selectionStatement", "condition", "iterationStatement", "forInitStatement",
	"forRangeDeclaration", "forRangeInitializer", "jumpStatement", "declarationStatement",
	"declarationseq", "declaration", "blockDeclaration", "aliasDeclaration",
	"simpleDeclaration", "staticAssertDeclaration", "emptyDeclaration", "attributeDeclaration",
	"declSpecifier", "declSpecifierSeq", "storageClassSpecifier", "functionSpecifier",
	"typedefName", "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq",
	"trailingTypeSpecifierSeq", "simpleTypeLengthModifier", "simpleTypeSignednessModifier",
	"simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier",
	"enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumkey",
	"enumbase", "enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName",
	"originalNamespaceName", "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition",
	"qualifiednamespacespecifier", "usingDeclaration", "usingDirective", "asmDefinition",
	"linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier",
	"alignmentspecifier", "attributeList", "attribute", "attributeNamespace",
	"attributeArgumentClause", "balancedTokenSeq", "balancedtoken", "initDeclaratorList",
	"initDeclarator", "declarator", "pointerDeclarator", "noPointerDeclarator",
	"parametersAndQualifiers", "trailingReturnType", "pointerOperator", "cvqualifierseq",
	"cvQualifier", "refqualifier", "declaratorid", "theTypeId", "abstractDeclarator",
	"pointerAbstractDeclarator", "noPointerAbstractDeclarator", "abstractPackDeclarator",
	"noPointerAbstractPackDeclarator", "parameterDeclarationClause", "parameterDeclarationList",
	"parameterDeclaration", "functionDefinition", "functionBody", "initializer",
	"braceOrEqualInitializer", "initializerClause", "initializerList", "bracedInitList",
	"className", "classSpecifier", "classHead", "classHeadName", "classVirtSpecifier",
	"classKey", "memberSpecification", "memberdeclaration", "memberDeclaratorList",
	"memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", "pureSpecifier",
	"baseClause", "baseSpecifierList", "baseSpecifier", "classOrDeclType",
	"baseTypeSpecifier", "accessSpecifier", "conversionFunctionId", "conversionTypeId",
	"conversionDeclarator", "constructorInitializer", "memInitializerList",
	"memInitializer", "meminitializerid", "operatorFunctionId", "literalOperatorId",
	"templateDeclaration", "templateparameterList", "templateParameter", "typeParameter",
	"simpleTemplateId", "templateId", "templateName", "templateArgumentList",
	"templateArgument", "typeNameSpecifier", "explicitInstantiation", "explicitSpecialization",
	"tryBlock", "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration",
	"throwExpression", "exceptionSpecification", "dynamicExceptionSpecification",
	"typeIdList", "noeExceptSpecification", "theOperator", "literal",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type CPP14Parser struct {
	*antlr.BaseParser
}

func NewCPP14Parser(input antlr.TokenStream) *CPP14Parser {
	this := new(CPP14Parser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "CPP14Parser.g4"

	return this
}

// CPP14Parser tokens.
const (
	CPP14ParserEOF                         = antlr.TokenEOF
	CPP14ParserIntegerLiteral              = 1
	CPP14ParserCharacterLiteral            = 2
	CPP14ParserFloatingLiteral             = 3
	CPP14ParserStringLiteral               = 4
	CPP14ParserBooleanLiteral              = 5
	CPP14ParserPointerLiteral              = 6
	CPP14ParserUserDefinedLiteral          = 7
	CPP14ParserMultiLineMacro              = 8
	CPP14ParserDirective                   = 9
	CPP14ParserAlignas                     = 10
	CPP14ParserAlignof                     = 11
	CPP14ParserAsm                         = 12
	CPP14ParserAuto                        = 13
	CPP14ParserBool                        = 14
	CPP14ParserBreak                       = 15
	CPP14ParserCase                        = 16
	CPP14ParserCatch                       = 17
	CPP14ParserChar                        = 18
	CPP14ParserChar16                      = 19
	CPP14ParserChar32                      = 20
	CPP14ParserClass                       = 21
	CPP14ParserConst                       = 22
	CPP14ParserConstexpr                   = 23
	CPP14ParserConst_cast                  = 24
	CPP14ParserContinue                    = 25
	CPP14ParserDecltype                    = 26
	CPP14ParserDefault                     = 27
	CPP14ParserDelete                      = 28
	CPP14ParserDo                          = 29
	CPP14ParserDouble                      = 30
	CPP14ParserDynamic_cast                = 31
	CPP14ParserElse                        = 32
	CPP14ParserEnum                        = 33
	CPP14ParserExplicit                    = 34
	CPP14ParserExport                      = 35
	CPP14ParserExtern                      = 36
	CPP14ParserFalse_                      = 37
	CPP14ParserFinal                       = 38
	CPP14ParserFloat                       = 39
	CPP14ParserFor                         = 40
	CPP14ParserFriend                      = 41
	CPP14ParserGoto                        = 42
	CPP14ParserIf                          = 43
	CPP14ParserInline                      = 44
	CPP14ParserInt                         = 45
	CPP14ParserLong                        = 46
	CPP14ParserMutable                     = 47
	CPP14ParserNamespace                   = 48
	CPP14ParserNew                         = 49
	CPP14ParserNoexcept                    = 50
	CPP14ParserNullptr                     = 51
	CPP14ParserOperator                    = 52
	CPP14ParserOverride                    = 53
	CPP14ParserPrivate                     = 54
	CPP14ParserProtected                   = 55
	CPP14ParserPublic                      = 56
	CPP14ParserRegister                    = 57
	CPP14ParserReinterpret_cast            = 58
	CPP14ParserReturn                      = 59
	CPP14ParserShort                       = 60
	CPP14ParserSigned                      = 61
	CPP14ParserSizeof                      = 62
	CPP14ParserStatic                      = 63
	CPP14ParserStatic_assert               = 64
	CPP14ParserStatic_cast                 = 65
	CPP14ParserStruct                      = 66
	CPP14ParserSwitch                      = 67
	CPP14ParserTemplate                    = 68
	CPP14ParserThis                        = 69
	CPP14ParserThread_local                = 70
	CPP14ParserThrow                       = 71
	CPP14ParserTrue_                       = 72
	CPP14ParserTry                         = 73
	CPP14ParserTypedef                     = 74
	CPP14ParserTypeid_                     = 75
	CPP14ParserTypename_                   = 76
	CPP14ParserUnion                       = 77
	CPP14ParserUnsigned                    = 78
	CPP14ParserUsing                       = 79
	CPP14ParserVirtual                     = 80
	CPP14ParserVoid                        = 81
	CPP14ParserVolatile                    = 82
	CPP14ParserWchar                       = 83
	CPP14ParserWhile                       = 84
	CPP14ParserLeftParen                   = 85
	CPP14ParserRightParen                  = 86
	CPP14ParserLeftBracket                 = 87
	CPP14ParserRightBracket                = 88
	CPP14ParserLeftBrace                   = 89
	CPP14ParserRightBrace                  = 90
	CPP14ParserPlus                        = 91
	CPP14ParserMinus                       = 92
	CPP14ParserStar                        = 93
	CPP14ParserDiv                         = 94
	CPP14ParserMod                         = 95
	CPP14ParserCaret                       = 96
	CPP14ParserAnd                         = 97
	CPP14ParserOr                          = 98
	CPP14ParserTilde                       = 99
	CPP14ParserNot                         = 100
	CPP14ParserAssign                      = 101
	CPP14ParserLess                        = 102
	CPP14ParserGreater                     = 103
	CPP14ParserPlusAssign                  = 104
	CPP14ParserMinusAssign                 = 105
	CPP14ParserStarAssign                  = 106
	CPP14ParserDivAssign                   = 107
	CPP14ParserModAssign                   = 108
	CPP14ParserXorAssign                   = 109
	CPP14ParserAndAssign                   = 110
	CPP14ParserOrAssign                    = 111
	CPP14ParserLeftShiftAssign             = 112
	CPP14ParserRightShiftAssign            = 113
	CPP14ParserEqual                       = 114
	CPP14ParserNotEqual                    = 115
	CPP14ParserLessEqual                   = 116
	CPP14ParserGreaterEqual                = 117
	CPP14ParserAndAnd                      = 118
	CPP14ParserOrOr                        = 119
	CPP14ParserPlusPlus                    = 120
	CPP14ParserMinusMinus                  = 121
	CPP14ParserComma                       = 122
	CPP14ParserArrowStar                   = 123
	CPP14ParserArrow                       = 124
	CPP14ParserQuestion                    = 125
	CPP14ParserColon                       = 126
	CPP14ParserDoublecolon                 = 127
	CPP14ParserSemi                        = 128
	CPP14ParserDot                         = 129
	CPP14ParserDotStar                     = 130
	CPP14ParserEllipsis                    = 131
	CPP14ParserIdentifier                  = 132
	CPP14ParserDecimalLiteral              = 133
	CPP14ParserOctalLiteral                = 134
	CPP14ParserHexadecimalLiteral          = 135
	CPP14ParserBinaryLiteral               = 136
	CPP14ParserIntegersuffix               = 137
	CPP14ParserUserDefinedIntegerLiteral   = 138
	CPP14ParserUserDefinedFloatingLiteral  = 139
	CPP14ParserUserDefinedStringLiteral    = 140
	CPP14ParserUserDefinedCharacterLiteral = 141
	CPP14ParserWhitespace                  = 142
	CPP14ParserNewline                     = 143
	CPP14ParserBlockComment                = 144
	CPP14ParserLineComment                 = 145
)

// CPP14Parser rules.
const (
	CPP14ParserRULE_translationUnit                 = 0
	CPP14ParserRULE_primaryExpression               = 1
	CPP14ParserRULE_idExpression                    = 2
	CPP14ParserRULE_unqualifiedId                   = 3
	CPP14ParserRULE_qualifiedId                     = 4
	CPP14ParserRULE_nestedNameSpecifier             = 5
	CPP14ParserRULE_lambdaExpression                = 6
	CPP14ParserRULE_lambdaIntroducer                = 7
	CPP14ParserRULE_lambdaCapture                   = 8
	CPP14ParserRULE_captureDefault                  = 9
	CPP14ParserRULE_captureList                     = 10
	CPP14ParserRULE_capture                         = 11
	CPP14ParserRULE_simpleCapture                   = 12
	CPP14ParserRULE_initcapture                     = 13
	CPP14ParserRULE_lambdaDeclarator                = 14
	CPP14ParserRULE_postfixExpression               = 15
	CPP14ParserRULE_typeIdOfTheTypeId               = 16
	CPP14ParserRULE_expressionList                  = 17
	CPP14ParserRULE_pseudoDestructorName            = 18
	CPP14ParserRULE_unaryExpression                 = 19
	CPP14ParserRULE_unaryOperator                   = 20
	CPP14ParserRULE_newExpression                   = 21
	CPP14ParserRULE_newPlacement                    = 22
	CPP14ParserRULE_newTypeId                       = 23
	CPP14ParserRULE_newDeclarator                   = 24
	CPP14ParserRULE_noPointerNewDeclarator          = 25
	CPP14ParserRULE_newInitializer                  = 26
	CPP14ParserRULE_deleteExpression                = 27
	CPP14ParserRULE_noExceptExpression              = 28
	CPP14ParserRULE_castExpression                  = 29
	CPP14ParserRULE_pointerMemberExpression         = 30
	CPP14ParserRULE_multiplicativeExpression        = 31
	CPP14ParserRULE_additiveExpression              = 32
	CPP14ParserRULE_shiftExpression                 = 33
	CPP14ParserRULE_shiftOperator                   = 34
	CPP14ParserRULE_relationalExpression            = 35
	CPP14ParserRULE_equalityExpression              = 36
	CPP14ParserRULE_andExpression                   = 37
	CPP14ParserRULE_exclusiveOrExpression           = 38
	CPP14ParserRULE_inclusiveOrExpression           = 39
	CPP14ParserRULE_logicalAndExpression            = 40
	CPP14ParserRULE_logicalOrExpression             = 41
	CPP14ParserRULE_conditionalExpression           = 42
	CPP14ParserRULE_assignmentExpression            = 43
	CPP14ParserRULE_assignmentOperator              = 44
	CPP14ParserRULE_expression                      = 45
	CPP14ParserRULE_constantExpression              = 46
	CPP14ParserRULE_statement                       = 47
	CPP14ParserRULE_labeledStatement                = 48
	CPP14ParserRULE_expressionStatement             = 49
	CPP14ParserRULE_compoundStatement               = 50
	CPP14ParserRULE_statementSeq                    = 51
	CPP14ParserRULE_selectionStatement              = 52
	CPP14ParserRULE_condition                       = 53
	CPP14ParserRULE_iterationStatement              = 54
	CPP14ParserRULE_forInitStatement                = 55
	CPP14ParserRULE_forRangeDeclaration             = 56
	CPP14ParserRULE_forRangeInitializer             = 57
	CPP14ParserRULE_jumpStatement                   = 58
	CPP14ParserRULE_declarationStatement            = 59
	CPP14ParserRULE_declarationseq                  = 60
	CPP14ParserRULE_declaration                     = 61
	CPP14ParserRULE_blockDeclaration                = 62
	CPP14ParserRULE_aliasDeclaration                = 63
	CPP14ParserRULE_simpleDeclaration               = 64
	CPP14ParserRULE_staticAssertDeclaration         = 65
	CPP14ParserRULE_emptyDeclaration                = 66
	CPP14ParserRULE_attributeDeclaration            = 67
	CPP14ParserRULE_declSpecifier                   = 68
	CPP14ParserRULE_declSpecifierSeq                = 69
	CPP14ParserRULE_storageClassSpecifier           = 70
	CPP14ParserRULE_functionSpecifier               = 71
	CPP14ParserRULE_typedefName                     = 72
	CPP14ParserRULE_typeSpecifier                   = 73
	CPP14ParserRULE_trailingTypeSpecifier           = 74
	CPP14ParserRULE_typeSpecifierSeq                = 75
	CPP14ParserRULE_trailingTypeSpecifierSeq        = 76
	CPP14ParserRULE_simpleTypeLengthModifier        = 77
	CPP14ParserRULE_simpleTypeSignednessModifier    = 78
	CPP14ParserRULE_simpleTypeSpecifier             = 79
	CPP14ParserRULE_theTypeName                     = 80
	CPP14ParserRULE_decltypeSpecifier               = 81
	CPP14ParserRULE_elaboratedTypeSpecifier         = 82
	CPP14ParserRULE_enumName                        = 83
	CPP14ParserRULE_enumSpecifier                   = 84
	CPP14ParserRULE_enumHead                        = 85
	CPP14ParserRULE_opaqueEnumDeclaration           = 86
	CPP14ParserRULE_enumkey                         = 87
	CPP14ParserRULE_enumbase                        = 88
	CPP14ParserRULE_enumeratorList                  = 89
	CPP14ParserRULE_enumeratorDefinition            = 90
	CPP14ParserRULE_enumerator                      = 91
	CPP14ParserRULE_namespaceName                   = 92
	CPP14ParserRULE_originalNamespaceName           = 93
	CPP14ParserRULE_namespaceDefinition             = 94
	CPP14ParserRULE_namespaceAlias                  = 95
	CPP14ParserRULE_namespaceAliasDefinition        = 96
	CPP14ParserRULE_qualifiednamespacespecifier     = 97
	CPP14ParserRULE_usingDeclaration                = 98
	CPP14ParserRULE_usingDirective                  = 99
	CPP14ParserRULE_asmDefinition                   = 100
	CPP14ParserRULE_linkageSpecification            = 101
	CPP14ParserRULE_attributeSpecifierSeq           = 102
	CPP14ParserRULE_attributeSpecifier              = 103
	CPP14ParserRULE_alignmentspecifier              = 104
	CPP14ParserRULE_attributeList                   = 105
	CPP14ParserRULE_attribute                       = 106
	CPP14ParserRULE_attributeNamespace              = 107
	CPP14ParserRULE_attributeArgumentClause         = 108
	CPP14ParserRULE_balancedTokenSeq                = 109
	CPP14ParserRULE_balancedtoken                   = 110
	CPP14ParserRULE_initDeclaratorList              = 111
	CPP14ParserRULE_initDeclarator                  = 112
	CPP14ParserRULE_declarator                      = 113
	CPP14ParserRULE_pointerDeclarator               = 114
	CPP14ParserRULE_noPointerDeclarator             = 115
	CPP14ParserRULE_parametersAndQualifiers         = 116
	CPP14ParserRULE_trailingReturnType              = 117
	CPP14ParserRULE_pointerOperator                 = 118
	CPP14ParserRULE_cvqualifierseq                  = 119
	CPP14ParserRULE_cvQualifier                     = 120
	CPP14ParserRULE_refqualifier                    = 121
	CPP14ParserRULE_declaratorid                    = 122
	CPP14ParserRULE_theTypeId                       = 123
	CPP14ParserRULE_abstractDeclarator              = 124
	CPP14ParserRULE_pointerAbstractDeclarator       = 125
	CPP14ParserRULE_noPointerAbstractDeclarator     = 126
	CPP14ParserRULE_abstractPackDeclarator          = 127
	CPP14ParserRULE_noPointerAbstractPackDeclarator = 128
	CPP14ParserRULE_parameterDeclarationClause      = 129
	CPP14ParserRULE_parameterDeclarationList        = 130
	CPP14ParserRULE_parameterDeclaration            = 131
	CPP14ParserRULE_functionDefinition              = 132
	CPP14ParserRULE_functionBody                    = 133
	CPP14ParserRULE_initializer                     = 134
	CPP14ParserRULE_braceOrEqualInitializer         = 135
	CPP14ParserRULE_initializerClause               = 136
	CPP14ParserRULE_initializerList                 = 137
	CPP14ParserRULE_bracedInitList                  = 138
	CPP14ParserRULE_className                       = 139
	CPP14ParserRULE_classSpecifier                  = 140
	CPP14ParserRULE_classHead                       = 141
	CPP14ParserRULE_classHeadName                   = 142
	CPP14ParserRULE_classVirtSpecifier              = 143
	CPP14ParserRULE_classKey                        = 144
	CPP14ParserRULE_memberSpecification             = 145
	CPP14ParserRULE_memberdeclaration               = 146
	CPP14ParserRULE_memberDeclaratorList            = 147
	CPP14ParserRULE_memberDeclarator                = 148
	CPP14ParserRULE_virtualSpecifierSeq             = 149
	CPP14ParserRULE_virtualSpecifier                = 150
	CPP14ParserRULE_pureSpecifier                   = 151
	CPP14ParserRULE_baseClause                      = 152
	CPP14ParserRULE_baseSpecifierList               = 153
	CPP14ParserRULE_baseSpecifier                   = 154
	CPP14ParserRULE_classOrDeclType                 = 155
	CPP14ParserRULE_baseTypeSpecifier               = 156
	CPP14ParserRULE_accessSpecifier                 = 157
	CPP14ParserRULE_conversionFunctionId            = 158
	CPP14ParserRULE_conversionTypeId                = 159
	CPP14ParserRULE_conversionDeclarator            = 160
	CPP14ParserRULE_constructorInitializer          = 161
	CPP14ParserRULE_memInitializerList              = 162
	CPP14ParserRULE_memInitializer                  = 163
	CPP14ParserRULE_meminitializerid                = 164
	CPP14ParserRULE_operatorFunctionId              = 165
	CPP14ParserRULE_literalOperatorId               = 166
	CPP14ParserRULE_templateDeclaration             = 167
	CPP14ParserRULE_templateparameterList           = 168
	CPP14ParserRULE_templateParameter               = 169
	CPP14ParserRULE_typeParameter                   = 170
	CPP14ParserRULE_simpleTemplateId                = 171
	CPP14ParserRULE_templateId                      = 172
	CPP14ParserRULE_templateName                    = 173
	CPP14ParserRULE_templateArgumentList            = 174
	CPP14ParserRULE_templateArgument                = 175
	CPP14ParserRULE_typeNameSpecifier               = 176
	CPP14ParserRULE_explicitInstantiation           = 177
	CPP14ParserRULE_explicitSpecialization          = 178
	CPP14ParserRULE_tryBlock                        = 179
	CPP14ParserRULE_functionTryBlock                = 180
	CPP14ParserRULE_handlerSeq                      = 181
	CPP14ParserRULE_handler                         = 182
	CPP14ParserRULE_exceptionDeclaration            = 183
	CPP14ParserRULE_throwExpression                 = 184
	CPP14ParserRULE_exceptionSpecification          = 185
	CPP14ParserRULE_dynamicExceptionSpecification   = 186
	CPP14ParserRULE_typeIdList                      = 187
	CPP14ParserRULE_noeExceptSpecification          = 188
	CPP14ParserRULE_theOperator                     = 189
	CPP14ParserRULE_literal                         = 190
)

// ITranslationUnitContext is an interface to support dynamic dispatch.
type ITranslationUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTranslationUnitContext differentiates from other interfaces.
	IsTranslationUnitContext()
}

type TranslationUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTranslationUnitContext() *TranslationUnitContext {
	var p = new(TranslationUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_translationUnit
	return p
}

func (*TranslationUnitContext) IsTranslationUnitContext() {}

func NewTranslationUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TranslationUnitContext {
	var p = new(TranslationUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_translationUnit

	return p
}

func (s *TranslationUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *TranslationUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEOF, 0)
}

func (s *TranslationUnitContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *TranslationUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TranslationUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TranslationUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTranslationUnit(s)
	}
}

func (s *TranslationUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTranslationUnit(s)
	}
}

func (p *CPP14Parser) TranslationUnit() (localctx ITranslationUnitContext) {
	localctx = NewTranslationUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CPP14ParserRULE_translationUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAsm-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserNamespace-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
		{
			p.SetState(382)
			p.Declarationseq()
		}

	}
	{
		p.SetState(385)
		p.Match(CPP14ParserEOF)
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) AllLiteral() []ILiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILiteralContext)(nil)).Elem())
	var tst = make([]ILiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILiteralContext)
		}
	}

	return tst
}

func (s *PrimaryExpressionContext) Literal(i int) ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpressionContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *PrimaryExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PrimaryExpressionContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *PrimaryExpressionContext) LambdaExpression() ILambdaExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (p *CPP14Parser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CPP14ParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(399)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(388)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(387)
					p.Literal()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(390)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
		}

	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(392)
			p.Match(CPP14ParserThis)
		}

	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(393)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(394)
			p.Expression()
		}
		{
			p.SetState(395)
			p.Match(CPP14ParserRightParen)
		}

	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(397)
			p.IdExpression()
		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(398)
			p.LambdaExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIdExpressionContext is an interface to support dynamic dispatch.
type IIdExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdExpressionContext differentiates from other interfaces.
	IsIdExpressionContext()
}

type IdExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdExpressionContext() *IdExpressionContext {
	var p = new(IdExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_idExpression
	return p
}

func (*IdExpressionContext) IsIdExpressionContext() {}

func NewIdExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdExpressionContext {
	var p = new(IdExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_idExpression

	return p
}

func (s *IdExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IdExpressionContext) UnqualifiedId() IUnqualifiedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *IdExpressionContext) QualifiedId() IQualifiedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdContext)
}

func (s *IdExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterIdExpression(s)
	}
}

func (s *IdExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitIdExpression(s)
	}
}

func (p *CPP14Parser) IdExpression() (localctx IIdExpressionContext) {
	localctx = NewIdExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, CPP14ParserRULE_idExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(403)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(401)
			p.UnqualifiedId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(402)
			p.QualifiedId()
		}

	}

	return localctx
}

// IUnqualifiedIdContext is an interface to support dynamic dispatch.
type IUnqualifiedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnqualifiedIdContext differentiates from other interfaces.
	IsUnqualifiedIdContext()
}

type UnqualifiedIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnqualifiedIdContext() *UnqualifiedIdContext {
	var p = new(UnqualifiedIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unqualifiedId
	return p
}

func (*UnqualifiedIdContext) IsUnqualifiedIdContext() {}

func NewUnqualifiedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnqualifiedIdContext {
	var p = new(UnqualifiedIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unqualifiedId

	return p
}

func (s *UnqualifiedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *UnqualifiedIdContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnqualifiedIdContext) OperatorFunctionId() IOperatorFunctionIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorFunctionIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorFunctionIdContext)
}

func (s *UnqualifiedIdContext) ConversionFunctionId() IConversionFunctionIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionFunctionIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionFunctionIdContext)
}

func (s *UnqualifiedIdContext) LiteralOperatorId() ILiteralOperatorIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralOperatorIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralOperatorIdContext)
}

func (s *UnqualifiedIdContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnqualifiedIdContext) ClassName() IClassNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *UnqualifiedIdContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *UnqualifiedIdContext) TemplateId() ITemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateIdContext)
}

func (s *UnqualifiedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnqualifiedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnqualifiedIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterUnqualifiedId(s)
	}
}

func (s *UnqualifiedIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitUnqualifiedId(s)
	}
}

func (p *CPP14Parser) UnqualifiedId() (localctx IUnqualifiedIdContext) {
	localctx = NewUnqualifiedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CPP14ParserRULE_unqualifiedId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(415)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(405)
			p.Match(CPP14ParserIdentifier)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(406)
			p.OperatorFunctionId()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(407)
			p.ConversionFunctionId()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(408)
			p.LiteralOperatorId()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(409)
			p.Match(CPP14ParserTilde)
		}
		p.SetState(412)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIdentifier:
			{
				p.SetState(410)
				p.ClassName()
			}

		case CPP14ParserDecltype:
			{
				p.SetState(411)
				p.DecltypeSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(414)
			p.TemplateId()
		}

	}

	return localctx
}

// IQualifiedIdContext is an interface to support dynamic dispatch.
type IQualifiedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedIdContext differentiates from other interfaces.
	IsQualifiedIdContext()
}

type QualifiedIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdContext() *QualifiedIdContext {
	var p = new(QualifiedIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiedId
	return p
}

func (*QualifiedIdContext) IsQualifiedIdContext() {}

func NewQualifiedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdContext {
	var p = new(QualifiedIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiedId

	return p
}

func (s *QualifiedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *QualifiedIdContext) UnqualifiedId() IUnqualifiedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *QualifiedIdContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *QualifiedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterQualifiedId(s)
	}
}

func (s *QualifiedIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitQualifiedId(s)
	}
}

func (p *CPP14Parser) QualifiedId() (localctx IQualifiedIdContext) {
	localctx = NewQualifiedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, CPP14ParserRULE_qualifiedId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(417)
		p.nestedNameSpecifier(0)
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserTemplate {
		{
			p.SetState(418)
			p.Match(CPP14ParserTemplate)
		}

	}
	{
		p.SetState(421)
		p.UnqualifiedId()
	}

	return localctx
}

// INestedNameSpecifierContext is an interface to support dynamic dispatch.
type INestedNameSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNestedNameSpecifierContext differentiates from other interfaces.
	IsNestedNameSpecifierContext()
}

type NestedNameSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedNameSpecifierContext() *NestedNameSpecifierContext {
	var p = new(NestedNameSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_nestedNameSpecifier
	return p
}

func (*NestedNameSpecifierContext) IsNestedNameSpecifierContext() {}

func NewNestedNameSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedNameSpecifierContext {
	var p = new(NestedNameSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_nestedNameSpecifier

	return p
}

func (s *NestedNameSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedNameSpecifierContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NestedNameSpecifierContext) TheTypeName() ITheTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *NestedNameSpecifierContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *NestedNameSpecifierContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *NestedNameSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *NestedNameSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NestedNameSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *NestedNameSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *NestedNameSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedNameSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedNameSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNestedNameSpecifier(s)
	}
}

func (s *NestedNameSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNestedNameSpecifier(s)
	}
}

func (p *CPP14Parser) NestedNameSpecifier() (localctx INestedNameSpecifierContext) {
	return p.nestedNameSpecifier(0)
}

func (p *CPP14Parser) nestedNameSpecifier(_p int) (localctx INestedNameSpecifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNestedNameSpecifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INestedNameSpecifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 10
	p.EnterRecursionRule(localctx, 10, CPP14ParserRULE_nestedNameSpecifier, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(427)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(424)
			p.TheTypeName()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(425)
			p.NamespaceName()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(426)
			p.DecltypeSpecifier()
		}

	}
	{
		p.SetState(429)
		p.Match(CPP14ParserDoublecolon)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNestedNameSpecifierContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_nestedNameSpecifier)
			p.SetState(431)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			p.SetState(437)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(432)
					p.Match(CPP14ParserIdentifier)
				}

			case 2:
				p.SetState(434)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CPP14ParserTemplate {
					{
						p.SetState(433)
						p.Match(CPP14ParserTemplate)
					}

				}
				{
					p.SetState(436)
					p.SimpleTemplateId()
				}

			}
			{
				p.SetState(439)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		p.SetState(444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext())
	}

	return localctx
}

// ILambdaExpressionContext is an interface to support dynamic dispatch.
type ILambdaExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaExpressionContext differentiates from other interfaces.
	IsLambdaExpressionContext()
}

type LambdaExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaExpressionContext() *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaExpression
	return p
}

func (*LambdaExpressionContext) IsLambdaExpressionContext() {}

func NewLambdaExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaExpression

	return p
}

func (s *LambdaExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaExpressionContext) LambdaIntroducer() ILambdaIntroducerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaIntroducerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaIntroducerContext)
}

func (s *LambdaExpressionContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *LambdaExpressionContext) LambdaDeclarator() ILambdaDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaDeclaratorContext)
}

func (s *LambdaExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLambdaExpression(s)
	}
}

func (s *LambdaExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLambdaExpression(s)
	}
}

func (p *CPP14Parser) LambdaExpression() (localctx ILambdaExpressionContext) {
	localctx = NewLambdaExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CPP14ParserRULE_lambdaExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(445)
		p.LambdaIntroducer()
	}
	p.SetState(447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen {
		{
			p.SetState(446)
			p.LambdaDeclarator()
		}

	}
	{
		p.SetState(449)
		p.CompoundStatement()
	}

	return localctx
}

// ILambdaIntroducerContext is an interface to support dynamic dispatch.
type ILambdaIntroducerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaIntroducerContext differentiates from other interfaces.
	IsLambdaIntroducerContext()
}

type LambdaIntroducerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaIntroducerContext() *LambdaIntroducerContext {
	var p = new(LambdaIntroducerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaIntroducer
	return p
}

func (*LambdaIntroducerContext) IsLambdaIntroducerContext() {}

func NewLambdaIntroducerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaIntroducerContext {
	var p = new(LambdaIntroducerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaIntroducer

	return p
}

func (s *LambdaIntroducerContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaIntroducerContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *LambdaIntroducerContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *LambdaIntroducerContext) LambdaCapture() ILambdaCaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaCaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaCaptureContext)
}

func (s *LambdaIntroducerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaIntroducerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaIntroducerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLambdaIntroducer(s)
	}
}

func (s *LambdaIntroducerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLambdaIntroducer(s)
	}
}

func (p *CPP14Parser) LambdaIntroducer() (localctx ILambdaIntroducerContext) {
	localctx = NewLambdaIntroducerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CPP14ParserRULE_lambdaIntroducer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(451)
		p.Match(CPP14ParserLeftBracket)
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserThis || _la == CPP14ParserAnd || _la == CPP14ParserAssign || _la == CPP14ParserIdentifier {
		{
			p.SetState(452)
			p.LambdaCapture()
		}

	}
	{
		p.SetState(455)
		p.Match(CPP14ParserRightBracket)
	}

	return localctx
}

// ILambdaCaptureContext is an interface to support dynamic dispatch.
type ILambdaCaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaCaptureContext differentiates from other interfaces.
	IsLambdaCaptureContext()
}

type LambdaCaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaCaptureContext() *LambdaCaptureContext {
	var p = new(LambdaCaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaCapture
	return p
}

func (*LambdaCaptureContext) IsLambdaCaptureContext() {}

func NewLambdaCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaCaptureContext {
	var p = new(LambdaCaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaCapture

	return p
}

func (s *LambdaCaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaCaptureContext) CaptureList() ICaptureListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaptureListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaptureListContext)
}

func (s *LambdaCaptureContext) CaptureDefault() ICaptureDefaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaptureDefaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaptureDefaultContext)
}

func (s *LambdaCaptureContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *LambdaCaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaCaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaCaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLambdaCapture(s)
	}
}

func (s *LambdaCaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLambdaCapture(s)
	}
}

func (p *CPP14Parser) LambdaCapture() (localctx ILambdaCaptureContext) {
	localctx = NewLambdaCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CPP14ParserRULE_lambdaCapture)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(457)
			p.CaptureList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(458)
			p.CaptureDefault()
		}
		p.SetState(461)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(459)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(460)
				p.CaptureList()
			}

		}

	}

	return localctx
}

// ICaptureDefaultContext is an interface to support dynamic dispatch.
type ICaptureDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaptureDefaultContext differentiates from other interfaces.
	IsCaptureDefaultContext()
}

type CaptureDefaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureDefaultContext() *CaptureDefaultContext {
	var p = new(CaptureDefaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureDefault
	return p
}

func (*CaptureDefaultContext) IsCaptureDefaultContext() {}

func NewCaptureDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureDefaultContext {
	var p = new(CaptureDefaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_captureDefault

	return p
}

func (s *CaptureDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureDefaultContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *CaptureDefaultContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *CaptureDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCaptureDefault(s)
	}
}

func (s *CaptureDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCaptureDefault(s)
	}
}

func (p *CPP14Parser) CaptureDefault() (localctx ICaptureDefaultContext) {
	localctx = NewCaptureDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, CPP14ParserRULE_captureDefault)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(465)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserAnd || _la == CPP14ParserAssign) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICaptureListContext is an interface to support dynamic dispatch.
type ICaptureListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaptureListContext differentiates from other interfaces.
	IsCaptureListContext()
}

type CaptureListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureListContext() *CaptureListContext {
	var p = new(CaptureListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureList
	return p
}

func (*CaptureListContext) IsCaptureListContext() {}

func NewCaptureListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureListContext {
	var p = new(CaptureListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_captureList

	return p
}

func (s *CaptureListContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureListContext) AllCapture() []ICaptureContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaptureContext)(nil)).Elem())
	var tst = make([]ICaptureContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaptureContext)
		}
	}

	return tst
}

func (s *CaptureListContext) Capture(i int) ICaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaptureContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaptureContext)
}

func (s *CaptureListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *CaptureListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *CaptureListContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *CaptureListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCaptureList(s)
	}
}

func (s *CaptureListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCaptureList(s)
	}
}

func (p *CPP14Parser) CaptureList() (localctx ICaptureListContext) {
	localctx = NewCaptureListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, CPP14ParserRULE_captureList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(467)
		p.Capture()
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(468)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(469)
			p.Capture()
		}

		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(475)
			p.Match(CPP14ParserEllipsis)
		}

	}

	return localctx
}

// ICaptureContext is an interface to support dynamic dispatch.
type ICaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaptureContext differentiates from other interfaces.
	IsCaptureContext()
}

type CaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureContext() *CaptureContext {
	var p = new(CaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_capture
	return p
}

func (*CaptureContext) IsCaptureContext() {}

func NewCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureContext {
	var p = new(CaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_capture

	return p
}

func (s *CaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureContext) SimpleCapture() ISimpleCaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleCaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleCaptureContext)
}

func (s *CaptureContext) Initcapture() IInitcaptureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitcaptureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitcaptureContext)
}

func (s *CaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCapture(s)
	}
}

func (s *CaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCapture(s)
	}
}

func (p *CPP14Parser) Capture() (localctx ICaptureContext) {
	localctx = NewCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, CPP14ParserRULE_capture)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(480)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(478)
			p.SimpleCapture()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(479)
			p.Initcapture()
		}

	}

	return localctx
}

// ISimpleCaptureContext is an interface to support dynamic dispatch.
type ISimpleCaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleCaptureContext differentiates from other interfaces.
	IsSimpleCaptureContext()
}

type SimpleCaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleCaptureContext() *SimpleCaptureContext {
	var p = new(SimpleCaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleCapture
	return p
}

func (*SimpleCaptureContext) IsSimpleCaptureContext() {}

func NewSimpleCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleCaptureContext {
	var p = new(SimpleCaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleCapture

	return p
}

func (s *SimpleCaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleCaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *SimpleCaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *SimpleCaptureContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *SimpleCaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleCaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleCaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleCapture(s)
	}
}

func (s *SimpleCaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleCapture(s)
	}
}

func (p *CPP14Parser) SimpleCapture() (localctx ISimpleCaptureContext) {
	localctx = NewSimpleCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, CPP14ParserRULE_simpleCapture)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(487)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAnd, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAnd {
			{
				p.SetState(482)
				p.Match(CPP14ParserAnd)
			}

		}
		{
			p.SetState(485)
			p.Match(CPP14ParserIdentifier)
		}

	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(486)
			p.Match(CPP14ParserThis)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitcaptureContext is an interface to support dynamic dispatch.
type IInitcaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitcaptureContext differentiates from other interfaces.
	IsInitcaptureContext()
}

type InitcaptureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitcaptureContext() *InitcaptureContext {
	var p = new(InitcaptureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initcapture
	return p
}

func (*InitcaptureContext) IsInitcaptureContext() {}

func NewInitcaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitcaptureContext {
	var p = new(InitcaptureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initcapture

	return p
}

func (s *InitcaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *InitcaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *InitcaptureContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitcaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *InitcaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitcaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitcaptureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitcapture(s)
	}
}

func (s *InitcaptureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitcapture(s)
	}
}

func (p *CPP14Parser) Initcapture() (localctx IInitcaptureContext) {
	localctx = NewInitcaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, CPP14ParserRULE_initcapture)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAnd {
		{
			p.SetState(489)
			p.Match(CPP14ParserAnd)
		}

	}
	{
		p.SetState(492)
		p.Match(CPP14ParserIdentifier)
	}
	{
		p.SetState(493)
		p.Initializer()
	}

	return localctx
}

// ILambdaDeclaratorContext is an interface to support dynamic dispatch.
type ILambdaDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaDeclaratorContext differentiates from other interfaces.
	IsLambdaDeclaratorContext()
}

type LambdaDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaDeclaratorContext() *LambdaDeclaratorContext {
	var p = new(LambdaDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaDeclarator
	return p
}

func (*LambdaDeclaratorContext) IsLambdaDeclaratorContext() {}

func NewLambdaDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaDeclaratorContext {
	var p = new(LambdaDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaDeclarator

	return p
}

func (s *LambdaDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *LambdaDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *LambdaDeclaratorContext) ParameterDeclarationClause() IParameterDeclarationClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationClauseContext)
}

func (s *LambdaDeclaratorContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *LambdaDeclaratorContext) ExceptionSpecification() IExceptionSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptionSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptionSpecificationContext)
}

func (s *LambdaDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *LambdaDeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingReturnTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *LambdaDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLambdaDeclarator(s)
	}
}

func (s *LambdaDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLambdaDeclarator(s)
	}
}

func (p *CPP14Parser) LambdaDeclarator() (localctx ILambdaDeclaratorContext) {
	localctx = NewLambdaDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, CPP14ParserRULE_lambdaDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(495)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserAlignas)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDouble))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserExplicit-33))|(1<<(CPP14ParserExtern-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserFriend-33))|(1<<(CPP14ParserInline-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserMutable-33))|(1<<(CPP14ParserRegister-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserStatic-33)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(CPP14ParserStruct-66))|(1<<(CPP14ParserThread_local-66))|(1<<(CPP14ParserTypedef-66))|(1<<(CPP14ParserTypename_-66))|(1<<(CPP14ParserUnion-66))|(1<<(CPP14ParserUnsigned-66))|(1<<(CPP14ParserVirtual-66))|(1<<(CPP14ParserVoid-66))|(1<<(CPP14ParserVolatile-66))|(1<<(CPP14ParserWchar-66))|(1<<(CPP14ParserLeftBracket-66)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		{
			p.SetState(496)
			p.ParameterDeclarationClause()
		}

	}
	{
		p.SetState(499)
		p.Match(CPP14ParserRightParen)
	}
	p.SetState(501)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserMutable {
		{
			p.SetState(500)
			p.Match(CPP14ParserMutable)
		}

	}
	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserNoexcept || _la == CPP14ParserThrow {
		{
			p.SetState(503)
			p.ExceptionSpecification()
		}

	}
	p.SetState(507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(506)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(510)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserArrow {
		{
			p.SetState(509)
			p.TrailingReturnType()
		}

	}

	return localctx
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_postfixExpression
	return p
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixExpressionContext) SimpleTypeSpecifier() ISimpleTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSpecifierContext)
}

func (s *PostfixExpressionContext) TypeNameSpecifier() ITypeNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameSpecifierContext)
}

func (s *PostfixExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PostfixExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PostfixExpressionContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *PostfixExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PostfixExpressionContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *PostfixExpressionContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *PostfixExpressionContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *PostfixExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixExpressionContext) Dynamic_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDynamic_cast, 0)
}

func (s *PostfixExpressionContext) Static_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_cast, 0)
}

func (s *PostfixExpressionContext) Reinterpret_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReinterpret_cast, 0)
}

func (s *PostfixExpressionContext) Const_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst_cast, 0)
}

func (s *PostfixExpressionContext) TypeIdOfTheTypeId() ITypeIdOfTheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdOfTheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdOfTheTypeIdContext)
}

func (s *PostfixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostfixExpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *PostfixExpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *PostfixExpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDot, 0)
}

func (s *PostfixExpressionContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *PostfixExpressionContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *PostfixExpressionContext) PseudoDestructorName() IPseudoDestructorNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPseudoDestructorNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPseudoDestructorNameContext)
}

func (s *PostfixExpressionContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PostfixExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *PostfixExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPostfixExpression(s)
	}
}

func (s *PostfixExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPostfixExpression(s)
	}
}

func (p *CPP14Parser) PostfixExpression() (localctx IPostfixExpressionContext) {
	return p.postfixExpression(0)
}

func (p *CPP14Parser) postfixExpression(_p int) (localctx IPostfixExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPostfixExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, CPP14ParserRULE_postfixExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(513)
			p.PrimaryExpression()
		}

	case 2:
		p.SetState(516)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
			{
				p.SetState(514)
				p.SimpleTypeSpecifier()
			}

		case CPP14ParserTypename_:
			{
				p.SetState(515)
				p.TypeNameSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(524)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserLeftParen:
			{
				p.SetState(518)
				p.Match(CPP14ParserLeftParen)
			}
			p.SetState(520)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserLeftBrace-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
				{
					p.SetState(519)
					p.ExpressionList()
				}

			}
			{
				p.SetState(522)
				p.Match(CPP14ParserRightParen)
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(523)
				p.BracedInitList()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		{
			p.SetState(526)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserConst_cast || _la == CPP14ParserDynamic_cast || _la == CPP14ParserReinterpret_cast || _la == CPP14ParserStatic_cast) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(527)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(528)
			p.TheTypeId()
		}
		{
			p.SetState(529)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(530)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(531)
			p.Expression()
		}
		{
			p.SetState(532)
			p.Match(CPP14ParserRightParen)
		}

	case 4:
		{
			p.SetState(534)
			p.TypeIdOfTheTypeId()
		}
		{
			p.SetState(535)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(536)
				p.Expression()
			}

		case 2:
			{
				p.SetState(537)
				p.TheTypeId()
			}

		}
		{
			p.SetState(540)
			p.Match(CPP14ParserRightParen)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(571)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(569)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(544)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(545)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(548)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
					{
						p.SetState(546)
						p.Expression()
					}

				case CPP14ParserLeftBrace:
					{
						p.SetState(547)
						p.BracedInitList()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(550)
					p.Match(CPP14ParserRightBracket)
				}

			case 2:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(552)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(553)
					p.Match(CPP14ParserLeftParen)
				}
				p.SetState(555)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserLeftBrace-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
					{
						p.SetState(554)
						p.ExpressionList()
					}

				}
				{
					p.SetState(557)
					p.Match(CPP14ParserRightParen)
				}

			case 3:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(558)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(559)
					_la = p.GetTokenStream().LA(1)

					if !(_la == CPP14ParserArrow || _la == CPP14ParserDot) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(565)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
				case 1:
					p.SetState(561)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == CPP14ParserTemplate {
						{
							p.SetState(560)
							p.Match(CPP14ParserTemplate)
						}

					}
					{
						p.SetState(563)
						p.IdExpression()
					}

				case 2:
					{
						p.SetState(564)
						p.PseudoDestructorName()
					}

				}

			case 4:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(567)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(568)
					_la = p.GetTokenStream().LA(1)

					if !(_la == CPP14ParserPlusPlus || _la == CPP14ParserMinusMinus) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		}
		p.SetState(573)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeIdOfTheTypeIdContext is an interface to support dynamic dispatch.
type ITypeIdOfTheTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdOfTheTypeIdContext differentiates from other interfaces.
	IsTypeIdOfTheTypeIdContext()
}

type TypeIdOfTheTypeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdOfTheTypeIdContext() *TypeIdOfTheTypeIdContext {
	var p = new(TypeIdOfTheTypeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdOfTheTypeId
	return p
}

func (*TypeIdOfTheTypeIdContext) IsTypeIdOfTheTypeIdContext() {}

func NewTypeIdOfTheTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdOfTheTypeIdContext {
	var p = new(TypeIdOfTheTypeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeIdOfTheTypeId

	return p
}

func (s *TypeIdOfTheTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdOfTheTypeIdContext) Typeid_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypeid_, 0)
}

func (s *TypeIdOfTheTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdOfTheTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdOfTheTypeIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeIdOfTheTypeId(s)
	}
}

func (s *TypeIdOfTheTypeIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeIdOfTheTypeId(s)
	}
}

func (p *CPP14Parser) TypeIdOfTheTypeId() (localctx ITypeIdOfTheTypeIdContext) {
	localctx = NewTypeIdOfTheTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, CPP14ParserRULE_typeIdOfTheTypeId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(574)
		p.Match(CPP14ParserTypeid_)
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) InitializerList() IInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (p *CPP14Parser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, CPP14ParserRULE_expressionList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(576)
		p.InitializerList()
	}

	return localctx
}

// IPseudoDestructorNameContext is an interface to support dynamic dispatch.
type IPseudoDestructorNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPseudoDestructorNameContext differentiates from other interfaces.
	IsPseudoDestructorNameContext()
}

type PseudoDestructorNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPseudoDestructorNameContext() *PseudoDestructorNameContext {
	var p = new(PseudoDestructorNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pseudoDestructorName
	return p
}

func (*PseudoDestructorNameContext) IsPseudoDestructorNameContext() {}

func NewPseudoDestructorNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PseudoDestructorNameContext {
	var p = new(PseudoDestructorNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pseudoDestructorName

	return p
}

func (s *PseudoDestructorNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PseudoDestructorNameContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *PseudoDestructorNameContext) AllTheTypeName() []ITheTypeNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITheTypeNameContext)(nil)).Elem())
	var tst = make([]ITheTypeNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITheTypeNameContext)
		}
	}

	return tst
}

func (s *PseudoDestructorNameContext) TheTypeName(i int) ITheTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *PseudoDestructorNameContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *PseudoDestructorNameContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *PseudoDestructorNameContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PseudoDestructorNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *PseudoDestructorNameContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *PseudoDestructorNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PseudoDestructorNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PseudoDestructorNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPseudoDestructorName(s)
	}
}

func (s *PseudoDestructorNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPseudoDestructorName(s)
	}
}

func (p *CPP14Parser) PseudoDestructorName() (localctx IPseudoDestructorNameContext) {
	localctx = NewPseudoDestructorNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, CPP14ParserRULE_pseudoDestructorName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(579)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(578)
				p.nestedNameSpecifier(0)
			}

		}
		p.SetState(584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(581)
				p.TheTypeName()
			}
			{
				p.SetState(582)
				p.Match(CPP14ParserDoublecolon)
			}

		}
		{
			p.SetState(586)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(587)
			p.TheTypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(588)
			p.nestedNameSpecifier(0)
		}
		{
			p.SetState(589)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(590)
			p.SimpleTemplateId()
		}
		{
			p.SetState(591)
			p.Match(CPP14ParserDoublecolon)
		}
		{
			p.SetState(592)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(593)
			p.TheTypeName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(595)
			p.Match(CPP14ParserTilde)
		}
		{
			p.SetState(596)
			p.DecltypeSpecifier()
		}

	}

	return localctx
}

// IUnaryExpressionContext is an interface to support dynamic dispatch.
type IUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpressionContext differentiates from other interfaces.
	IsUnaryExpressionContext()
}

type UnaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionContext() *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryExpression
	return p
}

func (*UnaryExpressionContext) IsUnaryExpressionContext() {}

func NewUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryExpression

	return p
}

func (s *UnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *UnaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *UnaryExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *UnaryExpressionContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *UnaryExpressionContext) Sizeof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSizeof, 0)
}

func (s *UnaryExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *UnaryExpressionContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *UnaryExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *UnaryExpressionContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *UnaryExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnaryExpressionContext) Alignof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignof, 0)
}

func (s *UnaryExpressionContext) NoExceptExpression() INoExceptExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoExceptExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoExceptExpressionContext)
}

func (s *UnaryExpressionContext) NewExpression() INewExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewExpressionContext)
}

func (s *UnaryExpressionContext) DeleteExpression() IDeleteExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteExpressionContext)
}

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitUnaryExpression(s)
	}
}

func (p *CPP14Parser) UnaryExpression() (localctx IUnaryExpressionContext) {
	localctx = NewUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CPP14ParserRULE_unaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(599)
			p.postfixExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(604)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserPlusPlus:
			{
				p.SetState(600)
				p.Match(CPP14ParserPlusPlus)
			}

		case CPP14ParserMinusMinus:
			{
				p.SetState(601)
				p.Match(CPP14ParserMinusMinus)
			}

		case CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot:
			{
				p.SetState(602)
				p.UnaryOperator()
			}

		case CPP14ParserSizeof:
			{
				p.SetState(603)
				p.Match(CPP14ParserSizeof)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(606)
			p.UnaryExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(607)
			p.Match(CPP14ParserSizeof)
		}
		p.SetState(616)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserLeftParen:
			{
				p.SetState(608)
				p.Match(CPP14ParserLeftParen)
			}
			{
				p.SetState(609)
				p.TheTypeId()
			}
			{
				p.SetState(610)
				p.Match(CPP14ParserRightParen)
			}

		case CPP14ParserEllipsis:
			{
				p.SetState(612)
				p.Match(CPP14ParserEllipsis)
			}
			{
				p.SetState(613)
				p.Match(CPP14ParserLeftParen)
			}
			{
				p.SetState(614)
				p.Match(CPP14ParserIdentifier)
			}
			{
				p.SetState(615)
				p.Match(CPP14ParserRightParen)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(618)
			p.Match(CPP14ParserAlignof)
		}
		{
			p.SetState(619)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(620)
			p.TheTypeId()
		}
		{
			p.SetState(621)
			p.Match(CPP14ParserRightParen)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(623)
			p.NoExceptExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(624)
			p.NewExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(625)
			p.DeleteExpression()
		}

	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *UnaryOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *UnaryOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *UnaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *UnaryOperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnaryOperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *UnaryOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNot, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterUnaryOperator(s)
	}
}

func (s *UnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitUnaryOperator(s)
	}
}

func (p *CPP14Parser) UnaryOperator() (localctx IUnaryOperatorContext) {
	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CPP14ParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(628)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-91)&-(0x1f+1)) == 0 && ((1<<uint((_la-91)))&((1<<(CPP14ParserPlus-91))|(1<<(CPP14ParserMinus-91))|(1<<(CPP14ParserStar-91))|(1<<(CPP14ParserAnd-91))|(1<<(CPP14ParserOr-91))|(1<<(CPP14ParserTilde-91))|(1<<(CPP14ParserNot-91)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INewExpressionContext is an interface to support dynamic dispatch.
type INewExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewExpressionContext differentiates from other interfaces.
	IsNewExpressionContext()
}

type NewExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewExpressionContext() *NewExpressionContext {
	var p = new(NewExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newExpression
	return p
}

func (*NewExpressionContext) IsNewExpressionContext() {}

func NewNewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewExpressionContext {
	var p = new(NewExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newExpression

	return p
}

func (s *NewExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NewExpressionContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *NewExpressionContext) NewTypeId() INewTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewTypeIdContext)
}

func (s *NewExpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NewExpressionContext) NewPlacement() INewPlacementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewPlacementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewPlacementContext)
}

func (s *NewExpressionContext) NewInitializer() INewInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewInitializerContext)
}

func (s *NewExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewExpressionContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *NewExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNewExpression(s)
	}
}

func (s *NewExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNewExpression(s)
	}
}

func (p *CPP14Parser) NewExpression() (localctx INewExpressionContext) {
	localctx = NewNewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CPP14ParserRULE_newExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(631)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDoublecolon {
		{
			p.SetState(630)
			p.Match(CPP14ParserDoublecolon)
		}

	}
	{
		p.SetState(633)
		p.Match(CPP14ParserNew)
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(634)
			p.NewPlacement()
		}

	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		{
			p.SetState(637)
			p.NewTypeId()
		}

	case CPP14ParserLeftParen:
		{
			p.SetState(638)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(639)
			p.TheTypeId()
		}
		{
			p.SetState(640)
			p.Match(CPP14ParserRightParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen || _la == CPP14ParserLeftBrace {
		{
			p.SetState(644)
			p.NewInitializer()
		}

	}

	return localctx
}

// INewPlacementContext is an interface to support dynamic dispatch.
type INewPlacementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewPlacementContext differentiates from other interfaces.
	IsNewPlacementContext()
}

type NewPlacementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewPlacementContext() *NewPlacementContext {
	var p = new(NewPlacementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newPlacement
	return p
}

func (*NewPlacementContext) IsNewPlacementContext() {}

func NewNewPlacementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewPlacementContext {
	var p = new(NewPlacementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newPlacement

	return p
}

func (s *NewPlacementContext) GetParser() antlr.Parser { return s.parser }

func (s *NewPlacementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewPlacementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NewPlacementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewPlacementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewPlacementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewPlacementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNewPlacement(s)
	}
}

func (s *NewPlacementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNewPlacement(s)
	}
}

func (p *CPP14Parser) NewPlacement() (localctx INewPlacementContext) {
	localctx = NewNewPlacementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, CPP14ParserRULE_newPlacement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(648)
		p.ExpressionList()
	}
	{
		p.SetState(649)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// INewTypeIdContext is an interface to support dynamic dispatch.
type INewTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewTypeIdContext differentiates from other interfaces.
	IsNewTypeIdContext()
}

type NewTypeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewTypeIdContext() *NewTypeIdContext {
	var p = new(NewTypeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newTypeId
	return p
}

func (*NewTypeIdContext) IsNewTypeIdContext() {}

func NewNewTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewTypeIdContext {
	var p = new(NewTypeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newTypeId

	return p
}

func (s *NewTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *NewTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *NewTypeIdContext) NewDeclarator() INewDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewDeclaratorContext)
}

func (s *NewTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewTypeIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNewTypeId(s)
	}
}

func (s *NewTypeIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNewTypeId(s)
	}
}

func (p *CPP14Parser) NewTypeId() (localctx INewTypeIdContext) {
	localctx = NewNewTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CPP14ParserRULE_newTypeId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(651)
		p.TypeSpecifierSeq()
	}
	p.SetState(653)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(652)
			p.NewDeclarator()
		}

	}

	return localctx
}

// INewDeclaratorContext is an interface to support dynamic dispatch.
type INewDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewDeclaratorContext differentiates from other interfaces.
	IsNewDeclaratorContext()
}

type NewDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewDeclaratorContext() *NewDeclaratorContext {
	var p = new(NewDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newDeclarator
	return p
}

func (*NewDeclaratorContext) IsNewDeclaratorContext() {}

func NewNewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewDeclaratorContext {
	var p = new(NewDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newDeclarator

	return p
}

func (s *NewDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NewDeclaratorContext) PointerOperator() IPointerOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *NewDeclaratorContext) NewDeclarator() INewDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INewDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INewDeclaratorContext)
}

func (s *NewDeclaratorContext) NoPointerNewDeclarator() INoPointerNewDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerNewDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerNewDeclaratorContext)
}

func (s *NewDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNewDeclarator(s)
	}
}

func (s *NewDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNewDeclarator(s)
	}
}

func (p *CPP14Parser) NewDeclarator() (localctx INewDeclaratorContext) {
	localctx = NewNewDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CPP14ParserRULE_newDeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(660)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(655)
			p.PointerOperator()
		}
		p.SetState(657)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(656)
				p.NewDeclarator()
			}

		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(659)
			p.noPointerNewDeclarator(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INoPointerNewDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerNewDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoPointerNewDeclaratorContext differentiates from other interfaces.
	IsNoPointerNewDeclaratorContext()
}

type NoPointerNewDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerNewDeclaratorContext() *NoPointerNewDeclaratorContext {
	var p = new(NoPointerNewDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerNewDeclarator
	return p
}

func (*NoPointerNewDeclaratorContext) IsNoPointerNewDeclaratorContext() {}

func NewNoPointerNewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerNewDeclaratorContext {
	var p = new(NoPointerNewDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerNewDeclarator

	return p
}

func (s *NoPointerNewDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerNewDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerNewDeclaratorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoPointerNewDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerNewDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerNewDeclaratorContext) NoPointerNewDeclarator() INoPointerNewDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerNewDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerNewDeclaratorContext)
}

func (s *NoPointerNewDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerNewDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerNewDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerNewDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoPointerNewDeclarator(s)
	}
}

func (s *NoPointerNewDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoPointerNewDeclarator(s)
	}
}

func (p *CPP14Parser) NoPointerNewDeclarator() (localctx INoPointerNewDeclaratorContext) {
	return p.noPointerNewDeclarator(0)
}

func (p *CPP14Parser) noPointerNewDeclarator(_p int) (localctx INoPointerNewDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoPointerNewDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerNewDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 50
	p.EnterRecursionRule(localctx, 50, CPP14ParserRULE_noPointerNewDeclarator, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(663)
		p.Match(CPP14ParserLeftBracket)
	}
	{
		p.SetState(664)
		p.Expression()
	}
	{
		p.SetState(665)
		p.Match(CPP14ParserRightBracket)
	}
	p.SetState(667)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(666)
			p.AttributeSpecifierSeq()
		}

	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(678)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerNewDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerNewDeclarator)
			p.SetState(669)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(670)
				p.Match(CPP14ParserLeftBracket)
			}
			{
				p.SetState(671)
				p.ConstantExpression()
			}
			{
				p.SetState(672)
				p.Match(CPP14ParserRightBracket)
			}
			p.SetState(674)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(673)
					p.AttributeSpecifierSeq()
				}

			}

		}
		p.SetState(680)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())
	}

	return localctx
}

// INewInitializerContext is an interface to support dynamic dispatch.
type INewInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNewInitializerContext differentiates from other interfaces.
	IsNewInitializerContext()
}

type NewInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewInitializerContext() *NewInitializerContext {
	var p = new(NewInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_newInitializer
	return p
}

func (*NewInitializerContext) IsNewInitializerContext() {}

func NewNewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewInitializerContext {
	var p = new(NewInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newInitializer

	return p
}

func (s *NewInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *NewInitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewInitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewInitializerContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NewInitializerContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *NewInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNewInitializer(s)
	}
}

func (s *NewInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNewInitializer(s)
	}
}

func (p *CPP14Parser) NewInitializer() (localctx INewInitializerContext) {
	localctx = NewNewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, CPP14ParserRULE_newInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(687)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(681)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserLeftBrace-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
			{
				p.SetState(682)
				p.ExpressionList()
			}

		}
		{
			p.SetState(685)
			p.Match(CPP14ParserRightParen)
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(686)
			p.BracedInitList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeleteExpressionContext is an interface to support dynamic dispatch.
type IDeleteExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteExpressionContext differentiates from other interfaces.
	IsDeleteExpressionContext()
}

type DeleteExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteExpressionContext() *DeleteExpressionContext {
	var p = new(DeleteExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_deleteExpression
	return p
}

func (*DeleteExpressionContext) IsDeleteExpressionContext() {}

func NewDeleteExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteExpressionContext {
	var p = new(DeleteExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_deleteExpression

	return p
}

func (s *DeleteExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteExpressionContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *DeleteExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *DeleteExpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *DeleteExpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *DeleteExpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *DeleteExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeleteExpression(s)
	}
}

func (s *DeleteExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeleteExpression(s)
	}
}

func (p *CPP14Parser) DeleteExpression() (localctx IDeleteExpressionContext) {
	localctx = NewDeleteExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CPP14ParserRULE_deleteExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDoublecolon {
		{
			p.SetState(689)
			p.Match(CPP14ParserDoublecolon)
		}

	}
	{
		p.SetState(692)
		p.Match(CPP14ParserDelete)
	}
	p.SetState(695)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(693)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(694)
			p.Match(CPP14ParserRightBracket)
		}

	}
	{
		p.SetState(697)
		p.CastExpression()
	}

	return localctx
}

// INoExceptExpressionContext is an interface to support dynamic dispatch.
type INoExceptExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoExceptExpressionContext differentiates from other interfaces.
	IsNoExceptExpressionContext()
}

type NoExceptExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoExceptExpressionContext() *NoExceptExpressionContext {
	var p = new(NoExceptExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noExceptExpression
	return p
}

func (*NoExceptExpressionContext) IsNoExceptExpressionContext() {}

func NewNoExceptExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoExceptExpressionContext {
	var p = new(NoExceptExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noExceptExpression

	return p
}

func (s *NoExceptExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NoExceptExpressionContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoExceptExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoExceptExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoExceptExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoExceptExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoExceptExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoExceptExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoExceptExpression(s)
	}
}

func (s *NoExceptExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoExceptExpression(s)
	}
}

func (p *CPP14Parser) NoExceptExpression() (localctx INoExceptExpressionContext) {
	localctx = NewNoExceptExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, CPP14ParserRULE_noExceptExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(699)
		p.Match(CPP14ParserNoexcept)
	}
	{
		p.SetState(700)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(701)
		p.Expression()
	}
	{
		p.SetState(702)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// ICastExpressionContext is an interface to support dynamic dispatch.
type ICastExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastExpressionContext differentiates from other interfaces.
	IsCastExpressionContext()
}

type CastExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastExpressionContext() *CastExpressionContext {
	var p = new(CastExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_castExpression
	return p
}

func (*CastExpressionContext) IsCastExpressionContext() {}

func NewCastExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastExpressionContext {
	var p = new(CastExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_castExpression

	return p
}

func (s *CastExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *CastExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *CastExpressionContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *CastExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *CastExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCastExpression(s)
	}
}

func (s *CastExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCastExpression(s)
	}
}

func (p *CPP14Parser) CastExpression() (localctx ICastExpressionContext) {
	localctx = NewCastExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CPP14ParserRULE_castExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(704)
			p.UnaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(705)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(706)
			p.TheTypeId()
		}
		{
			p.SetState(707)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(708)
			p.CastExpression()
		}

	}

	return localctx
}

// IPointerMemberExpressionContext is an interface to support dynamic dispatch.
type IPointerMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerMemberExpressionContext differentiates from other interfaces.
	IsPointerMemberExpressionContext()
}

type PointerMemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerMemberExpressionContext() *PointerMemberExpressionContext {
	var p = new(PointerMemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerMemberExpression
	return p
}

func (*PointerMemberExpressionContext) IsPointerMemberExpressionContext() {}

func NewPointerMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerMemberExpressionContext {
	var p = new(PointerMemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerMemberExpression

	return p
}

func (s *PointerMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerMemberExpressionContext) AllCastExpression() []ICastExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem())
	var tst = make([]ICastExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICastExpressionContext)
		}
	}

	return tst
}

func (s *PointerMemberExpressionContext) CastExpression(i int) ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *PointerMemberExpressionContext) AllDotStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserDotStar)
}

func (s *PointerMemberExpressionContext) DotStar(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserDotStar, i)
}

func (s *PointerMemberExpressionContext) AllArrowStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserArrowStar)
}

func (s *PointerMemberExpressionContext) ArrowStar(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, i)
}

func (s *PointerMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerMemberExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPointerMemberExpression(s)
	}
}

func (s *PointerMemberExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPointerMemberExpression(s)
	}
}

func (p *CPP14Parser) PointerMemberExpression() (localctx IPointerMemberExpressionContext) {
	localctx = NewPointerMemberExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CPP14ParserRULE_pointerMemberExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(712)
		p.CastExpression()
	}
	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserArrowStar || _la == CPP14ParserDotStar {
		{
			p.SetState(713)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserArrowStar || _la == CPP14ParserDotStar) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(714)
			p.CastExpression()
		}

		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_multiplicativeExpression
	return p
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) AllPointerMemberExpression() []IPointerMemberExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPointerMemberExpressionContext)(nil)).Elem())
	var tst = make([]IPointerMemberExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPointerMemberExpressionContext)
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) PointerMemberExpression(i int) IPointerMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerMemberExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPointerMemberExpressionContext)
}

func (s *MultiplicativeExpressionContext) AllStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserStar)
}

func (s *MultiplicativeExpressionContext) Star(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, i)
}

func (s *MultiplicativeExpressionContext) AllDiv() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserDiv)
}

func (s *MultiplicativeExpressionContext) Div(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, i)
}

func (s *MultiplicativeExpressionContext) AllMod() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserMod)
}

func (s *MultiplicativeExpressionContext) Mod(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, i)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (p *CPP14Parser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, CPP14ParserRULE_multiplicativeExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(720)
		p.PointerMemberExpression()
	}
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(CPP14ParserStar-93))|(1<<(CPP14ParserDiv-93))|(1<<(CPP14ParserMod-93)))) != 0 {
		{
			p.SetState(721)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(CPP14ParserStar-93))|(1<<(CPP14ParserDiv-93))|(1<<(CPP14ParserMod-93)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(722)
			p.PointerMemberExpression()
		}

		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_additiveExpression
	return p
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) AllMultiplicativeExpression() []IMultiplicativeExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem())
	var tst = make([]IMultiplicativeExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiplicativeExpressionContext)
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) MultiplicativeExpression(i int) IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AllPlus() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserPlus)
}

func (s *AdditiveExpressionContext) Plus(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, i)
}

func (s *AdditiveExpressionContext) AllMinus() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserMinus)
}

func (s *AdditiveExpressionContext) Minus(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, i)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (p *CPP14Parser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, CPP14ParserRULE_additiveExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(728)
		p.MultiplicativeExpression()
	}
	p.SetState(733)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserPlus || _la == CPP14ParserMinus {
		{
			p.SetState(729)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserPlus || _la == CPP14ParserMinus) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(730)
			p.MultiplicativeExpression()
		}

		p.SetState(735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IShiftExpressionContext is an interface to support dynamic dispatch.
type IShiftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpressionContext differentiates from other interfaces.
	IsShiftExpressionContext()
}

type ShiftExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpressionContext() *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftExpression
	return p
}

func (*ShiftExpressionContext) IsShiftExpressionContext() {}

func NewShiftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftExpression

	return p
}

func (s *ShiftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpressionContext) AllAdditiveExpression() []IAdditiveExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem())
	var tst = make([]IAdditiveExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdditiveExpressionContext)
		}
	}

	return tst
}

func (s *ShiftExpressionContext) AdditiveExpression(i int) IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *ShiftExpressionContext) AllShiftOperator() []IShiftOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShiftOperatorContext)(nil)).Elem())
	var tst = make([]IShiftOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShiftOperatorContext)
		}
	}

	return tst
}

func (s *ShiftExpressionContext) ShiftOperator(i int) IShiftOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShiftOperatorContext)
}

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterShiftExpression(s)
	}
}

func (s *ShiftExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitShiftExpression(s)
	}
}

func (p *CPP14Parser) ShiftExpression() (localctx IShiftExpressionContext) {
	localctx = NewShiftExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, CPP14ParserRULE_shiftExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(736)
		p.AdditiveExpression()
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(737)
				p.ShiftOperator()
			}
			{
				p.SetState(738)
				p.AdditiveExpression()
			}

		}
		p.SetState(744)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftOperatorContext is an interface to support dynamic dispatch.
type IShiftOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftOperatorContext differentiates from other interfaces.
	IsShiftOperatorContext()
}

type ShiftOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftOperatorContext() *ShiftOperatorContext {
	var p = new(ShiftOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftOperator
	return p
}

func (*ShiftOperatorContext) IsShiftOperatorContext() {}

func NewShiftOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOperatorContext {
	var p = new(ShiftOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftOperator

	return p
}

func (s *ShiftOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOperatorContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *ShiftOperatorContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *ShiftOperatorContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *ShiftOperatorContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *ShiftOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterShiftOperator(s)
	}
}

func (s *ShiftOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitShiftOperator(s)
	}
}

func (p *CPP14Parser) ShiftOperator() (localctx IShiftOperatorContext) {
	localctx = NewShiftOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, CPP14ParserRULE_shiftOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserGreater:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(745)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(746)
			p.Match(CPP14ParserGreater)
		}

	case CPP14ParserLess:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(747)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(748)
			p.Match(CPP14ParserLess)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRelationalExpressionContext is an interface to support dynamic dispatch.
type IRelationalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpressionContext differentiates from other interfaces.
	IsRelationalExpressionContext()
}

type RelationalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpressionContext() *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_relationalExpression
	return p
}

func (*RelationalExpressionContext) IsRelationalExpressionContext() {}

func NewRelationalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_relationalExpression

	return p
}

func (s *RelationalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpressionContext) AllShiftExpression() []IShiftExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem())
	var tst = make([]IShiftExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShiftExpressionContext)
		}
	}

	return tst
}

func (s *RelationalExpressionContext) ShiftExpression(i int) IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpressionContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *RelationalExpressionContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *RelationalExpressionContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *RelationalExpressionContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *RelationalExpressionContext) AllLessEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLessEqual)
}

func (s *RelationalExpressionContext) LessEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, i)
}

func (s *RelationalExpressionContext) AllGreaterEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreaterEqual)
}

func (s *RelationalExpressionContext) GreaterEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, i)
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterRelationalExpression(s)
	}
}

func (s *RelationalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitRelationalExpression(s)
	}
}

func (p *CPP14Parser) RelationalExpression() (localctx IRelationalExpressionContext) {
	localctx = NewRelationalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CPP14ParserRULE_relationalExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(751)
		p.ShiftExpression()
	}
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(752)
				_la = p.GetTokenStream().LA(1)

				if !(((_la-102)&-(0x1f+1)) == 0 && ((1<<uint((_la-102)))&((1<<(CPP14ParserLess-102))|(1<<(CPP14ParserGreater-102))|(1<<(CPP14ParserLessEqual-102))|(1<<(CPP14ParserGreaterEqual-102)))) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(753)
				p.ShiftExpression()
			}

		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpressionContext is an interface to support dynamic dispatch.
type IEqualityExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpressionContext differentiates from other interfaces.
	IsEqualityExpressionContext()
}

type EqualityExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpressionContext() *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_equalityExpression
	return p
}

func (*EqualityExpressionContext) IsEqualityExpressionContext() {}

func NewEqualityExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_equalityExpression

	return p
}

func (s *EqualityExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpressionContext) AllRelationalExpression() []IRelationalExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem())
	var tst = make([]IRelationalExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationalExpressionContext)
		}
	}

	return tst
}

func (s *EqualityExpressionContext) RelationalExpression(i int) IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *EqualityExpressionContext) AllEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEqual)
}

func (s *EqualityExpressionContext) Equal(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, i)
}

func (s *EqualityExpressionContext) AllNotEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserNotEqual)
}

func (s *EqualityExpressionContext) NotEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, i)
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEqualityExpression(s)
	}
}

func (p *CPP14Parser) EqualityExpression() (localctx IEqualityExpressionContext) {
	localctx = NewEqualityExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, CPP14ParserRULE_equalityExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(759)
		p.RelationalExpression()
	}
	p.SetState(764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserEqual || _la == CPP14ParserNotEqual {
		{
			p.SetState(760)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserEqual || _la == CPP14ParserNotEqual) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(761)
			p.RelationalExpression()
		}

		p.SetState(766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAndExpressionContext is an interface to support dynamic dispatch.
type IAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAndExpressionContext differentiates from other interfaces.
	IsAndExpressionContext()
}

type AndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndExpressionContext() *AndExpressionContext {
	var p = new(AndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_andExpression
	return p
}

func (*AndExpressionContext) IsAndExpressionContext() {}

func NewAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndExpressionContext {
	var p = new(AndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_andExpression

	return p
}

func (s *AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AndExpressionContext) AllEqualityExpression() []IEqualityExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem())
	var tst = make([]IEqualityExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEqualityExpressionContext)
		}
	}

	return tst
}

func (s *AndExpressionContext) EqualityExpression(i int) IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *AndExpressionContext) AllAnd() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserAnd)
}

func (s *AndExpressionContext) And(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, i)
}

func (s *AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAndExpression(s)
	}
}

func (s *AndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAndExpression(s)
	}
}

func (p *CPP14Parser) AndExpression() (localctx IAndExpressionContext) {
	localctx = NewAndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, CPP14ParserRULE_andExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(767)
		p.EqualityExpression()
	}
	p.SetState(772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserAnd {
		{
			p.SetState(768)
			p.Match(CPP14ParserAnd)
		}
		{
			p.SetState(769)
			p.EqualityExpression()
		}

		p.SetState(774)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IExclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IExclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExclusiveOrExpressionContext differentiates from other interfaces.
	IsExclusiveOrExpressionContext()
}

type ExclusiveOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclusiveOrExpressionContext() *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exclusiveOrExpression
	return p
}

func (*ExclusiveOrExpressionContext) IsExclusiveOrExpressionContext() {}

func NewExclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exclusiveOrExpression

	return p
}

func (s *ExclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclusiveOrExpressionContext) AllAndExpression() []IAndExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAndExpressionContext)(nil)).Elem())
	var tst = make([]IAndExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAndExpressionContext)
		}
	}

	return tst
}

func (s *ExclusiveOrExpressionContext) AndExpression(i int) IAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *ExclusiveOrExpressionContext) AllCaret() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserCaret)
}

func (s *ExclusiveOrExpressionContext) Caret(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, i)
}

func (s *ExclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExclusiveOrExpression(s)
	}
}

func (s *ExclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExclusiveOrExpression(s)
	}
}

func (p *CPP14Parser) ExclusiveOrExpression() (localctx IExclusiveOrExpressionContext) {
	localctx = NewExclusiveOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, CPP14ParserRULE_exclusiveOrExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(775)
		p.AndExpression()
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserCaret {
		{
			p.SetState(776)
			p.Match(CPP14ParserCaret)
		}
		{
			p.SetState(777)
			p.AndExpression()
		}

		p.SetState(782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IInclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInclusiveOrExpressionContext differentiates from other interfaces.
	IsInclusiveOrExpressionContext()
}

type InclusiveOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclusiveOrExpressionContext() *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_inclusiveOrExpression
	return p
}

func (*InclusiveOrExpressionContext) IsInclusiveOrExpressionContext() {}

func NewInclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_inclusiveOrExpression

	return p
}

func (s *InclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InclusiveOrExpressionContext) AllExclusiveOrExpression() []IExclusiveOrExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExclusiveOrExpressionContext)(nil)).Elem())
	var tst = make([]IExclusiveOrExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExclusiveOrExpressionContext)
		}
	}

	return tst
}

func (s *InclusiveOrExpressionContext) ExclusiveOrExpression(i int) IExclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclusiveOrExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) AllOr() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserOr)
}

func (s *InclusiveOrExpressionContext) Or(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, i)
}

func (s *InclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInclusiveOrExpression(s)
	}
}

func (s *InclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInclusiveOrExpression(s)
	}
}

func (p *CPP14Parser) InclusiveOrExpression() (localctx IInclusiveOrExpressionContext) {
	localctx = NewInclusiveOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, CPP14ParserRULE_inclusiveOrExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(783)
		p.ExclusiveOrExpression()
	}
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserOr {
		{
			p.SetState(784)
			p.Match(CPP14ParserOr)
		}
		{
			p.SetState(785)
			p.ExclusiveOrExpression()
		}

		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILogicalAndExpressionContext is an interface to support dynamic dispatch.
type ILogicalAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalAndExpressionContext differentiates from other interfaces.
	IsLogicalAndExpressionContext()
}

type LogicalAndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalAndExpressionContext() *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalAndExpression
	return p
}

func (*LogicalAndExpressionContext) IsLogicalAndExpressionContext() {}

func NewLogicalAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalAndExpression

	return p
}

func (s *LogicalAndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalAndExpressionContext) AllInclusiveOrExpression() []IInclusiveOrExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInclusiveOrExpressionContext)(nil)).Elem())
	var tst = make([]IInclusiveOrExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInclusiveOrExpressionContext)
		}
	}

	return tst
}

func (s *LogicalAndExpressionContext) InclusiveOrExpression(i int) IInclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclusiveOrExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *LogicalAndExpressionContext) AllAndAnd() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserAndAnd)
}

func (s *LogicalAndExpressionContext) AndAnd(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, i)
}

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLogicalAndExpression(s)
	}
}

func (s *LogicalAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLogicalAndExpression(s)
	}
}

func (p *CPP14Parser) LogicalAndExpression() (localctx ILogicalAndExpressionContext) {
	localctx = NewLogicalAndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, CPP14ParserRULE_logicalAndExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(791)
		p.InclusiveOrExpression()
	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserAndAnd {
		{
			p.SetState(792)
			p.Match(CPP14ParserAndAnd)
		}
		{
			p.SetState(793)
			p.InclusiveOrExpression()
		}

		p.SetState(798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILogicalOrExpressionContext is an interface to support dynamic dispatch.
type ILogicalOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOrExpressionContext differentiates from other interfaces.
	IsLogicalOrExpressionContext()
}

type LogicalOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOrExpressionContext() *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalOrExpression
	return p
}

func (*LogicalOrExpressionContext) IsLogicalOrExpressionContext() {}

func NewLogicalOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalOrExpression

	return p
}

func (s *LogicalOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOrExpressionContext) AllLogicalAndExpression() []ILogicalAndExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogicalAndExpressionContext)(nil)).Elem())
	var tst = make([]ILogicalAndExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogicalAndExpressionContext)
		}
	}

	return tst
}

func (s *LogicalOrExpressionContext) LogicalAndExpression(i int) ILogicalAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalAndExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogicalAndExpressionContext)
}

func (s *LogicalOrExpressionContext) AllOrOr() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserOrOr)
}

func (s *LogicalOrExpressionContext) OrOr(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrOr, i)
}

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLogicalOrExpression(s)
	}
}

func (s *LogicalOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLogicalOrExpression(s)
	}
}

func (p *CPP14Parser) LogicalOrExpression() (localctx ILogicalOrExpressionContext) {
	localctx = NewLogicalOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, CPP14ParserRULE_logicalOrExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.LogicalAndExpression()
	}
	p.SetState(804)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserOrOr {
		{
			p.SetState(800)
			p.Match(CPP14ParserOrOr)
		}
		{
			p.SetState(801)
			p.LogicalAndExpression()
		}

		p.SetState(806)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConditionalExpressionContext is an interface to support dynamic dispatch.
type IConditionalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpressionContext differentiates from other interfaces.
	IsConditionalExpressionContext()
}

type ConditionalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpressionContext() *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conditionalExpression
	return p
}

func (*ConditionalExpressionContext) IsConditionalExpressionContext() {}

func NewConditionalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conditionalExpression

	return p
}

func (s *ConditionalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *ConditionalExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(CPP14ParserQuestion, 0)
}

func (s *ConditionalExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *ConditionalExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConditionalExpression(s)
	}
}

func (p *CPP14Parser) ConditionalExpression() (localctx IConditionalExpressionContext) {
	localctx = NewConditionalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, CPP14ParserRULE_conditionalExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(807)
		p.LogicalOrExpression()
	}
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserQuestion {
		{
			p.SetState(808)
			p.Match(CPP14ParserQuestion)
		}
		{
			p.SetState(809)
			p.Expression()
		}
		{
			p.SetState(810)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(811)
			p.AssignmentExpression()
		}

	}

	return localctx
}

// IAssignmentExpressionContext is an interface to support dynamic dispatch.
type IAssignmentExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpressionContext differentiates from other interfaces.
	IsAssignmentExpressionContext()
}

type AssignmentExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpressionContext() *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentExpression
	return p
}

func (*AssignmentExpressionContext) IsAssignmentExpressionContext() {}

func NewAssignmentExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentExpression

	return p
}

func (s *AssignmentExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *AssignmentExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *AssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpressionContext) InitializerClause() IInitializerClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *AssignmentExpressionContext) ThrowExpression() IThrowExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowExpressionContext)
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAssignmentExpression(s)
	}
}

func (s *AssignmentExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAssignmentExpression(s)
	}
}

func (p *CPP14Parser) AssignmentExpression() (localctx IAssignmentExpressionContext) {
	localctx = NewAssignmentExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CPP14ParserRULE_assignmentExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(815)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(816)
			p.LogicalOrExpression()
		}
		{
			p.SetState(817)
			p.AssignmentOperator()
		}
		{
			p.SetState(818)
			p.InitializerClause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(820)
			p.ThrowExpression()
		}

	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AssignmentOperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *AssignmentOperatorContext) DivAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDivAssign, 0)
}

func (s *AssignmentOperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *AssignmentOperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *AssignmentOperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *AssignmentOperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *AssignmentOperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *AssignmentOperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *AssignmentOperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *AssignmentOperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAssignmentOperator(s)
	}
}

func (p *CPP14Parser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CPP14ParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(CPP14ParserAssign-101))|(1<<(CPP14ParserPlusAssign-101))|(1<<(CPP14ParserMinusAssign-101))|(1<<(CPP14ParserStarAssign-101))|(1<<(CPP14ParserDivAssign-101))|(1<<(CPP14ParserModAssign-101))|(1<<(CPP14ParserXorAssign-101))|(1<<(CPP14ParserAndAssign-101))|(1<<(CPP14ParserOrAssign-101))|(1<<(CPP14ParserLeftShiftAssign-101))|(1<<(CPP14ParserRightShiftAssign-101)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext_(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) AllAssignmentExpression() []IAssignmentExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem())
	var tst = make([]IAssignmentExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssignmentExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) AssignmentExpression(i int) IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ExpressionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *ExpressionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *CPP14Parser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext_(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CPP14ParserRULE_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		p.AssignmentExpression()
	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(826)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(827)
			p.AssignmentExpression()
		}

		p.SetState(832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConstantExpressionContext is an interface to support dynamic dispatch.
type IConstantExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantExpressionContext differentiates from other interfaces.
	IsConstantExpressionContext()
}

type ConstantExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantExpressionContext() *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_constantExpression
	return p
}

func (*ConstantExpressionContext) IsConstantExpressionContext() {}

func NewConstantExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_constantExpression

	return p
}

func (s *ConstantExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ConstantExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConstantExpression(s)
	}
}

func (s *ConstantExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConstantExpression(s)
	}
}

func (p *CPP14Parser) ConstantExpression() (localctx IConstantExpressionContext) {
	localctx = NewConstantExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, CPP14ParserRULE_constantExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(833)
		p.ConditionalExpression()
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LabeledStatement() ILabeledStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledStatementContext)
}

func (s *StatementContext) DeclarationStatement() IDeclarationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *StatementContext) SelectionStatement() ISelectionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionStatementContext)
}

func (s *StatementContext) IterationStatement() IIterationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatementContext)
}

func (s *StatementContext) JumpStatement() IJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJumpStatementContext)
}

func (s *StatementContext) TryBlock() ITryBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryBlockContext)
}

func (s *StatementContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *CPP14Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CPP14ParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(848)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(835)
			p.LabeledStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(836)
			p.DeclarationStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(838)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(837)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(846)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserIdentifier:
			{
				p.SetState(840)
				p.ExpressionStatement()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(841)
				p.CompoundStatement()
			}

		case CPP14ParserIf, CPP14ParserSwitch:
			{
				p.SetState(842)
				p.SelectionStatement()
			}

		case CPP14ParserDo, CPP14ParserFor, CPP14ParserWhile:
			{
				p.SetState(843)
				p.IterationStatement()
			}

		case CPP14ParserBreak, CPP14ParserContinue, CPP14ParserGoto, CPP14ParserReturn:
			{
				p.SetState(844)
				p.JumpStatement()
			}

		case CPP14ParserTry:
			{
				p.SetState(845)
				p.TryBlock()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ILabeledStatementContext is an interface to support dynamic dispatch.
type ILabeledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledStatementContext differentiates from other interfaces.
	IsLabeledStatementContext()
}

type LabeledStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStatementContext() *LabeledStatementContext {
	var p = new(LabeledStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_labeledStatement
	return p
}

func (*LabeledStatementContext) IsLabeledStatementContext() {}

func NewLabeledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStatementContext {
	var p = new(LabeledStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_labeledStatement

	return p
}

func (s *LabeledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *LabeledStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LabeledStatementContext) Case() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCase, 0)
}

func (s *LabeledStatementContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *LabeledStatementContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *LabeledStatementContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *LabeledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLabeledStatement(s)
	}
}

func (s *LabeledStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLabeledStatement(s)
	}
}

func (p *CPP14Parser) LabeledStatement() (localctx ILabeledStatementContext) {
	localctx = NewLabeledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, CPP14ParserRULE_labeledStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(850)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(857)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		{
			p.SetState(853)
			p.Match(CPP14ParserIdentifier)
		}

	case CPP14ParserCase:
		{
			p.SetState(854)
			p.Match(CPP14ParserCase)
		}
		{
			p.SetState(855)
			p.ConstantExpression()
		}

	case CPP14ParserDefault:
		{
			p.SetState(856)
			p.Match(CPP14ParserDefault)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(859)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(860)
		p.Statement()
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (p *CPP14Parser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CPP14ParserRULE_expressionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
		{
			p.SetState(862)
			p.Expression()
		}

	}
	{
		p.SetState(865)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_compoundStatement
	return p
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *CompoundStatementContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *CompoundStatementContext) StatementSeq() IStatementSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementSeqContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCompoundStatement(s)
	}
}

func (s *CompoundStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCompoundStatement(s)
	}
}

func (p *CPP14Parser) CompoundStatement() (localctx ICompoundStatementContext) {
	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CPP14ParserRULE_compoundStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(867)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(869)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignas)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAsm)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserBreak)|(1<<CPP14ParserCase)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserContinue)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDefault)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDo)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserExplicit-33))|(1<<(CPP14ParserExtern-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserFor-33))|(1<<(CPP14ParserFriend-33))|(1<<(CPP14ParserGoto-33))|(1<<(CPP14ParserIf-33))|(1<<(CPP14ParserInline-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserMutable-33))|(1<<(CPP14ParserNamespace-33))|(1<<(CPP14ParserNew-33))|(1<<(CPP14ParserNoexcept-33))|(1<<(CPP14ParserOperator-33))|(1<<(CPP14ParserRegister-33))|(1<<(CPP14ParserReinterpret_cast-33))|(1<<(CPP14ParserReturn-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserSizeof-33))|(1<<(CPP14ParserStatic-33))|(1<<(CPP14ParserStatic_assert-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(CPP14ParserStatic_cast-65))|(1<<(CPP14ParserStruct-65))|(1<<(CPP14ParserSwitch-65))|(1<<(CPP14ParserThis-65))|(1<<(CPP14ParserThread_local-65))|(1<<(CPP14ParserThrow-65))|(1<<(CPP14ParserTry-65))|(1<<(CPP14ParserTypedef-65))|(1<<(CPP14ParserTypeid_-65))|(1<<(CPP14ParserTypename_-65))|(1<<(CPP14ParserUnion-65))|(1<<(CPP14ParserUnsigned-65))|(1<<(CPP14ParserUsing-65))|(1<<(CPP14ParserVirtual-65))|(1<<(CPP14ParserVoid-65))|(1<<(CPP14ParserVolatile-65))|(1<<(CPP14ParserWchar-65))|(1<<(CPP14ParserWhile-65))|(1<<(CPP14ParserLeftParen-65))|(1<<(CPP14ParserLeftBracket-65))|(1<<(CPP14ParserLeftBrace-65))|(1<<(CPP14ParserPlus-65))|(1<<(CPP14ParserMinus-65))|(1<<(CPP14ParserStar-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CPP14ParserAnd-97))|(1<<(CPP14ParserOr-97))|(1<<(CPP14ParserTilde-97))|(1<<(CPP14ParserNot-97))|(1<<(CPP14ParserAndAnd-97))|(1<<(CPP14ParserPlusPlus-97))|(1<<(CPP14ParserMinusMinus-97))|(1<<(CPP14ParserDoublecolon-97))|(1<<(CPP14ParserSemi-97)))) != 0) || _la == CPP14ParserEllipsis || _la == CPP14ParserIdentifier {
		{
			p.SetState(868)
			p.StatementSeq()
		}

	}
	{
		p.SetState(871)
		p.Match(CPP14ParserRightBrace)
	}

	return localctx
}

// IStatementSeqContext is an interface to support dynamic dispatch.
type IStatementSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementSeqContext differentiates from other interfaces.
	IsStatementSeqContext()
}

type StatementSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementSeqContext() *StatementSeqContext {
	var p = new(StatementSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_statementSeq
	return p
}

func (*StatementSeqContext) IsStatementSeqContext() {}

func NewStatementSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementSeqContext {
	var p = new(StatementSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statementSeq

	return p
}

func (s *StatementSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementSeqContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementSeqContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterStatementSeq(s)
	}
}

func (s *StatementSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitStatementSeq(s)
	}
}

func (p *CPP14Parser) StatementSeq() (localctx IStatementSeqContext) {
	localctx = NewStatementSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CPP14ParserRULE_statementSeq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignas)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAsm)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserBreak)|(1<<CPP14ParserCase)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserContinue)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDefault)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDo)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserExplicit-33))|(1<<(CPP14ParserExtern-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserFor-33))|(1<<(CPP14ParserFriend-33))|(1<<(CPP14ParserGoto-33))|(1<<(CPP14ParserIf-33))|(1<<(CPP14ParserInline-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserMutable-33))|(1<<(CPP14ParserNamespace-33))|(1<<(CPP14ParserNew-33))|(1<<(CPP14ParserNoexcept-33))|(1<<(CPP14ParserOperator-33))|(1<<(CPP14ParserRegister-33))|(1<<(CPP14ParserReinterpret_cast-33))|(1<<(CPP14ParserReturn-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserSizeof-33))|(1<<(CPP14ParserStatic-33))|(1<<(CPP14ParserStatic_assert-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(CPP14ParserStatic_cast-65))|(1<<(CPP14ParserStruct-65))|(1<<(CPP14ParserSwitch-65))|(1<<(CPP14ParserThis-65))|(1<<(CPP14ParserThread_local-65))|(1<<(CPP14ParserThrow-65))|(1<<(CPP14ParserTry-65))|(1<<(CPP14ParserTypedef-65))|(1<<(CPP14ParserTypeid_-65))|(1<<(CPP14ParserTypename_-65))|(1<<(CPP14ParserUnion-65))|(1<<(CPP14ParserUnsigned-65))|(1<<(CPP14ParserUsing-65))|(1<<(CPP14ParserVirtual-65))|(1<<(CPP14ParserVoid-65))|(1<<(CPP14ParserVolatile-65))|(1<<(CPP14ParserWchar-65))|(1<<(CPP14ParserWhile-65))|(1<<(CPP14ParserLeftParen-65))|(1<<(CPP14ParserLeftBracket-65))|(1<<(CPP14ParserLeftBrace-65))|(1<<(CPP14ParserPlus-65))|(1<<(CPP14ParserMinus-65))|(1<<(CPP14ParserStar-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CPP14ParserAnd-97))|(1<<(CPP14ParserOr-97))|(1<<(CPP14ParserTilde-97))|(1<<(CPP14ParserNot-97))|(1<<(CPP14ParserAndAnd-97))|(1<<(CPP14ParserPlusPlus-97))|(1<<(CPP14ParserMinusMinus-97))|(1<<(CPP14ParserDoublecolon-97))|(1<<(CPP14ParserSemi-97)))) != 0) || _la == CPP14ParserEllipsis || _la == CPP14ParserIdentifier {
		{
			p.SetState(873)
			p.Statement()
		}

		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectionStatementContext is an interface to support dynamic dispatch.
type ISelectionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectionStatementContext differentiates from other interfaces.
	IsSelectionStatementContext()
}

type SelectionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionStatementContext() *SelectionStatementContext {
	var p = new(SelectionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_selectionStatement
	return p
}

func (*SelectionStatementContext) IsSelectionStatementContext() {}

func NewSelectionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionStatementContext {
	var p = new(SelectionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_selectionStatement

	return p
}

func (s *SelectionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionStatementContext) If() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIf, 0)
}

func (s *SelectionStatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *SelectionStatementContext) Condition() IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *SelectionStatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *SelectionStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *SelectionStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SelectionStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(CPP14ParserElse, 0)
}

func (s *SelectionStatementContext) Switch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSwitch, 0)
}

func (s *SelectionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSelectionStatement(s)
	}
}

func (s *SelectionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSelectionStatement(s)
	}
}

func (p *CPP14Parser) SelectionStatement() (localctx ISelectionStatementContext) {
	localctx = NewSelectionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, CPP14ParserRULE_selectionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(893)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIf:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(878)
			p.Match(CPP14ParserIf)
		}
		{
			p.SetState(879)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(880)
			p.Condition()
		}
		{
			p.SetState(881)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(882)
			p.Statement()
		}
		p.SetState(885)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(883)
				p.Match(CPP14ParserElse)
			}
			{
				p.SetState(884)
				p.Statement()
			}

		}

	case CPP14ParserSwitch:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(887)
			p.Match(CPP14ParserSwitch)
		}
		{
			p.SetState(888)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(889)
			p.Condition()
		}
		{
			p.SetState(890)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(891)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ConditionContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ConditionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ConditionContext) InitializerClause() IInitializerClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *ConditionContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *ConditionContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCondition(s)
	}
}

func (p *CPP14Parser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CPP14ParserRULE_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(906)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(895)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(896)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(899)
			p.DeclSpecifierSeq()
		}
		{
			p.SetState(900)
			p.Declarator()
		}
		p.SetState(904)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAssign:
			{
				p.SetState(901)
				p.Match(CPP14ParserAssign)
			}
			{
				p.SetState(902)
				p.InitializerClause()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(903)
				p.BracedInitList()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IIterationStatementContext is an interface to support dynamic dispatch.
type IIterationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatementContext differentiates from other interfaces.
	IsIterationStatementContext()
}

type IterationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatementContext() *IterationStatementContext {
	var p = new(IterationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_iterationStatement
	return p
}

func (*IterationStatementContext) IsIterationStatementContext() {}

func NewIterationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatementContext {
	var p = new(IterationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_iterationStatement

	return p
}

func (s *IterationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatementContext) While() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWhile, 0)
}

func (s *IterationStatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *IterationStatementContext) Condition() IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *IterationStatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *IterationStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IterationStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDo, 0)
}

func (s *IterationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *IterationStatementContext) For() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFor, 0)
}

func (s *IterationStatementContext) ForInitStatement() IForInitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForInitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForInitStatementContext)
}

func (s *IterationStatementContext) ForRangeDeclaration() IForRangeDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForRangeDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForRangeDeclarationContext)
}

func (s *IterationStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *IterationStatementContext) ForRangeInitializer() IForRangeInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForRangeInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForRangeInitializerContext)
}

func (s *IterationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterIterationStatement(s)
	}
}

func (s *IterationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitIterationStatement(s)
	}
}

func (p *CPP14Parser) IterationStatement() (localctx IIterationStatementContext) {
	localctx = NewIterationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CPP14ParserRULE_iterationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(941)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserWhile:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(908)
			p.Match(CPP14ParserWhile)
		}
		{
			p.SetState(909)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(910)
			p.Condition()
		}
		{
			p.SetState(911)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(912)
			p.Statement()
		}

	case CPP14ParserDo:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(914)
			p.Match(CPP14ParserDo)
		}
		{
			p.SetState(915)
			p.Statement()
		}
		{
			p.SetState(916)
			p.Match(CPP14ParserWhile)
		}
		{
			p.SetState(917)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(918)
			p.Expression()
		}
		{
			p.SetState(919)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(920)
			p.Match(CPP14ParserSemi)
		}

	case CPP14ParserFor:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(922)
			p.Match(CPP14ParserFor)
		}
		{
			p.SetState(923)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(936)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(924)
				p.ForInitStatement()
			}
			p.SetState(926)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignas)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserExplicit-33))|(1<<(CPP14ParserExtern-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserFriend-33))|(1<<(CPP14ParserInline-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserMutable-33))|(1<<(CPP14ParserNew-33))|(1<<(CPP14ParserNoexcept-33))|(1<<(CPP14ParserOperator-33))|(1<<(CPP14ParserRegister-33))|(1<<(CPP14ParserReinterpret_cast-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserSizeof-33))|(1<<(CPP14ParserStatic-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(CPP14ParserStatic_cast-65))|(1<<(CPP14ParserStruct-65))|(1<<(CPP14ParserThis-65))|(1<<(CPP14ParserThread_local-65))|(1<<(CPP14ParserThrow-65))|(1<<(CPP14ParserTypedef-65))|(1<<(CPP14ParserTypeid_-65))|(1<<(CPP14ParserTypename_-65))|(1<<(CPP14ParserUnion-65))|(1<<(CPP14ParserUnsigned-65))|(1<<(CPP14ParserVirtual-65))|(1<<(CPP14ParserVoid-65))|(1<<(CPP14ParserVolatile-65))|(1<<(CPP14ParserWchar-65))|(1<<(CPP14ParserLeftParen-65))|(1<<(CPP14ParserLeftBracket-65))|(1<<(CPP14ParserPlus-65))|(1<<(CPP14ParserMinus-65))|(1<<(CPP14ParserStar-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CPP14ParserAnd-97))|(1<<(CPP14ParserOr-97))|(1<<(CPP14ParserTilde-97))|(1<<(CPP14ParserNot-97))|(1<<(CPP14ParserPlusPlus-97))|(1<<(CPP14ParserMinusMinus-97))|(1<<(CPP14ParserDoublecolon-97)))) != 0) || _la == CPP14ParserIdentifier {
				{
					p.SetState(925)
					p.Condition()
				}

			}
			{
				p.SetState(928)
				p.Match(CPP14ParserSemi)
			}
			p.SetState(930)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
				{
					p.SetState(929)
					p.Expression()
				}

			}

		case 2:
			{
				p.SetState(932)
				p.ForRangeDeclaration()
			}
			{
				p.SetState(933)
				p.Match(CPP14ParserColon)
			}
			{
				p.SetState(934)
				p.ForRangeInitializer()
			}

		}
		{
			p.SetState(938)
			p.Match(CPP14ParserRightParen)
		}
		{
			p.SetState(939)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForInitStatementContext is an interface to support dynamic dispatch.
type IForInitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForInitStatementContext differentiates from other interfaces.
	IsForInitStatementContext()
}

type ForInitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInitStatementContext() *ForInitStatementContext {
	var p = new(ForInitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forInitStatement
	return p
}

func (*ForInitStatementContext) IsForInitStatementContext() {}

func NewForInitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInitStatementContext {
	var p = new(ForInitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forInitStatement

	return p
}

func (s *ForInitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInitStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *ForInitStatementContext) SimpleDeclaration() ISimpleDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleDeclarationContext)
}

func (s *ForInitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterForInitStatement(s)
	}
}

func (s *ForInitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitForInitStatement(s)
	}
}

func (p *CPP14Parser) ForInitStatement() (localctx IForInitStatementContext) {
	localctx = NewForInitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, CPP14ParserRULE_forInitStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(943)
			p.ExpressionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(944)
			p.SimpleDeclaration()
		}

	}

	return localctx
}

// IForRangeDeclarationContext is an interface to support dynamic dispatch.
type IForRangeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForRangeDeclarationContext differentiates from other interfaces.
	IsForRangeDeclarationContext()
}

type ForRangeDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeDeclarationContext() *ForRangeDeclarationContext {
	var p = new(ForRangeDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeDeclaration
	return p
}

func (*ForRangeDeclarationContext) IsForRangeDeclarationContext() {}

func NewForRangeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeDeclarationContext {
	var p = new(ForRangeDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forRangeDeclaration

	return p
}

func (s *ForRangeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ForRangeDeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ForRangeDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ForRangeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterForRangeDeclaration(s)
	}
}

func (s *ForRangeDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitForRangeDeclaration(s)
	}
}

func (p *CPP14Parser) ForRangeDeclaration() (localctx IForRangeDeclarationContext) {
	localctx = NewForRangeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CPP14ParserRULE_forRangeDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(947)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(950)
		p.DeclSpecifierSeq()
	}
	{
		p.SetState(951)
		p.Declarator()
	}

	return localctx
}

// IForRangeInitializerContext is an interface to support dynamic dispatch.
type IForRangeInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForRangeInitializerContext differentiates from other interfaces.
	IsForRangeInitializerContext()
}

type ForRangeInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeInitializerContext() *ForRangeInitializerContext {
	var p = new(ForRangeInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeInitializer
	return p
}

func (*ForRangeInitializerContext) IsForRangeInitializerContext() {}

func NewForRangeInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeInitializerContext {
	var p = new(ForRangeInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forRangeInitializer

	return p
}

func (s *ForRangeInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeInitializerContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForRangeInitializerContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *ForRangeInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterForRangeInitializer(s)
	}
}

func (s *ForRangeInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitForRangeInitializer(s)
	}
}

func (p *CPP14Parser) ForRangeInitializer() (localctx IForRangeInitializerContext) {
	localctx = NewForRangeInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, CPP14ParserRULE_forRangeInitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(955)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(953)
			p.Expression()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(954)
			p.BracedInitList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJumpStatementContext is an interface to support dynamic dispatch.
type IJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJumpStatementContext differentiates from other interfaces.
	IsJumpStatementContext()
}

type JumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJumpStatementContext() *JumpStatementContext {
	var p = new(JumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_jumpStatement
	return p
}

func (*JumpStatementContext) IsJumpStatementContext() {}

func NewJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JumpStatementContext {
	var p = new(JumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_jumpStatement

	return p
}

func (s *JumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JumpStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *JumpStatementContext) Break() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBreak, 0)
}

func (s *JumpStatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(CPP14ParserContinue, 0)
}

func (s *JumpStatementContext) Return() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReturn, 0)
}

func (s *JumpStatementContext) Goto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGoto, 0)
}

func (s *JumpStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *JumpStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JumpStatementContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *JumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JumpStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterJumpStatement(s)
	}
}

func (s *JumpStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitJumpStatement(s)
	}
}

func (p *CPP14Parser) JumpStatement() (localctx IJumpStatementContext) {
	localctx = NewJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CPP14ParserRULE_jumpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(966)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserBreak:
		{
			p.SetState(957)
			p.Match(CPP14ParserBreak)
		}

	case CPP14ParserContinue:
		{
			p.SetState(958)
			p.Match(CPP14ParserContinue)
		}

	case CPP14ParserReturn:
		{
			p.SetState(959)
			p.Match(CPP14ParserReturn)
		}
		p.SetState(962)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
			{
				p.SetState(960)
				p.Expression()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(961)
				p.BracedInitList()
			}

		case CPP14ParserSemi:

		default:
		}

	case CPP14ParserGoto:
		{
			p.SetState(964)
			p.Match(CPP14ParserGoto)
		}
		{
			p.SetState(965)
			p.Match(CPP14ParserIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(968)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IDeclarationStatementContext is an interface to support dynamic dispatch.
type IDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationStatementContext differentiates from other interfaces.
	IsDeclarationStatementContext()
}

type DeclarationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationStatementContext() *DeclarationStatementContext {
	var p = new(DeclarationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationStatement
	return p
}

func (*DeclarationStatementContext) IsDeclarationStatementContext() {}

func NewDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationStatementContext {
	var p = new(DeclarationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationStatement

	return p
}

func (s *DeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationStatementContext) BlockDeclaration() IBlockDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockDeclarationContext)
}

func (s *DeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclarationStatement(s)
	}
}

func (s *DeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclarationStatement(s)
	}
}

func (p *CPP14Parser) DeclarationStatement() (localctx IDeclarationStatementContext) {
	localctx = NewDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, CPP14ParserRULE_declarationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(970)
		p.BlockDeclaration()
	}

	return localctx
}

// IDeclarationseqContext is an interface to support dynamic dispatch.
type IDeclarationseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationseqContext differentiates from other interfaces.
	IsDeclarationseqContext()
}

type DeclarationseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationseqContext() *DeclarationseqContext {
	var p = new(DeclarationseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationseq
	return p
}

func (*DeclarationseqContext) IsDeclarationseqContext() {}

func NewDeclarationseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationseqContext {
	var p = new(DeclarationseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationseq

	return p
}

func (s *DeclarationseqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationseqContext) AllDeclaration() []IDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationContext)(nil)).Elem())
	var tst = make([]IDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationContext)
		}
	}

	return tst
}

func (s *DeclarationseqContext) Declaration(i int) IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclarationseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclarationseq(s)
	}
}

func (s *DeclarationseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclarationseq(s)
	}
}

func (p *CPP14Parser) Declarationseq() (localctx IDeclarationseqContext) {
	localctx = NewDeclarationseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CPP14ParserRULE_declarationseq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAsm-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserNamespace-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
		{
			p.SetState(972)
			p.Declaration()
		}

		p.SetState(975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) BlockDeclaration() IBlockDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockDeclarationContext)
}

func (s *DeclarationContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *DeclarationContext) TemplateDeclaration() ITemplateDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDeclarationContext)
}

func (s *DeclarationContext) ExplicitInstantiation() IExplicitInstantiationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitInstantiationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitInstantiationContext)
}

func (s *DeclarationContext) ExplicitSpecialization() IExplicitSpecializationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitSpecializationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitSpecializationContext)
}

func (s *DeclarationContext) LinkageSpecification() ILinkageSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinkageSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinkageSpecificationContext)
}

func (s *DeclarationContext) NamespaceDefinition() INamespaceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceDefinitionContext)
}

func (s *DeclarationContext) EmptyDeclaration() IEmptyDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptyDeclarationContext)
}

func (s *DeclarationContext) AttributeDeclaration() IAttributeDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeDeclarationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (p *CPP14Parser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, CPP14ParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(977)
			p.BlockDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(978)
			p.FunctionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(979)
			p.TemplateDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(980)
			p.ExplicitInstantiation()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(981)
			p.ExplicitSpecialization()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(982)
			p.LinkageSpecification()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(983)
			p.NamespaceDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(984)
			p.EmptyDeclaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(985)
			p.AttributeDeclaration()
		}

	}

	return localctx
}

// IBlockDeclarationContext is an interface to support dynamic dispatch.
type IBlockDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockDeclarationContext differentiates from other interfaces.
	IsBlockDeclarationContext()
}

type BlockDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockDeclarationContext() *BlockDeclarationContext {
	var p = new(BlockDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_blockDeclaration
	return p
}

func (*BlockDeclarationContext) IsBlockDeclarationContext() {}

func NewBlockDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockDeclarationContext {
	var p = new(BlockDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_blockDeclaration

	return p
}

func (s *BlockDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockDeclarationContext) SimpleDeclaration() ISimpleDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleDeclarationContext)
}

func (s *BlockDeclarationContext) AsmDefinition() IAsmDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsmDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsmDefinitionContext)
}

func (s *BlockDeclarationContext) NamespaceAliasDefinition() INamespaceAliasDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceAliasDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceAliasDefinitionContext)
}

func (s *BlockDeclarationContext) UsingDeclaration() IUsingDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingDeclarationContext)
}

func (s *BlockDeclarationContext) UsingDirective() IUsingDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingDirectiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingDirectiveContext)
}

func (s *BlockDeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStaticAssertDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *BlockDeclarationContext) AliasDeclaration() IAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasDeclarationContext)
}

func (s *BlockDeclarationContext) OpaqueEnumDeclaration() IOpaqueEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpaqueEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpaqueEnumDeclarationContext)
}

func (s *BlockDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBlockDeclaration(s)
	}
}

func (s *BlockDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBlockDeclaration(s)
	}
}

func (p *CPP14Parser) BlockDeclaration() (localctx IBlockDeclarationContext) {
	localctx = NewBlockDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, CPP14ParserRULE_blockDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(996)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(988)
			p.SimpleDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(989)
			p.AsmDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(990)
			p.NamespaceAliasDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(991)
			p.UsingDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(992)
			p.UsingDirective()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(993)
			p.StaticAssertDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(994)
			p.AliasDeclaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(995)
			p.OpaqueEnumDeclaration()
		}

	}

	return localctx
}

// IAliasDeclarationContext is an interface to support dynamic dispatch.
type IAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasDeclarationContext differentiates from other interfaces.
	IsAliasDeclarationContext()
}

type AliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasDeclarationContext() *AliasDeclarationContext {
	var p = new(AliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_aliasDeclaration
	return p
}

func (*AliasDeclarationContext) IsAliasDeclarationContext() {}

func NewAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasDeclarationContext {
	var p = new(AliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_aliasDeclaration

	return p
}

func (s *AliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasDeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *AliasDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AliasDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AliasDeclarationContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *AliasDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AliasDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *AliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAliasDeclaration(s)
	}
}

func (s *AliasDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAliasDeclaration(s)
	}
}

func (p *CPP14Parser) AliasDeclaration() (localctx IAliasDeclarationContext) {
	localctx = NewAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CPP14ParserRULE_aliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(998)
		p.Match(CPP14ParserUsing)
	}
	{
		p.SetState(999)
		p.Match(CPP14ParserIdentifier)
	}
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1000)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1003)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(1004)
		p.TheTypeId()
	}
	{
		p.SetState(1005)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// ISimpleDeclarationContext is an interface to support dynamic dispatch.
type ISimpleDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleDeclarationContext differentiates from other interfaces.
	IsSimpleDeclarationContext()
}

type SimpleDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleDeclarationContext() *SimpleDeclarationContext {
	var p = new(SimpleDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleDeclaration
	return p
}

func (*SimpleDeclarationContext) IsSimpleDeclarationContext() {}

func NewSimpleDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleDeclarationContext {
	var p = new(SimpleDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleDeclaration

	return p
}

func (s *SimpleDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *SimpleDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *SimpleDeclarationContext) InitDeclaratorList() IInitDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorListContext)
}

func (s *SimpleDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *SimpleDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleDeclaration(s)
	}
}

func (s *SimpleDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleDeclaration(s)
	}
}

func (p *CPP14Parser) SimpleDeclaration() (localctx ISimpleDeclarationContext) {
	localctx = NewSimpleDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CPP14ParserRULE_simpleDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1021)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStruct, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1008)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1007)
				p.DeclSpecifierSeq()
			}

		}
		p.SetState(1011)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserOperator || (((_la-85)&-(0x1f+1)) == 0 && ((1<<uint((_la-85)))&((1<<(CPP14ParserLeftParen-85))|(1<<(CPP14ParserStar-85))|(1<<(CPP14ParserAnd-85))|(1<<(CPP14ParserTilde-85)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
			{
				p.SetState(1010)
				p.InitDeclaratorList()
			}

		}
		{
			p.SetState(1013)
			p.Match(CPP14ParserSemi)
		}

	case CPP14ParserAlignas, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1014)
			p.AttributeSpecifierSeq()
		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1015)
				p.DeclSpecifierSeq()
			}

		}
		{
			p.SetState(1018)
			p.InitDeclaratorList()
		}
		{
			p.SetState(1019)
			p.Match(CPP14ParserSemi)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStaticAssertDeclarationContext is an interface to support dynamic dispatch.
type IStaticAssertDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticAssertDeclarationContext differentiates from other interfaces.
	IsStaticAssertDeclarationContext()
}

type StaticAssertDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticAssertDeclarationContext() *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_staticAssertDeclaration
	return p
}

func (*StaticAssertDeclarationContext) IsStaticAssertDeclarationContext() {}

func NewStaticAssertDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_staticAssertDeclaration

	return p
}

func (s *StaticAssertDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticAssertDeclarationContext) Static_assert() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_assert, 0)
}

func (s *StaticAssertDeclarationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *StaticAssertDeclarationContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *StaticAssertDeclarationContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *StaticAssertDeclarationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *StaticAssertDeclarationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *StaticAssertDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *StaticAssertDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticAssertDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticAssertDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterStaticAssertDeclaration(s)
	}
}

func (s *StaticAssertDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitStaticAssertDeclaration(s)
	}
}

func (p *CPP14Parser) StaticAssertDeclaration() (localctx IStaticAssertDeclarationContext) {
	localctx = NewStaticAssertDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, CPP14ParserRULE_staticAssertDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1023)
		p.Match(CPP14ParserStatic_assert)
	}
	{
		p.SetState(1024)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1025)
		p.ConstantExpression()
	}
	{
		p.SetState(1026)
		p.Match(CPP14ParserComma)
	}
	{
		p.SetState(1027)
		p.Match(CPP14ParserStringLiteral)
	}
	{
		p.SetState(1028)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(1029)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IEmptyDeclarationContext is an interface to support dynamic dispatch.
type IEmptyDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyDeclarationContext differentiates from other interfaces.
	IsEmptyDeclarationContext()
}

type EmptyDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyDeclarationContext() *EmptyDeclarationContext {
	var p = new(EmptyDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_emptyDeclaration
	return p
}

func (*EmptyDeclarationContext) IsEmptyDeclarationContext() {}

func NewEmptyDeclarationContext_(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyDeclarationContext {
	var p = new(EmptyDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_emptyDeclaration

	return p
}

func (s *EmptyDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EmptyDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *EmptyDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEmptyDeclaration(s)
	}
}

func (s *EmptyDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEmptyDeclaration(s)
	}
}

func (p *CPP14Parser) EmptyDeclaration() (localctx IEmptyDeclarationContext) {
	localctx = NewEmptyDeclarationContext_(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CPP14ParserRULE_emptyDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1031)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IAttributeDeclarationContext is an interface to support dynamic dispatch.
type IAttributeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeDeclarationContext differentiates from other interfaces.
	IsAttributeDeclarationContext()
}

type AttributeDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDeclarationContext() *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeDeclaration
	return p
}

func (*AttributeDeclarationContext) IsAttributeDeclarationContext() {}

func NewAttributeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeDeclaration

	return p
}

func (s *AttributeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *AttributeDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AttributeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeDeclaration(s)
	}
}

func (s *AttributeDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeDeclaration(s)
	}
}

func (p *CPP14Parser) AttributeDeclaration() (localctx IAttributeDeclarationContext) {
	localctx = NewAttributeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, CPP14ParserRULE_attributeDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1033)
		p.AttributeSpecifierSeq()
	}
	{
		p.SetState(1034)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IDeclSpecifierContext is an interface to support dynamic dispatch.
type IDeclSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclSpecifierContext differentiates from other interfaces.
	IsDeclSpecifierContext()
}

type DeclSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclSpecifierContext() *DeclSpecifierContext {
	var p = new(DeclSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifier
	return p
}

func (*DeclSpecifierContext) IsDeclSpecifierContext() {}

func NewDeclSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclSpecifierContext {
	var p = new(DeclSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declSpecifier

	return p
}

func (s *DeclSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclSpecifierContext) StorageClassSpecifier() IStorageClassSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageClassSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageClassSpecifierContext)
}

func (s *DeclSpecifierContext) TypeSpecifier() ITypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *DeclSpecifierContext) FunctionSpecifier() IFunctionSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSpecifierContext)
}

func (s *DeclSpecifierContext) Friend() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFriend, 0)
}

func (s *DeclSpecifierContext) Typedef() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypedef, 0)
}

func (s *DeclSpecifierContext) Constexpr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConstexpr, 0)
}

func (s *DeclSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclSpecifier(s)
	}
}

func (s *DeclSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclSpecifier(s)
	}
}

func (p *CPP14Parser) DeclSpecifier() (localctx IDeclSpecifierContext) {
	localctx = NewDeclSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CPP14ParserRULE_declSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1042)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserExtern, CPP14ParserMutable, CPP14ParserRegister, CPP14ParserStatic, CPP14ParserThread_local:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1036)
			p.StorageClassSpecifier()
		}

	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1037)
			p.TypeSpecifier()
		}

	case CPP14ParserExplicit, CPP14ParserInline, CPP14ParserVirtual:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1038)
			p.FunctionSpecifier()
		}

	case CPP14ParserFriend:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1039)
			p.Match(CPP14ParserFriend)
		}

	case CPP14ParserTypedef:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1040)
			p.Match(CPP14ParserTypedef)
		}

	case CPP14ParserConstexpr:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1041)
			p.Match(CPP14ParserConstexpr)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclSpecifierSeqContext is an interface to support dynamic dispatch.
type IDeclSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclSpecifierSeqContext differentiates from other interfaces.
	IsDeclSpecifierSeqContext()
}

type DeclSpecifierSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclSpecifierSeqContext() *DeclSpecifierSeqContext {
	var p = new(DeclSpecifierSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifierSeq
	return p
}

func (*DeclSpecifierSeqContext) IsDeclSpecifierSeqContext() {}

func NewDeclSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclSpecifierSeqContext {
	var p = new(DeclSpecifierSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declSpecifierSeq

	return p
}

func (s *DeclSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclSpecifierSeqContext) AllDeclSpecifier() []IDeclSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclSpecifierContext)(nil)).Elem())
	var tst = make([]IDeclSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclSpecifierContext)
		}
	}

	return tst
}

func (s *DeclSpecifierSeqContext) DeclSpecifier(i int) IDeclSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierContext)
}

func (s *DeclSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *DeclSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclSpecifierSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclSpecifierSeq(s)
	}
}

func (s *DeclSpecifierSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclSpecifierSeq(s)
	}
}

func (p *CPP14Parser) DeclSpecifierSeq() (localctx IDeclSpecifierSeqContext) {
	localctx = NewDeclSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CPP14ParserRULE_declSpecifierSeq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1045)
	p.GetErrorHandler().Sync(p)
	_alt = 1 + 1
	for ok := true; ok; ok = _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1 + 1:
			{
				p.SetState(1044)
				p.DeclSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1047)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1049)
			p.AttributeSpecifierSeq()
		}

	}

	return localctx
}

// IStorageClassSpecifierContext is an interface to support dynamic dispatch.
type IStorageClassSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageClassSpecifierContext differentiates from other interfaces.
	IsStorageClassSpecifierContext()
}

type StorageClassSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageClassSpecifierContext() *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_storageClassSpecifier
	return p
}

func (*StorageClassSpecifierContext) IsStorageClassSpecifierContext() {}

func NewStorageClassSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_storageClassSpecifier

	return p
}

func (s *StorageClassSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *StorageClassSpecifierContext) Register() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRegister, 0)
}

func (s *StorageClassSpecifierContext) Static() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic, 0)
}

func (s *StorageClassSpecifierContext) Thread_local() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThread_local, 0)
}

func (s *StorageClassSpecifierContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *StorageClassSpecifierContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *StorageClassSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageClassSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageClassSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterStorageClassSpecifier(s)
	}
}

func (s *StorageClassSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitStorageClassSpecifier(s)
	}
}

func (p *CPP14Parser) StorageClassSpecifier() (localctx IStorageClassSpecifierContext) {
	localctx = NewStorageClassSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CPP14ParserRULE_storageClassSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1052)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(CPP14ParserExtern-36))|(1<<(CPP14ParserMutable-36))|(1<<(CPP14ParserRegister-36))|(1<<(CPP14ParserStatic-36)))) != 0) || _la == CPP14ParserThread_local) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IFunctionSpecifierContext is an interface to support dynamic dispatch.
type IFunctionSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSpecifierContext differentiates from other interfaces.
	IsFunctionSpecifierContext()
}

type FunctionSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSpecifierContext() *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionSpecifier
	return p
}

func (*FunctionSpecifierContext) IsFunctionSpecifierContext() {}

func NewFunctionSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionSpecifier

	return p
}

func (s *FunctionSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSpecifierContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *FunctionSpecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *FunctionSpecifierContext) Explicit() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExplicit, 0)
}

func (s *FunctionSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterFunctionSpecifier(s)
	}
}

func (s *FunctionSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitFunctionSpecifier(s)
	}
}

func (p *CPP14Parser) FunctionSpecifier() (localctx IFunctionSpecifierContext) {
	localctx = NewFunctionSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CPP14ParserRULE_functionSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1054)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserExplicit || _la == CPP14ParserInline || _la == CPP14ParserVirtual) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITypedefNameContext is an interface to support dynamic dispatch.
type ITypedefNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefNameContext differentiates from other interfaces.
	IsTypedefNameContext()
}

type TypedefNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefNameContext() *TypedefNameContext {
	var p = new(TypedefNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typedefName
	return p
}

func (*TypedefNameContext) IsTypedefNameContext() {}

func NewTypedefNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefNameContext {
	var p = new(TypedefNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typedefName

	return p
}

func (s *TypedefNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypedefNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypedefName(s)
	}
}

func (s *TypedefNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypedefName(s)
	}
}

func (p *CPP14Parser) TypedefName() (localctx ITypedefNameContext) {
	localctx = NewTypedefNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CPP14ParserRULE_typedefName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1056)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// ITypeSpecifierContext is an interface to support dynamic dispatch.
type ITypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSpecifierContext differentiates from other interfaces.
	IsTypeSpecifierContext()
}

type TypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecifierContext() *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifier
	return p
}

func (*TypeSpecifierContext) IsTypeSpecifierContext() {}

func NewTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeSpecifier

	return p
}

func (s *TypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecifierContext) TrailingTypeSpecifier() ITrailingTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierContext)
}

func (s *TypeSpecifierContext) ClassSpecifier() IClassSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassSpecifierContext)
}

func (s *TypeSpecifierContext) EnumSpecifier() IEnumSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumSpecifierContext)
}

func (s *TypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeSpecifier(s)
	}
}

func (s *TypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeSpecifier(s)
	}
}

func (p *CPP14Parser) TypeSpecifier() (localctx ITypeSpecifierContext) {
	localctx = NewTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, CPP14ParserRULE_typeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1061)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1058)
			p.TrailingTypeSpecifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1059)
			p.ClassSpecifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1060)
			p.EnumSpecifier()
		}

	}

	return localctx
}

// ITrailingTypeSpecifierContext is an interface to support dynamic dispatch.
type ITrailingTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingTypeSpecifierContext differentiates from other interfaces.
	IsTrailingTypeSpecifierContext()
}

type TrailingTypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingTypeSpecifierContext() *TrailingTypeSpecifierContext {
	var p = new(TrailingTypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifier
	return p
}

func (*TrailingTypeSpecifierContext) IsTrailingTypeSpecifierContext() {}

func NewTrailingTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingTypeSpecifierContext {
	var p = new(TrailingTypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifier

	return p
}

func (s *TrailingTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingTypeSpecifierContext) SimpleTypeSpecifier() ISimpleTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) ElaboratedTypeSpecifier() IElaboratedTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElaboratedTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElaboratedTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) TypeNameSpecifier() ITypeNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) CvQualifier() ICvQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvQualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvQualifierContext)
}

func (s *TrailingTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingTypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTrailingTypeSpecifier(s)
	}
}

func (s *TrailingTypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTrailingTypeSpecifier(s)
	}
}

func (p *CPP14Parser) TrailingTypeSpecifier() (localctx ITrailingTypeSpecifierContext) {
	localctx = NewTrailingTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CPP14ParserRULE_trailingTypeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1067)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1063)
			p.SimpleTypeSpecifier()
		}

	case CPP14ParserClass, CPP14ParserEnum, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1064)
			p.ElaboratedTypeSpecifier()
		}

	case CPP14ParserTypename_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1065)
			p.TypeNameSpecifier()
		}

	case CPP14ParserConst, CPP14ParserVolatile:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1066)
			p.CvQualifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeSpecifierSeqContext is an interface to support dynamic dispatch.
type ITypeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSpecifierSeqContext differentiates from other interfaces.
	IsTypeSpecifierSeqContext()
}

type TypeSpecifierSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecifierSeqContext() *TypeSpecifierSeqContext {
	var p = new(TypeSpecifierSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifierSeq
	return p
}

func (*TypeSpecifierSeqContext) IsTypeSpecifierSeqContext() {}

func NewTypeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecifierSeqContext {
	var p = new(TypeSpecifierSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeSpecifierSeq

	return p
}

func (s *TypeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecifierSeqContext) AllTypeSpecifier() []ITypeSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeSpecifierContext)(nil)).Elem())
	var tst = make([]ITypeSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeSpecifierContext)
		}
	}

	return tst
}

func (s *TypeSpecifierSeqContext) TypeSpecifier(i int) ITypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *TypeSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *TypeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecifierSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeSpecifierSeq(s)
	}
}

func (s *TypeSpecifierSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeSpecifierSeq(s)
	}
}

func (p *CPP14Parser) TypeSpecifierSeq() (localctx ITypeSpecifierSeqContext) {
	localctx = NewTypeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CPP14ParserRULE_typeSpecifierSeq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1070)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1069)
				p.TypeSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1072)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext())
	}
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1074)
			p.AttributeSpecifierSeq()
		}

	}

	return localctx
}

// ITrailingTypeSpecifierSeqContext is an interface to support dynamic dispatch.
type ITrailingTypeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingTypeSpecifierSeqContext differentiates from other interfaces.
	IsTrailingTypeSpecifierSeqContext()
}

type TrailingTypeSpecifierSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingTypeSpecifierSeqContext() *TrailingTypeSpecifierSeqContext {
	var p = new(TrailingTypeSpecifierSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifierSeq
	return p
}

func (*TrailingTypeSpecifierSeqContext) IsTrailingTypeSpecifierSeqContext() {}

func NewTrailingTypeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingTypeSpecifierSeqContext {
	var p = new(TrailingTypeSpecifierSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifierSeq

	return p
}

func (s *TrailingTypeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingTypeSpecifierSeqContext) AllTrailingTypeSpecifier() []ITrailingTypeSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITrailingTypeSpecifierContext)(nil)).Elem())
	var tst = make([]ITrailingTypeSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITrailingTypeSpecifierContext)
		}
	}

	return tst
}

func (s *TrailingTypeSpecifierSeqContext) TrailingTypeSpecifier(i int) ITrailingTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingTypeSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *TrailingTypeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingTypeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingTypeSpecifierSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTrailingTypeSpecifierSeq(s)
	}
}

func (s *TrailingTypeSpecifierSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTrailingTypeSpecifierSeq(s)
	}
}

func (p *CPP14Parser) TrailingTypeSpecifierSeq() (localctx ITrailingTypeSpecifierSeqContext) {
	localctx = NewTrailingTypeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CPP14ParserRULE_trailingTypeSpecifierSeq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1077)
				p.TrailingTypeSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext())
	}
	p.SetState(1083)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1082)
			p.AttributeSpecifierSeq()
		}

	}

	return localctx
}

// ISimpleTypeLengthModifierContext is an interface to support dynamic dispatch.
type ISimpleTypeLengthModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleTypeLengthModifierContext differentiates from other interfaces.
	IsSimpleTypeLengthModifierContext()
}

type SimpleTypeLengthModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeLengthModifierContext() *SimpleTypeLengthModifierContext {
	var p = new(SimpleTypeLengthModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeLengthModifier
	return p
}

func (*SimpleTypeLengthModifierContext) IsSimpleTypeLengthModifierContext() {}

func NewSimpleTypeLengthModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeLengthModifierContext {
	var p = new(SimpleTypeLengthModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeLengthModifier

	return p
}

func (s *SimpleTypeLengthModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeLengthModifierContext) Short() antlr.TerminalNode {
	return s.GetToken(CPP14ParserShort, 0)
}

func (s *SimpleTypeLengthModifierContext) Long() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLong, 0)
}

func (s *SimpleTypeLengthModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeLengthModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeLengthModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleTypeLengthModifier(s)
	}
}

func (s *SimpleTypeLengthModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleTypeLengthModifier(s)
	}
}

func (p *CPP14Parser) SimpleTypeLengthModifier() (localctx ISimpleTypeLengthModifierContext) {
	localctx = NewSimpleTypeLengthModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CPP14ParserRULE_simpleTypeLengthModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1085)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserLong || _la == CPP14ParserShort) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISimpleTypeSignednessModifierContext is an interface to support dynamic dispatch.
type ISimpleTypeSignednessModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleTypeSignednessModifierContext differentiates from other interfaces.
	IsSimpleTypeSignednessModifierContext()
}

type SimpleTypeSignednessModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeSignednessModifierContext() *SimpleTypeSignednessModifierContext {
	var p = new(SimpleTypeSignednessModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSignednessModifier
	return p
}

func (*SimpleTypeSignednessModifierContext) IsSimpleTypeSignednessModifierContext() {}

func NewSimpleTypeSignednessModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeSignednessModifierContext {
	var p = new(SimpleTypeSignednessModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeSignednessModifier

	return p
}

func (s *SimpleTypeSignednessModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeSignednessModifierContext) Unsigned() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnsigned, 0)
}

func (s *SimpleTypeSignednessModifierContext) Signed() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSigned, 0)
}

func (s *SimpleTypeSignednessModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeSignednessModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeSignednessModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleTypeSignednessModifier(s)
	}
}

func (s *SimpleTypeSignednessModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleTypeSignednessModifier(s)
	}
}

func (p *CPP14Parser) SimpleTypeSignednessModifier() (localctx ISimpleTypeSignednessModifierContext) {
	localctx = NewSimpleTypeSignednessModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CPP14ParserRULE_simpleTypeSignednessModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1087)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserSigned || _la == CPP14ParserUnsigned) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISimpleTypeSpecifierContext is an interface to support dynamic dispatch.
type ISimpleTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleTypeSpecifierContext differentiates from other interfaces.
	IsSimpleTypeSpecifierContext()
}

type SimpleTypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeSpecifierContext() *SimpleTypeSpecifierContext {
	var p = new(SimpleTypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSpecifier
	return p
}

func (*SimpleTypeSpecifierContext) IsSimpleTypeSpecifierContext() {}

func NewSimpleTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeSpecifierContext {
	var p = new(SimpleTypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeSpecifier

	return p
}

func (s *SimpleTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeSpecifierContext) TheTypeName() ITheTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *SimpleTypeSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *SimpleTypeSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *SimpleTypeSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *SimpleTypeSpecifierContext) SimpleTypeSignednessModifier() ISimpleTypeSignednessModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTypeSignednessModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSignednessModifierContext)
}

func (s *SimpleTypeSpecifierContext) AllSimpleTypeLengthModifier() []ISimpleTypeLengthModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleTypeLengthModifierContext)(nil)).Elem())
	var tst = make([]ISimpleTypeLengthModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleTypeLengthModifierContext)
		}
	}

	return tst
}

func (s *SimpleTypeSpecifierContext) SimpleTypeLengthModifier(i int) ISimpleTypeLengthModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTypeLengthModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeLengthModifierContext)
}

func (s *SimpleTypeSpecifierContext) Char() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar, 0)
}

func (s *SimpleTypeSpecifierContext) Char16() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar16, 0)
}

func (s *SimpleTypeSpecifierContext) Char32() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar32, 0)
}

func (s *SimpleTypeSpecifierContext) Wchar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWchar, 0)
}

func (s *SimpleTypeSpecifierContext) Bool() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBool, 0)
}

func (s *SimpleTypeSpecifierContext) Int() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInt, 0)
}

func (s *SimpleTypeSpecifierContext) Float() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloat, 0)
}

func (s *SimpleTypeSpecifierContext) Double() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDouble, 0)
}

func (s *SimpleTypeSpecifierContext) Void() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVoid, 0)
}

func (s *SimpleTypeSpecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *SimpleTypeSpecifierContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *SimpleTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleTypeSpecifier(s)
	}
}

func (s *SimpleTypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleTypeSpecifier(s)
	}
}

func (p *CPP14Parser) SimpleTypeSpecifier() (localctx ISimpleTypeSpecifierContext) {
	localctx = NewSimpleTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CPP14ParserRULE_simpleTypeSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1090)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1089)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1092)
			p.TheTypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1093)
			p.nestedNameSpecifier(0)
		}
		{
			p.SetState(1094)
			p.Match(CPP14ParserTemplate)
		}
		{
			p.SetState(1095)
			p.SimpleTemplateId()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1097)
			p.SimpleTypeSignednessModifier()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1098)
				p.SimpleTypeSignednessModifier()
			}

		}
		p.SetState(1102)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1101)
					p.SimpleTypeLengthModifier()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1104)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext())
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1106)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1109)
			p.Match(CPP14ParserChar)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1110)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1113)
			p.Match(CPP14ParserChar16)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1114)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1117)
			p.Match(CPP14ParserChar32)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1118)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1121)
			p.Match(CPP14ParserWchar)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1122)
			p.Match(CPP14ParserBool)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1123)
				p.SimpleTypeSignednessModifier()
			}

		}
		p.SetState(1129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CPP14ParserLong || _la == CPP14ParserShort {
			{
				p.SetState(1126)
				p.SimpleTypeLengthModifier()
			}

			p.SetState(1131)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1132)
			p.Match(CPP14ParserInt)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1133)
			p.Match(CPP14ParserFloat)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		p.SetState(1135)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserLong || _la == CPP14ParserShort {
			{
				p.SetState(1134)
				p.SimpleTypeLengthModifier()
			}

		}
		{
			p.SetState(1137)
			p.Match(CPP14ParserDouble)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1138)
			p.Match(CPP14ParserVoid)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1139)
			p.Match(CPP14ParserAuto)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1140)
			p.DecltypeSpecifier()
		}

	}

	return localctx
}

// ITheTypeNameContext is an interface to support dynamic dispatch.
type ITheTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheTypeNameContext differentiates from other interfaces.
	IsTheTypeNameContext()
}

type TheTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheTypeNameContext() *TheTypeNameContext {
	var p = new(TheTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeName
	return p
}

func (*TheTypeNameContext) IsTheTypeNameContext() {}

func NewTheTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheTypeNameContext {
	var p = new(TheTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theTypeName

	return p
}

func (s *TheTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TheTypeNameContext) ClassName() IClassNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *TheTypeNameContext) EnumName() IEnumNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumNameContext)
}

func (s *TheTypeNameContext) TypedefName() ITypedefNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypedefNameContext)
}

func (s *TheTypeNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TheTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTheTypeName(s)
	}
}

func (s *TheTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTheTypeName(s)
	}
}

func (p *CPP14Parser) TheTypeName() (localctx ITheTypeNameContext) {
	localctx = NewTheTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, CPP14ParserRULE_theTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1147)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1143)
			p.ClassName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1144)
			p.EnumName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1145)
			p.TypedefName()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1146)
			p.SimpleTemplateId()
		}

	}

	return localctx
}

// IDecltypeSpecifierContext is an interface to support dynamic dispatch.
type IDecltypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecltypeSpecifierContext differentiates from other interfaces.
	IsDecltypeSpecifierContext()
}

type DecltypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecltypeSpecifierContext() *DecltypeSpecifierContext {
	var p = new(DecltypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_decltypeSpecifier
	return p
}

func (*DecltypeSpecifierContext) IsDecltypeSpecifierContext() {}

func NewDecltypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecltypeSpecifierContext {
	var p = new(DecltypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_decltypeSpecifier

	return p
}

func (s *DecltypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DecltypeSpecifierContext) Decltype() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDecltype, 0)
}

func (s *DecltypeSpecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DecltypeSpecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DecltypeSpecifierContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DecltypeSpecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *DecltypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecltypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecltypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDecltypeSpecifier(s)
	}
}

func (s *DecltypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDecltypeSpecifier(s)
	}
}

func (p *CPP14Parser) DecltypeSpecifier() (localctx IDecltypeSpecifierContext) {
	localctx = NewDecltypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CPP14ParserRULE_decltypeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1149)
		p.Match(CPP14ParserDecltype)
	}
	{
		p.SetState(1150)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(1153)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1151)
			p.Expression()
		}

	case 2:
		{
			p.SetState(1152)
			p.Match(CPP14ParserAuto)
		}

	}
	{
		p.SetState(1155)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// IElaboratedTypeSpecifierContext is an interface to support dynamic dispatch.
type IElaboratedTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElaboratedTypeSpecifierContext differentiates from other interfaces.
	IsElaboratedTypeSpecifierContext()
}

type ElaboratedTypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElaboratedTypeSpecifierContext() *ElaboratedTypeSpecifierContext {
	var p = new(ElaboratedTypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_elaboratedTypeSpecifier
	return p
}

func (*ElaboratedTypeSpecifierContext) IsElaboratedTypeSpecifierContext() {}

func NewElaboratedTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElaboratedTypeSpecifierContext {
	var p = new(ElaboratedTypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_elaboratedTypeSpecifier

	return p
}

func (s *ElaboratedTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ElaboratedTypeSpecifierContext) ClassKey() IClassKeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassKeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassKeyContext)
}

func (s *ElaboratedTypeSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ElaboratedTypeSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *ElaboratedTypeSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ElaboratedTypeSpecifierContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ElaboratedTypeSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ElaboratedTypeSpecifierContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *ElaboratedTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElaboratedTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElaboratedTypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterElaboratedTypeSpecifier(s)
	}
}

func (s *ElaboratedTypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitElaboratedTypeSpecifier(s)
	}
}

func (p *CPP14Parser) ElaboratedTypeSpecifier() (localctx IElaboratedTypeSpecifierContext) {
	localctx = NewElaboratedTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CPP14ParserRULE_elaboratedTypeSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1179)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1157)
			p.ClassKey()
		}
		p.SetState(1172)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1159)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
				{
					p.SetState(1158)
					p.AttributeSpecifierSeq()
				}

			}
			p.SetState(1162)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1161)
					p.nestedNameSpecifier(0)
				}

			}
			{
				p.SetState(1164)
				p.Match(CPP14ParserIdentifier)
			}

		case 2:
			{
				p.SetState(1165)
				p.SimpleTemplateId()
			}

		case 3:
			{
				p.SetState(1166)
				p.nestedNameSpecifier(0)
			}
			p.SetState(1168)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserTemplate {
				{
					p.SetState(1167)
					p.Match(CPP14ParserTemplate)
				}

			}
			{
				p.SetState(1170)
				p.SimpleTemplateId()
			}

		}

	case CPP14ParserEnum:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1174)
			p.Match(CPP14ParserEnum)
		}
		p.SetState(1176)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1175)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1178)
			p.Match(CPP14ParserIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnumNameContext is an interface to support dynamic dispatch.
type IEnumNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumNameContext differentiates from other interfaces.
	IsEnumNameContext()
}

type EnumNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumNameContext() *EnumNameContext {
	var p = new(EnumNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumName
	return p
}

func (*EnumNameContext) IsEnumNameContext() {}

func NewEnumNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumNameContext {
	var p = new(EnumNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumName

	return p
}

func (s *EnumNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumName(s)
	}
}

func (s *EnumNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumName(s)
	}
}

func (p *CPP14Parser) EnumName() (localctx IEnumNameContext) {
	localctx = NewEnumNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, CPP14ParserRULE_enumName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1181)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// IEnumSpecifierContext is an interface to support dynamic dispatch.
type IEnumSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSpecifierContext differentiates from other interfaces.
	IsEnumSpecifierContext()
}

type EnumSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSpecifierContext() *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumSpecifier
	return p
}

func (*EnumSpecifierContext) IsEnumSpecifierContext() {}

func NewEnumSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumSpecifier

	return p
}

func (s *EnumSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSpecifierContext) EnumHead() IEnumHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumHeadContext)
}

func (s *EnumSpecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *EnumSpecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *EnumSpecifierContext) EnumeratorList() IEnumeratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorListContext)
}

func (s *EnumSpecifierContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *EnumSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumSpecifier(s)
	}
}

func (s *EnumSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumSpecifier(s)
	}
}

func (p *CPP14Parser) EnumSpecifier() (localctx IEnumSpecifierContext) {
	localctx = NewEnumSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CPP14ParserRULE_enumSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1183)
		p.EnumHead()
	}
	{
		p.SetState(1184)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserIdentifier {
		{
			p.SetState(1185)
			p.EnumeratorList()
		}
		p.SetState(1187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1186)
				p.Match(CPP14ParserComma)
			}

		}

	}
	{
		p.SetState(1191)
		p.Match(CPP14ParserRightBrace)
	}

	return localctx
}

// IEnumHeadContext is an interface to support dynamic dispatch.
type IEnumHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumHeadContext differentiates from other interfaces.
	IsEnumHeadContext()
}

type EnumHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumHeadContext() *EnumHeadContext {
	var p = new(EnumHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumHead
	return p
}

func (*EnumHeadContext) IsEnumHeadContext() {}

func NewEnumHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumHeadContext {
	var p = new(EnumHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumHead

	return p
}

func (s *EnumHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumHeadContext) Enumkey() IEnumkeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumkeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *EnumHeadContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *EnumHeadContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumHeadContext) Enumbase() IEnumbaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumbaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *EnumHeadContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *EnumHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumHead(s)
	}
}

func (s *EnumHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumHead(s)
	}
}

func (p *CPP14Parser) EnumHead() (localctx IEnumHeadContext) {
	localctx = NewEnumHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CPP14ParserRULE_enumHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1193)
		p.Enumkey()
	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1194)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		p.SetState(1198)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1197)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1200)
			p.Match(CPP14ParserIdentifier)
		}

	}
	p.SetState(1204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1203)
			p.Enumbase()
		}

	}

	return localctx
}

// IOpaqueEnumDeclarationContext is an interface to support dynamic dispatch.
type IOpaqueEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpaqueEnumDeclarationContext differentiates from other interfaces.
	IsOpaqueEnumDeclarationContext()
}

type OpaqueEnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpaqueEnumDeclarationContext() *OpaqueEnumDeclarationContext {
	var p = new(OpaqueEnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_opaqueEnumDeclaration
	return p
}

func (*OpaqueEnumDeclarationContext) IsOpaqueEnumDeclarationContext() {}

func NewOpaqueEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpaqueEnumDeclarationContext {
	var p = new(OpaqueEnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_opaqueEnumDeclaration

	return p
}

func (s *OpaqueEnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *OpaqueEnumDeclarationContext) Enumkey() IEnumkeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumkeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *OpaqueEnumDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OpaqueEnumDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *OpaqueEnumDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *OpaqueEnumDeclarationContext) Enumbase() IEnumbaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumbaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *OpaqueEnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpaqueEnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpaqueEnumDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterOpaqueEnumDeclaration(s)
	}
}

func (s *OpaqueEnumDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitOpaqueEnumDeclaration(s)
	}
}

func (p *CPP14Parser) OpaqueEnumDeclaration() (localctx IOpaqueEnumDeclarationContext) {
	localctx = NewOpaqueEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, CPP14ParserRULE_opaqueEnumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1206)
		p.Enumkey()
	}
	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1207)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1210)
		p.Match(CPP14ParserIdentifier)
	}
	p.SetState(1212)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1211)
			p.Enumbase()
		}

	}
	{
		p.SetState(1214)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IEnumkeyContext is an interface to support dynamic dispatch.
type IEnumkeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumkeyContext differentiates from other interfaces.
	IsEnumkeyContext()
}

type EnumkeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumkeyContext() *EnumkeyContext {
	var p = new(EnumkeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumkey
	return p
}

func (*EnumkeyContext) IsEnumkeyContext() {}

func NewEnumkeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumkeyContext {
	var p = new(EnumkeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumkey

	return p
}

func (s *EnumkeyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumkeyContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *EnumkeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *EnumkeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *EnumkeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumkeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumkeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumkey(s)
	}
}

func (s *EnumkeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumkey(s)
	}
}

func (p *CPP14Parser) Enumkey() (localctx IEnumkeyContext) {
	localctx = NewEnumkeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, CPP14ParserRULE_enumkey)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1216)
		p.Match(CPP14ParserEnum)
	}
	p.SetState(1218)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserClass || _la == CPP14ParserStruct {
		{
			p.SetState(1217)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserClass || _la == CPP14ParserStruct) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IEnumbaseContext is an interface to support dynamic dispatch.
type IEnumbaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumbaseContext differentiates from other interfaces.
	IsEnumbaseContext()
}

type EnumbaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumbaseContext() *EnumbaseContext {
	var p = new(EnumbaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumbase
	return p
}

func (*EnumbaseContext) IsEnumbaseContext() {}

func NewEnumbaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumbaseContext {
	var p = new(EnumbaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumbase

	return p
}

func (s *EnumbaseContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumbaseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *EnumbaseContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *EnumbaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumbaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumbaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumbase(s)
	}
}

func (s *EnumbaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumbase(s)
	}
}

func (p *CPP14Parser) Enumbase() (localctx IEnumbaseContext) {
	localctx = NewEnumbaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, CPP14ParserRULE_enumbase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1220)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(1221)
		p.TypeSpecifierSeq()
	}

	return localctx
}

// IEnumeratorListContext is an interface to support dynamic dispatch.
type IEnumeratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorListContext differentiates from other interfaces.
	IsEnumeratorListContext()
}

type EnumeratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorListContext() *EnumeratorListContext {
	var p = new(EnumeratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorList
	return p
}

func (*EnumeratorListContext) IsEnumeratorListContext() {}

func NewEnumeratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorListContext {
	var p = new(EnumeratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratorList

	return p
}

func (s *EnumeratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorListContext) AllEnumeratorDefinition() []IEnumeratorDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumeratorDefinitionContext)(nil)).Elem())
	var tst = make([]IEnumeratorDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumeratorDefinitionContext)
		}
	}

	return tst
}

func (s *EnumeratorListContext) EnumeratorDefinition(i int) IEnumeratorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorDefinitionContext)
}

func (s *EnumeratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *EnumeratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *EnumeratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumeratorList(s)
	}
}

func (s *EnumeratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumeratorList(s)
	}
}

func (p *CPP14Parser) EnumeratorList() (localctx IEnumeratorListContext) {
	localctx = NewEnumeratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, CPP14ParserRULE_enumeratorList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1223)
		p.EnumeratorDefinition()
	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1224)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1225)
				p.EnumeratorDefinition()
			}

		}
		p.SetState(1230)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())
	}

	return localctx
}

// IEnumeratorDefinitionContext is an interface to support dynamic dispatch.
type IEnumeratorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorDefinitionContext differentiates from other interfaces.
	IsEnumeratorDefinitionContext()
}

type EnumeratorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorDefinitionContext() *EnumeratorDefinitionContext {
	var p = new(EnumeratorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorDefinition
	return p
}

func (*EnumeratorDefinitionContext) IsEnumeratorDefinitionContext() {}

func NewEnumeratorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorDefinitionContext {
	var p = new(EnumeratorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratorDefinition

	return p
}

func (s *EnumeratorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorDefinitionContext) Enumerator() IEnumeratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorContext)
}

func (s *EnumeratorDefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *EnumeratorDefinitionContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *EnumeratorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumeratorDefinition(s)
	}
}

func (s *EnumeratorDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumeratorDefinition(s)
	}
}

func (p *CPP14Parser) EnumeratorDefinition() (localctx IEnumeratorDefinitionContext) {
	localctx = NewEnumeratorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, CPP14ParserRULE_enumeratorDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1231)
		p.Enumerator()
	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAssign {
		{
			p.SetState(1232)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1233)
			p.ConstantExpression()
		}

	}

	return localctx
}

// IEnumeratorContext is an interface to support dynamic dispatch.
type IEnumeratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorContext differentiates from other interfaces.
	IsEnumeratorContext()
}

type EnumeratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorContext() *EnumeratorContext {
	var p = new(EnumeratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumerator
	return p
}

func (*EnumeratorContext) IsEnumeratorContext() {}

func NewEnumeratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorContext {
	var p = new(EnumeratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumerator

	return p
}

func (s *EnumeratorContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumeratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterEnumerator(s)
	}
}

func (s *EnumeratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitEnumerator(s)
	}
}

func (p *CPP14Parser) Enumerator() (localctx IEnumeratorContext) {
	localctx = NewEnumeratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, CPP14ParserRULE_enumerator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1236)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// INamespaceNameContext is an interface to support dynamic dispatch.
type INamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceNameContext differentiates from other interfaces.
	IsNamespaceNameContext()
}

type NamespaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceNameContext() *NamespaceNameContext {
	var p = new(NamespaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceName
	return p
}

func (*NamespaceNameContext) IsNamespaceNameContext() {}

func NewNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceNameContext {
	var p = new(NamespaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceName

	return p
}

func (s *NamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceNameContext) OriginalNamespaceName() IOriginalNamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOriginalNamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOriginalNamespaceNameContext)
}

func (s *NamespaceNameContext) NamespaceAlias() INamespaceAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceAliasContext)
}

func (s *NamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNamespaceName(s)
	}
}

func (s *NamespaceNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNamespaceName(s)
	}
}

func (p *CPP14Parser) NamespaceName() (localctx INamespaceNameContext) {
	localctx = NewNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, CPP14ParserRULE_namespaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1238)
			p.OriginalNamespaceName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1239)
			p.NamespaceAlias()
		}

	}

	return localctx
}

// IOriginalNamespaceNameContext is an interface to support dynamic dispatch.
type IOriginalNamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOriginalNamespaceNameContext differentiates from other interfaces.
	IsOriginalNamespaceNameContext()
}

type OriginalNamespaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOriginalNamespaceNameContext() *OriginalNamespaceNameContext {
	var p = new(OriginalNamespaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_originalNamespaceName
	return p
}

func (*OriginalNamespaceNameContext) IsOriginalNamespaceNameContext() {}

func NewOriginalNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OriginalNamespaceNameContext {
	var p = new(OriginalNamespaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_originalNamespaceName

	return p
}

func (s *OriginalNamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OriginalNamespaceNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OriginalNamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OriginalNamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OriginalNamespaceNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterOriginalNamespaceName(s)
	}
}

func (s *OriginalNamespaceNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitOriginalNamespaceName(s)
	}
}

func (p *CPP14Parser) OriginalNamespaceName() (localctx IOriginalNamespaceNameContext) {
	localctx = NewOriginalNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, CPP14ParserRULE_originalNamespaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1242)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// INamespaceDefinitionContext is an interface to support dynamic dispatch.
type INamespaceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNamespaceBody returns the namespaceBody rule contexts.
	GetNamespaceBody() IDeclarationseqContext

	// SetNamespaceBody sets the namespaceBody rule contexts.
	SetNamespaceBody(IDeclarationseqContext)

	// IsNamespaceDefinitionContext differentiates from other interfaces.
	IsNamespaceDefinitionContext()
}

type NamespaceDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	namespaceBody IDeclarationseqContext
}

func NewEmptyNamespaceDefinitionContext() *NamespaceDefinitionContext {
	var p = new(NamespaceDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceDefinition
	return p
}

func (*NamespaceDefinitionContext) IsNamespaceDefinitionContext() {}

func NewNamespaceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDefinitionContext {
	var p = new(NamespaceDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceDefinition

	return p
}

func (s *NamespaceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDefinitionContext) GetNamespaceBody() IDeclarationseqContext {
	return s.namespaceBody
}

func (s *NamespaceDefinitionContext) SetNamespaceBody(v IDeclarationseqContext) { s.namespaceBody = v }

func (s *NamespaceDefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *NamespaceDefinitionContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *NamespaceDefinitionContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *NamespaceDefinitionContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *NamespaceDefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceDefinitionContext) OriginalNamespaceName() IOriginalNamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOriginalNamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOriginalNamespaceNameContext)
}

func (s *NamespaceDefinitionContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *NamespaceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNamespaceDefinition(s)
	}
}

func (s *NamespaceDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNamespaceDefinition(s)
	}
}

func (p *CPP14Parser) NamespaceDefinition() (localctx INamespaceDefinitionContext) {
	localctx = NewNamespaceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, CPP14ParserRULE_namespaceDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1245)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserInline {
		{
			p.SetState(1244)
			p.Match(CPP14ParserInline)
		}

	}
	{
		p.SetState(1247)
		p.Match(CPP14ParserNamespace)
	}
	p.SetState(1250)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1248)
			p.Match(CPP14ParserIdentifier)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1249)
			p.OriginalNamespaceName()
		}

	}
	{
		p.SetState(1252)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1254)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAsm-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserNamespace-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
		{
			p.SetState(1253)

			var _x = p.Declarationseq()

			localctx.(*NamespaceDefinitionContext).namespaceBody = _x
		}

	}
	{
		p.SetState(1256)
		p.Match(CPP14ParserRightBrace)
	}

	return localctx
}

// INamespaceAliasContext is an interface to support dynamic dispatch.
type INamespaceAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceAliasContext differentiates from other interfaces.
	IsNamespaceAliasContext()
}

type NamespaceAliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceAliasContext() *NamespaceAliasContext {
	var p = new(NamespaceAliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAlias
	return p
}

func (*NamespaceAliasContext) IsNamespaceAliasContext() {}

func NewNamespaceAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceAliasContext {
	var p = new(NamespaceAliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceAlias

	return p
}

func (s *NamespaceAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceAliasContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNamespaceAlias(s)
	}
}

func (s *NamespaceAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNamespaceAlias(s)
	}
}

func (p *CPP14Parser) NamespaceAlias() (localctx INamespaceAliasContext) {
	localctx = NewNamespaceAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, CPP14ParserRULE_namespaceAlias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// INamespaceAliasDefinitionContext is an interface to support dynamic dispatch.
type INamespaceAliasDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceAliasDefinitionContext differentiates from other interfaces.
	IsNamespaceAliasDefinitionContext()
}

type NamespaceAliasDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceAliasDefinitionContext() *NamespaceAliasDefinitionContext {
	var p = new(NamespaceAliasDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAliasDefinition
	return p
}

func (*NamespaceAliasDefinitionContext) IsNamespaceAliasDefinitionContext() {}

func NewNamespaceAliasDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceAliasDefinitionContext {
	var p = new(NamespaceAliasDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceAliasDefinition

	return p
}

func (s *NamespaceAliasDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceAliasDefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *NamespaceAliasDefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceAliasDefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *NamespaceAliasDefinitionContext) Qualifiednamespacespecifier() IQualifiednamespacespecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiednamespacespecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiednamespacespecifierContext)
}

func (s *NamespaceAliasDefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *NamespaceAliasDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceAliasDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceAliasDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNamespaceAliasDefinition(s)
	}
}

func (s *NamespaceAliasDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNamespaceAliasDefinition(s)
	}
}

func (p *CPP14Parser) NamespaceAliasDefinition() (localctx INamespaceAliasDefinitionContext) {
	localctx = NewNamespaceAliasDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, CPP14ParserRULE_namespaceAliasDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1260)
		p.Match(CPP14ParserNamespace)
	}
	{
		p.SetState(1261)
		p.Match(CPP14ParserIdentifier)
	}
	{
		p.SetState(1262)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(1263)
		p.Qualifiednamespacespecifier()
	}
	{
		p.SetState(1264)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IQualifiednamespacespecifierContext is an interface to support dynamic dispatch.
type IQualifiednamespacespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiednamespacespecifierContext differentiates from other interfaces.
	IsQualifiednamespacespecifierContext()
}

type QualifiednamespacespecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiednamespacespecifierContext() *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier
	return p
}

func (*QualifiednamespacespecifierContext) IsQualifiednamespacespecifierContext() {}

func NewQualifiednamespacespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier

	return p
}

func (s *QualifiednamespacespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiednamespacespecifierContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *QualifiednamespacespecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *QualifiednamespacespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiednamespacespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiednamespacespecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterQualifiednamespacespecifier(s)
	}
}

func (s *QualifiednamespacespecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitQualifiednamespacespecifier(s)
	}
}

func (p *CPP14Parser) Qualifiednamespacespecifier() (localctx IQualifiednamespacespecifierContext) {
	localctx = NewQualifiednamespacespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, CPP14ParserRULE_qualifiednamespacespecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1267)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1266)
			p.nestedNameSpecifier(0)
		}

	}
	{
		p.SetState(1269)
		p.NamespaceName()
	}

	return localctx
}

// IUsingDeclarationContext is an interface to support dynamic dispatch.
type IUsingDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingDeclarationContext differentiates from other interfaces.
	IsUsingDeclarationContext()
}

type UsingDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingDeclarationContext() *UsingDeclarationContext {
	var p = new(UsingDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDeclaration
	return p
}

func (*UsingDeclarationContext) IsUsingDeclarationContext() {}

func NewUsingDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingDeclarationContext {
	var p = new(UsingDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingDeclaration

	return p
}

func (s *UsingDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingDeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingDeclarationContext) UnqualifiedId() IUnqualifiedIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnqualifiedIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *UsingDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingDeclarationContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *UsingDeclarationContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *UsingDeclarationContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *UsingDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterUsingDeclaration(s)
	}
}

func (s *UsingDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitUsingDeclaration(s)
	}
}

func (p *CPP14Parser) UsingDeclaration() (localctx IUsingDeclarationContext) {
	localctx = NewUsingDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, CPP14ParserRULE_usingDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1271)
		p.Match(CPP14ParserUsing)
	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTypename_ {
			{
				p.SetState(1272)
				p.Match(CPP14ParserTypename_)
			}

		}
		{
			p.SetState(1275)
			p.nestedNameSpecifier(0)
		}

	case 2:
		{
			p.SetState(1276)
			p.Match(CPP14ParserDoublecolon)
		}

	}
	{
		p.SetState(1279)
		p.UnqualifiedId()
	}
	{
		p.SetState(1280)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IUsingDirectiveContext is an interface to support dynamic dispatch.
type IUsingDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingDirectiveContext differentiates from other interfaces.
	IsUsingDirectiveContext()
}

type UsingDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingDirectiveContext() *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDirective
	return p
}

func (*UsingDirectiveContext) IsUsingDirectiveContext() {}

func NewUsingDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingDirective

	return p
}

func (s *UsingDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingDirectiveContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingDirectiveContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *UsingDirectiveContext) NamespaceName() INamespaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *UsingDirectiveContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingDirectiveContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *UsingDirectiveContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *UsingDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterUsingDirective(s)
	}
}

func (s *UsingDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitUsingDirective(s)
	}
}

func (p *CPP14Parser) UsingDirective() (localctx IUsingDirectiveContext) {
	localctx = NewUsingDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, CPP14ParserRULE_usingDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1282)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1285)
		p.Match(CPP14ParserUsing)
	}
	{
		p.SetState(1286)
		p.Match(CPP14ParserNamespace)
	}
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1287)
			p.nestedNameSpecifier(0)
		}

	}
	{
		p.SetState(1290)
		p.NamespaceName()
	}
	{
		p.SetState(1291)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// IAsmDefinitionContext is an interface to support dynamic dispatch.
type IAsmDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsmDefinitionContext differentiates from other interfaces.
	IsAsmDefinitionContext()
}

type AsmDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsmDefinitionContext() *AsmDefinitionContext {
	var p = new(AsmDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_asmDefinition
	return p
}

func (*AsmDefinitionContext) IsAsmDefinitionContext() {}

func NewAsmDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsmDefinitionContext {
	var p = new(AsmDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_asmDefinition

	return p
}

func (s *AsmDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsmDefinitionContext) Asm() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAsm, 0)
}

func (s *AsmDefinitionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AsmDefinitionContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *AsmDefinitionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AsmDefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AsmDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsmDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsmDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAsmDefinition(s)
	}
}

func (s *AsmDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAsmDefinition(s)
	}
}

func (p *CPP14Parser) AsmDefinition() (localctx IAsmDefinitionContext) {
	localctx = NewAsmDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, CPP14ParserRULE_asmDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1293)
		p.Match(CPP14ParserAsm)
	}
	{
		p.SetState(1294)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(1295)
		p.Match(CPP14ParserStringLiteral)
	}
	{
		p.SetState(1296)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(1297)
		p.Match(CPP14ParserSemi)
	}

	return localctx
}

// ILinkageSpecificationContext is an interface to support dynamic dispatch.
type ILinkageSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinkageSpecificationContext differentiates from other interfaces.
	IsLinkageSpecificationContext()
}

type LinkageSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinkageSpecificationContext() *LinkageSpecificationContext {
	var p = new(LinkageSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_linkageSpecification
	return p
}

func (*LinkageSpecificationContext) IsLinkageSpecificationContext() {}

func NewLinkageSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinkageSpecificationContext {
	var p = new(LinkageSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_linkageSpecification

	return p
}

func (s *LinkageSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *LinkageSpecificationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *LinkageSpecificationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LinkageSpecificationContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *LinkageSpecificationContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *LinkageSpecificationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *LinkageSpecificationContext) Declarationseq() IDeclarationseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *LinkageSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinkageSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinkageSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLinkageSpecification(s)
	}
}

func (s *LinkageSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLinkageSpecification(s)
	}
}

func (p *CPP14Parser) LinkageSpecification() (localctx ILinkageSpecificationContext) {
	localctx = NewLinkageSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, CPP14ParserRULE_linkageSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1299)
		p.Match(CPP14ParserExtern)
	}
	{
		p.SetState(1300)
		p.Match(CPP14ParserStringLiteral)
	}
	p.SetState(1307)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace:
		{
			p.SetState(1301)
			p.Match(CPP14ParserLeftBrace)
		}
		p.SetState(1303)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAsm-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserNamespace-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
			{
				p.SetState(1302)
				p.Declarationseq()
			}

		}
		{
			p.SetState(1305)
			p.Match(CPP14ParserRightBrace)
		}

	case CPP14ParserAlignas, CPP14ParserAsm, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserNamespace, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStruct, CPP14ParserTemplate, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		{
			p.SetState(1306)
			p.Declaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttributeSpecifierSeqContext is an interface to support dynamic dispatch.
type IAttributeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeSpecifierSeqContext differentiates from other interfaces.
	IsAttributeSpecifierSeqContext()
}

type AttributeSpecifierSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeSpecifierSeqContext() *AttributeSpecifierSeqContext {
	var p = new(AttributeSpecifierSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifierSeq
	return p
}

func (*AttributeSpecifierSeqContext) IsAttributeSpecifierSeqContext() {}

func NewAttributeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeSpecifierSeqContext {
	var p = new(AttributeSpecifierSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeSpecifierSeq

	return p
}

func (s *AttributeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeSpecifierSeqContext) AllAttributeSpecifier() []IAttributeSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributeSpecifierContext)(nil)).Elem())
	var tst = make([]IAttributeSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributeSpecifierContext)
		}
	}

	return tst
}

func (s *AttributeSpecifierSeqContext) AttributeSpecifier(i int) IAttributeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierContext)
}

func (s *AttributeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeSpecifierSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeSpecifierSeq(s)
	}
}

func (s *AttributeSpecifierSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeSpecifierSeq(s)
	}
}

func (p *CPP14Parser) AttributeSpecifierSeq() (localctx IAttributeSpecifierSeqContext) {
	localctx = NewAttributeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, CPP14ParserRULE_attributeSpecifierSeq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1310)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1309)
				p.AttributeSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1312)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}

	return localctx
}

// IAttributeSpecifierContext is an interface to support dynamic dispatch.
type IAttributeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeSpecifierContext differentiates from other interfaces.
	IsAttributeSpecifierContext()
}

type AttributeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeSpecifierContext() *AttributeSpecifierContext {
	var p = new(AttributeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifier
	return p
}

func (*AttributeSpecifierContext) IsAttributeSpecifierContext() {}

func NewAttributeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeSpecifierContext {
	var p = new(AttributeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeSpecifier

	return p
}

func (s *AttributeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeSpecifierContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *AttributeSpecifierContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *AttributeSpecifierContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *AttributeSpecifierContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *AttributeSpecifierContext) AttributeList() IAttributeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeListContext)
}

func (s *AttributeSpecifierContext) Alignmentspecifier() IAlignmentspecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlignmentspecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlignmentspecifierContext)
}

func (s *AttributeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeSpecifier(s)
	}
}

func (s *AttributeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeSpecifier(s)
	}
}

func (p *CPP14Parser) AttributeSpecifier() (localctx IAttributeSpecifierContext) {
	localctx = NewAttributeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, CPP14ParserRULE_attributeSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1322)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1314)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(1315)
			p.Match(CPP14ParserLeftBracket)
		}
		p.SetState(1317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1316)
				p.AttributeList()
			}

		}
		{
			p.SetState(1319)
			p.Match(CPP14ParserRightBracket)
		}
		{
			p.SetState(1320)
			p.Match(CPP14ParserRightBracket)
		}

	case CPP14ParserAlignas:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1321)
			p.Alignmentspecifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlignmentspecifierContext is an interface to support dynamic dispatch.
type IAlignmentspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlignmentspecifierContext differentiates from other interfaces.
	IsAlignmentspecifierContext()
}

type AlignmentspecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlignmentspecifierContext() *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier
	return p
}

func (*AlignmentspecifierContext) IsAlignmentspecifierContext() {}

func NewAlignmentspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier

	return p
}

func (s *AlignmentspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentspecifierContext) Alignas() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignas, 0)
}

func (s *AlignmentspecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AlignmentspecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AlignmentspecifierContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *AlignmentspecifierContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *AlignmentspecifierContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AlignmentspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentspecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAlignmentspecifier(s)
	}
}

func (s *AlignmentspecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAlignmentspecifier(s)
	}
}

func (p *CPP14Parser) Alignmentspecifier() (localctx IAlignmentspecifierContext) {
	localctx = NewAlignmentspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, CPP14ParserRULE_alignmentspecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1324)
		p.Match(CPP14ParserAlignas)
	}
	{
		p.SetState(1325)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(1328)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1326)
			p.TheTypeId()
		}

	case 2:
		{
			p.SetState(1327)
			p.ConstantExpression()
		}

	}
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1330)
			p.Match(CPP14ParserEllipsis)
		}

	}
	{
		p.SetState(1333)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// IAttributeListContext is an interface to support dynamic dispatch.
type IAttributeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeListContext differentiates from other interfaces.
	IsAttributeListContext()
}

type AttributeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeListContext() *AttributeListContext {
	var p = new(AttributeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeList
	return p
}

func (*AttributeListContext) IsAttributeListContext() {}

func NewAttributeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeListContext {
	var p = new(AttributeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeList

	return p
}

func (s *AttributeListContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeListContext) AllAttribute() []IAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributeContext)(nil)).Elem())
	var tst = make([]IAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributeContext)
		}
	}

	return tst
}

func (s *AttributeListContext) Attribute(i int) IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributeListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *AttributeListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *AttributeListContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AttributeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeList(s)
	}
}

func (s *AttributeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeList(s)
	}
}

func (p *CPP14Parser) AttributeList() (localctx IAttributeListContext) {
	localctx = NewAttributeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, CPP14ParserRULE_attributeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1335)
		p.Attribute()
	}
	p.SetState(1340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1336)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1337)
			p.Attribute()
		}

		p.SetState(1342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1343)
			p.Match(CPP14ParserEllipsis)
		}

	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributeContext) AttributeNamespace() IAttributeNamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeNamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeNamespaceContext)
}

func (s *AttributeContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *AttributeContext) AttributeArgumentClause() IAttributeArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentClauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttribute(s)
	}
}

func (s *AttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttribute(s)
	}
}

func (p *CPP14Parser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, CPP14ParserRULE_attribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1346)
			p.AttributeNamespace()
		}
		{
			p.SetState(1347)
			p.Match(CPP14ParserDoublecolon)
		}

	}
	{
		p.SetState(1351)
		p.Match(CPP14ParserIdentifier)
	}
	p.SetState(1353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen {
		{
			p.SetState(1352)
			p.AttributeArgumentClause()
		}

	}

	return localctx
}

// IAttributeNamespaceContext is an interface to support dynamic dispatch.
type IAttributeNamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeNamespaceContext differentiates from other interfaces.
	IsAttributeNamespaceContext()
}

type AttributeNamespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNamespaceContext() *AttributeNamespaceContext {
	var p = new(AttributeNamespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeNamespace
	return p
}

func (*AttributeNamespaceContext) IsAttributeNamespaceContext() {}

func NewAttributeNamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNamespaceContext {
	var p = new(AttributeNamespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeNamespace

	return p
}

func (s *AttributeNamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNamespaceContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributeNamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeNamespace(s)
	}
}

func (s *AttributeNamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeNamespace(s)
	}
}

func (p *CPP14Parser) AttributeNamespace() (localctx IAttributeNamespaceContext) {
	localctx = NewAttributeNamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, CPP14ParserRULE_attributeNamespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1355)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// IAttributeArgumentClauseContext is an interface to support dynamic dispatch.
type IAttributeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentClauseContext differentiates from other interfaces.
	IsAttributeArgumentClauseContext()
}

type AttributeArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentClauseContext() *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeArgumentClause
	return p
}

func (*AttributeArgumentClauseContext) IsAttributeArgumentClauseContext() {}

func NewAttributeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeArgumentClause

	return p
}

func (s *AttributeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentClauseContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AttributeArgumentClauseContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AttributeArgumentClauseContext) BalancedTokenSeq() IBalancedTokenSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedTokenSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedTokenSeqContext)
}

func (s *AttributeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAttributeArgumentClause(s)
	}
}

func (s *AttributeArgumentClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAttributeArgumentClause(s)
	}
}

func (p *CPP14Parser) AttributeArgumentClause() (localctx IAttributeArgumentClauseContext) {
	localctx = NewAttributeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, CPP14ParserRULE_attributeArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1357)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(1359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserMultiLineMacro)|(1<<CPP14ParserDirective)|(1<<CPP14ParserAlignas)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAsm)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserBreak)|(1<<CPP14ParserCase)|(1<<CPP14ParserCatch)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserContinue)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDefault)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDo)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CPP14ParserElse-32))|(1<<(CPP14ParserEnum-32))|(1<<(CPP14ParserExplicit-32))|(1<<(CPP14ParserExport-32))|(1<<(CPP14ParserExtern-32))|(1<<(CPP14ParserFalse_-32))|(1<<(CPP14ParserFinal-32))|(1<<(CPP14ParserFloat-32))|(1<<(CPP14ParserFor-32))|(1<<(CPP14ParserFriend-32))|(1<<(CPP14ParserGoto-32))|(1<<(CPP14ParserIf-32))|(1<<(CPP14ParserInline-32))|(1<<(CPP14ParserInt-32))|(1<<(CPP14ParserLong-32))|(1<<(CPP14ParserMutable-32))|(1<<(CPP14ParserNamespace-32))|(1<<(CPP14ParserNew-32))|(1<<(CPP14ParserNoexcept-32))|(1<<(CPP14ParserNullptr-32))|(1<<(CPP14ParserOperator-32))|(1<<(CPP14ParserOverride-32))|(1<<(CPP14ParserPrivate-32))|(1<<(CPP14ParserProtected-32))|(1<<(CPP14ParserPublic-32))|(1<<(CPP14ParserRegister-32))|(1<<(CPP14ParserReinterpret_cast-32))|(1<<(CPP14ParserReturn-32))|(1<<(CPP14ParserShort-32))|(1<<(CPP14ParserSigned-32))|(1<<(CPP14ParserSizeof-32))|(1<<(CPP14ParserStatic-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(CPP14ParserStatic_assert-64))|(1<<(CPP14ParserStatic_cast-64))|(1<<(CPP14ParserStruct-64))|(1<<(CPP14ParserSwitch-64))|(1<<(CPP14ParserTemplate-64))|(1<<(CPP14ParserThis-64))|(1<<(CPP14ParserThread_local-64))|(1<<(CPP14ParserThrow-64))|(1<<(CPP14ParserTrue_-64))|(1<<(CPP14ParserTry-64))|(1<<(CPP14ParserTypedef-64))|(1<<(CPP14ParserTypeid_-64))|(1<<(CPP14ParserTypename_-64))|(1<<(CPP14ParserUnion-64))|(1<<(CPP14ParserUnsigned-64))|(1<<(CPP14ParserUsing-64))|(1<<(CPP14ParserVirtual-64))|(1<<(CPP14ParserVoid-64))|(1<<(CPP14ParserVolatile-64))|(1<<(CPP14ParserWchar-64))|(1<<(CPP14ParserWhile-64))|(1<<(CPP14ParserLeftParen-64))|(1<<(CPP14ParserLeftBracket-64))|(1<<(CPP14ParserLeftBrace-64))|(1<<(CPP14ParserPlus-64))|(1<<(CPP14ParserMinus-64))|(1<<(CPP14ParserStar-64))|(1<<(CPP14ParserDiv-64))|(1<<(CPP14ParserMod-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(CPP14ParserCaret-96))|(1<<(CPP14ParserAnd-96))|(1<<(CPP14ParserOr-96))|(1<<(CPP14ParserTilde-96))|(1<<(CPP14ParserNot-96))|(1<<(CPP14ParserAssign-96))|(1<<(CPP14ParserLess-96))|(1<<(CPP14ParserGreater-96))|(1<<(CPP14ParserPlusAssign-96))|(1<<(CPP14ParserMinusAssign-96))|(1<<(CPP14ParserStarAssign-96))|(1<<(CPP14ParserDivAssign-96))|(1<<(CPP14ParserModAssign-96))|(1<<(CPP14ParserXorAssign-96))|(1<<(CPP14ParserAndAssign-96))|(1<<(CPP14ParserOrAssign-96))|(1<<(CPP14ParserLeftShiftAssign-96))|(1<<(CPP14ParserRightShiftAssign-96))|(1<<(CPP14ParserEqual-96))|(1<<(CPP14ParserNotEqual-96))|(1<<(CPP14ParserLessEqual-96))|(1<<(CPP14ParserGreaterEqual-96))|(1<<(CPP14ParserAndAnd-96))|(1<<(CPP14ParserOrOr-96))|(1<<(CPP14ParserPlusPlus-96))|(1<<(CPP14ParserMinusMinus-96))|(1<<(CPP14ParserComma-96))|(1<<(CPP14ParserArrowStar-96))|(1<<(CPP14ParserArrow-96))|(1<<(CPP14ParserQuestion-96))|(1<<(CPP14ParserColon-96))|(1<<(CPP14ParserDoublecolon-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(CPP14ParserSemi-128))|(1<<(CPP14ParserDot-128))|(1<<(CPP14ParserDotStar-128))|(1<<(CPP14ParserEllipsis-128))|(1<<(CPP14ParserIdentifier-128))|(1<<(CPP14ParserDecimalLiteral-128))|(1<<(CPP14ParserOctalLiteral-128))|(1<<(CPP14ParserHexadecimalLiteral-128))|(1<<(CPP14ParserBinaryLiteral-128))|(1<<(CPP14ParserIntegersuffix-128))|(1<<(CPP14ParserUserDefinedIntegerLiteral-128))|(1<<(CPP14ParserUserDefinedFloatingLiteral-128))|(1<<(CPP14ParserUserDefinedStringLiteral-128))|(1<<(CPP14ParserUserDefinedCharacterLiteral-128))|(1<<(CPP14ParserWhitespace-128))|(1<<(CPP14ParserNewline-128))|(1<<(CPP14ParserBlockComment-128))|(1<<(CPP14ParserLineComment-128)))) != 0) {
		{
			p.SetState(1358)
			p.BalancedTokenSeq()
		}

	}
	{
		p.SetState(1361)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// IBalancedTokenSeqContext is an interface to support dynamic dispatch.
type IBalancedTokenSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBalancedTokenSeqContext differentiates from other interfaces.
	IsBalancedTokenSeqContext()
}

type BalancedTokenSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedTokenSeqContext() *BalancedTokenSeqContext {
	var p = new(BalancedTokenSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedTokenSeq
	return p
}

func (*BalancedTokenSeqContext) IsBalancedTokenSeqContext() {}

func NewBalancedTokenSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedTokenSeqContext {
	var p = new(BalancedTokenSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedTokenSeq

	return p
}

func (s *BalancedTokenSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedTokenSeqContext) AllBalancedtoken() []IBalancedtokenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBalancedtokenContext)(nil)).Elem())
	var tst = make([]IBalancedtokenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBalancedtokenContext)
		}
	}

	return tst
}

func (s *BalancedTokenSeqContext) Balancedtoken(i int) IBalancedtokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedtokenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenContext)
}

func (s *BalancedTokenSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedTokenSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BalancedTokenSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBalancedTokenSeq(s)
	}
}

func (s *BalancedTokenSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBalancedTokenSeq(s)
	}
}

func (p *CPP14Parser) BalancedTokenSeq() (localctx IBalancedTokenSeqContext) {
	localctx = NewBalancedTokenSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, CPP14ParserRULE_balancedTokenSeq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserMultiLineMacro)|(1<<CPP14ParserDirective)|(1<<CPP14ParserAlignas)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAsm)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserBreak)|(1<<CPP14ParserCase)|(1<<CPP14ParserCatch)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserContinue)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDefault)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDo)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CPP14ParserElse-32))|(1<<(CPP14ParserEnum-32))|(1<<(CPP14ParserExplicit-32))|(1<<(CPP14ParserExport-32))|(1<<(CPP14ParserExtern-32))|(1<<(CPP14ParserFalse_-32))|(1<<(CPP14ParserFinal-32))|(1<<(CPP14ParserFloat-32))|(1<<(CPP14ParserFor-32))|(1<<(CPP14ParserFriend-32))|(1<<(CPP14ParserGoto-32))|(1<<(CPP14ParserIf-32))|(1<<(CPP14ParserInline-32))|(1<<(CPP14ParserInt-32))|(1<<(CPP14ParserLong-32))|(1<<(CPP14ParserMutable-32))|(1<<(CPP14ParserNamespace-32))|(1<<(CPP14ParserNew-32))|(1<<(CPP14ParserNoexcept-32))|(1<<(CPP14ParserNullptr-32))|(1<<(CPP14ParserOperator-32))|(1<<(CPP14ParserOverride-32))|(1<<(CPP14ParserPrivate-32))|(1<<(CPP14ParserProtected-32))|(1<<(CPP14ParserPublic-32))|(1<<(CPP14ParserRegister-32))|(1<<(CPP14ParserReinterpret_cast-32))|(1<<(CPP14ParserReturn-32))|(1<<(CPP14ParserShort-32))|(1<<(CPP14ParserSigned-32))|(1<<(CPP14ParserSizeof-32))|(1<<(CPP14ParserStatic-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(CPP14ParserStatic_assert-64))|(1<<(CPP14ParserStatic_cast-64))|(1<<(CPP14ParserStruct-64))|(1<<(CPP14ParserSwitch-64))|(1<<(CPP14ParserTemplate-64))|(1<<(CPP14ParserThis-64))|(1<<(CPP14ParserThread_local-64))|(1<<(CPP14ParserThrow-64))|(1<<(CPP14ParserTrue_-64))|(1<<(CPP14ParserTry-64))|(1<<(CPP14ParserTypedef-64))|(1<<(CPP14ParserTypeid_-64))|(1<<(CPP14ParserTypename_-64))|(1<<(CPP14ParserUnion-64))|(1<<(CPP14ParserUnsigned-64))|(1<<(CPP14ParserUsing-64))|(1<<(CPP14ParserVirtual-64))|(1<<(CPP14ParserVoid-64))|(1<<(CPP14ParserVolatile-64))|(1<<(CPP14ParserWchar-64))|(1<<(CPP14ParserWhile-64))|(1<<(CPP14ParserLeftParen-64))|(1<<(CPP14ParserLeftBracket-64))|(1<<(CPP14ParserLeftBrace-64))|(1<<(CPP14ParserPlus-64))|(1<<(CPP14ParserMinus-64))|(1<<(CPP14ParserStar-64))|(1<<(CPP14ParserDiv-64))|(1<<(CPP14ParserMod-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(CPP14ParserCaret-96))|(1<<(CPP14ParserAnd-96))|(1<<(CPP14ParserOr-96))|(1<<(CPP14ParserTilde-96))|(1<<(CPP14ParserNot-96))|(1<<(CPP14ParserAssign-96))|(1<<(CPP14ParserLess-96))|(1<<(CPP14ParserGreater-96))|(1<<(CPP14ParserPlusAssign-96))|(1<<(CPP14ParserMinusAssign-96))|(1<<(CPP14ParserStarAssign-96))|(1<<(CPP14ParserDivAssign-96))|(1<<(CPP14ParserModAssign-96))|(1<<(CPP14ParserXorAssign-96))|(1<<(CPP14ParserAndAssign-96))|(1<<(CPP14ParserOrAssign-96))|(1<<(CPP14ParserLeftShiftAssign-96))|(1<<(CPP14ParserRightShiftAssign-96))|(1<<(CPP14ParserEqual-96))|(1<<(CPP14ParserNotEqual-96))|(1<<(CPP14ParserLessEqual-96))|(1<<(CPP14ParserGreaterEqual-96))|(1<<(CPP14ParserAndAnd-96))|(1<<(CPP14ParserOrOr-96))|(1<<(CPP14ParserPlusPlus-96))|(1<<(CPP14ParserMinusMinus-96))|(1<<(CPP14ParserComma-96))|(1<<(CPP14ParserArrowStar-96))|(1<<(CPP14ParserArrow-96))|(1<<(CPP14ParserQuestion-96))|(1<<(CPP14ParserColon-96))|(1<<(CPP14ParserDoublecolon-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(CPP14ParserSemi-128))|(1<<(CPP14ParserDot-128))|(1<<(CPP14ParserDotStar-128))|(1<<(CPP14ParserEllipsis-128))|(1<<(CPP14ParserIdentifier-128))|(1<<(CPP14ParserDecimalLiteral-128))|(1<<(CPP14ParserOctalLiteral-128))|(1<<(CPP14ParserHexadecimalLiteral-128))|(1<<(CPP14ParserBinaryLiteral-128))|(1<<(CPP14ParserIntegersuffix-128))|(1<<(CPP14ParserUserDefinedIntegerLiteral-128))|(1<<(CPP14ParserUserDefinedFloatingLiteral-128))|(1<<(CPP14ParserUserDefinedStringLiteral-128))|(1<<(CPP14ParserUserDefinedCharacterLiteral-128))|(1<<(CPP14ParserWhitespace-128))|(1<<(CPP14ParserNewline-128))|(1<<(CPP14ParserBlockComment-128))|(1<<(CPP14ParserLineComment-128)))) != 0) {
		{
			p.SetState(1363)
			p.Balancedtoken()
		}

		p.SetState(1366)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBalancedtokenContext is an interface to support dynamic dispatch.
type IBalancedtokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBalancedtokenContext differentiates from other interfaces.
	IsBalancedtokenContext()
}

type BalancedtokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedtokenContext() *BalancedtokenContext {
	var p = new(BalancedtokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedtoken
	return p
}

func (*BalancedtokenContext) IsBalancedtokenContext() {}

func NewBalancedtokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedtokenContext {
	var p = new(BalancedtokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedtoken

	return p
}

func (s *BalancedtokenContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedtokenContext) AllLeftParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftParen)
}

func (s *BalancedtokenContext) LeftParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, i)
}

func (s *BalancedtokenContext) BalancedTokenSeq() IBalancedTokenSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBalancedTokenSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBalancedTokenSeqContext)
}

func (s *BalancedtokenContext) AllRightParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightParen)
}

func (s *BalancedtokenContext) RightParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, i)
}

func (s *BalancedtokenContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *BalancedtokenContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *BalancedtokenContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *BalancedtokenContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *BalancedtokenContext) AllLeftBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBrace)
}

func (s *BalancedtokenContext) LeftBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, i)
}

func (s *BalancedtokenContext) AllRightBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBrace)
}

func (s *BalancedtokenContext) RightBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, i)
}

func (s *BalancedtokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedtokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BalancedtokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBalancedtoken(s)
	}
}

func (s *BalancedtokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBalancedtoken(s)
	}
}

func (p *CPP14Parser) Balancedtoken() (localctx IBalancedtokenContext) {
	localctx = NewBalancedtokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, CPP14ParserRULE_balancedtoken)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1385)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1368)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1369)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1370)
			p.Match(CPP14ParserRightParen)
		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1372)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(1373)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1374)
			p.Match(CPP14ParserRightBracket)
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1376)
			p.Match(CPP14ParserLeftBrace)
		}
		{
			p.SetState(1377)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1378)
			p.Match(CPP14ParserRightBrace)
		}

	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserMultiLineMacro, CPP14ParserDirective, CPP14ParserAlignas, CPP14ParserAlignof, CPP14ParserAsm, CPP14ParserAuto, CPP14ParserBool, CPP14ParserBreak, CPP14ParserCase, CPP14ParserCatch, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserConst_cast, CPP14ParserContinue, CPP14ParserDecltype, CPP14ParserDefault, CPP14ParserDelete, CPP14ParserDo, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserElse, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExport, CPP14ParserExtern, CPP14ParserFalse_, CPP14ParserFinal, CPP14ParserFloat, CPP14ParserFor, CPP14ParserFriend, CPP14ParserGoto, CPP14ParserIf, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserNamespace, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserNullptr, CPP14ParserOperator, CPP14ParserOverride, CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic, CPP14ParserRegister, CPP14ParserReinterpret_cast, CPP14ParserReturn, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStatic_cast, CPP14ParserStruct, CPP14ParserSwitch, CPP14ParserTemplate, CPP14ParserThis, CPP14ParserThread_local, CPP14ParserThrow, CPP14ParserTrue_, CPP14ParserTry, CPP14ParserTypedef, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserWhile, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserDiv, CPP14ParserMod, CPP14ParserCaret, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserAssign, CPP14ParserLess, CPP14ParserGreater, CPP14ParserPlusAssign, CPP14ParserMinusAssign, CPP14ParserStarAssign, CPP14ParserDivAssign, CPP14ParserModAssign, CPP14ParserXorAssign, CPP14ParserAndAssign, CPP14ParserOrAssign, CPP14ParserLeftShiftAssign, CPP14ParserRightShiftAssign, CPP14ParserEqual, CPP14ParserNotEqual, CPP14ParserLessEqual, CPP14ParserGreaterEqual, CPP14ParserAndAnd, CPP14ParserOrOr, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserComma, CPP14ParserArrowStar, CPP14ParserArrow, CPP14ParserQuestion, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserDot, CPP14ParserDotStar, CPP14ParserEllipsis, CPP14ParserIdentifier, CPP14ParserDecimalLiteral, CPP14ParserOctalLiteral, CPP14ParserHexadecimalLiteral, CPP14ParserBinaryLiteral, CPP14ParserIntegersuffix, CPP14ParserUserDefinedIntegerLiteral, CPP14ParserUserDefinedFloatingLiteral, CPP14ParserUserDefinedStringLiteral, CPP14ParserUserDefinedCharacterLiteral, CPP14ParserWhitespace, CPP14ParserNewline, CPP14ParserBlockComment, CPP14ParserLineComment:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1381)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1380)
					_la = p.GetTokenStream().LA(1)

					if _la <= 0 || (((_la-85)&-(0x1f+1)) == 0 && ((1<<uint((_la-85)))&((1<<(CPP14ParserLeftParen-85))|(1<<(CPP14ParserRightParen-85))|(1<<(CPP14ParserLeftBracket-85))|(1<<(CPP14ParserRightBracket-85))|(1<<(CPP14ParserLeftBrace-85))|(1<<(CPP14ParserRightBrace-85)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1383)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitDeclaratorListContext is an interface to support dynamic dispatch.
type IInitDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitDeclaratorListContext differentiates from other interfaces.
	IsInitDeclaratorListContext()
}

type InitDeclaratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorListContext() *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclaratorList
	return p
}

func (*InitDeclaratorListContext) IsInitDeclaratorListContext() {}

func NewInitDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initDeclaratorList

	return p
}

func (s *InitDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorListContext) AllInitDeclarator() []IInitDeclaratorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitDeclaratorContext)(nil)).Elem())
	var tst = make([]IInitDeclaratorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitDeclaratorContext)
		}
	}

	return tst
}

func (s *InitDeclaratorListContext) InitDeclarator(i int) IInitDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorContext)
}

func (s *InitDeclaratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *InitDeclaratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *InitDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitDeclaratorList(s)
	}
}

func (s *InitDeclaratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitDeclaratorList(s)
	}
}

func (p *CPP14Parser) InitDeclaratorList() (localctx IInitDeclaratorListContext) {
	localctx = NewInitDeclaratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, CPP14ParserRULE_initDeclaratorList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1387)
		p.InitDeclarator()
	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1388)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1389)
			p.InitDeclarator()
		}

		p.SetState(1394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IInitDeclaratorContext is an interface to support dynamic dispatch.
type IInitDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitDeclaratorContext differentiates from other interfaces.
	IsInitDeclaratorContext()
}

type InitDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorContext() *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclarator
	return p
}

func (*InitDeclaratorContext) IsInitDeclaratorContext() {}

func NewInitDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initDeclarator

	return p
}

func (s *InitDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *InitDeclaratorContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitDeclarator(s)
	}
}

func (s *InitDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitDeclarator(s)
	}
}

func (p *CPP14Parser) InitDeclarator() (localctx IInitDeclaratorContext) {
	localctx = NewInitDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, CPP14ParserRULE_initDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1395)
		p.Declarator()
	}
	p.SetState(1397)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-85)&-(0x1f+1)) == 0 && ((1<<uint((_la-85)))&((1<<(CPP14ParserLeftParen-85))|(1<<(CPP14ParserLeftBrace-85))|(1<<(CPP14ParserAssign-85)))) != 0 {
		{
			p.SetState(1396)
			p.Initializer()
		}

	}

	return localctx
}

// IDeclaratorContext is an interface to support dynamic dispatch.
type IDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaratorContext differentiates from other interfaces.
	IsDeclaratorContext()
}

type DeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratorContext() *DeclaratorContext {
	var p = new(DeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarator
	return p
}

func (*DeclaratorContext) IsDeclaratorContext() {}

func NewDeclaratorContext_(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratorContext {
	var p = new(DeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarator

	return p
}

func (s *DeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratorContext) PointerDeclarator() IPointerDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerDeclaratorContext)
}

func (s *DeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *DeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersAndQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *DeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingReturnTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *DeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclarator(s)
	}
}

func (s *DeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclarator(s)
	}
}

func (p *CPP14Parser) Declarator() (localctx IDeclaratorContext) {
	localctx = NewDeclaratorContext_(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, CPP14ParserRULE_declarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1399)
			p.PointerDeclarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1400)
			p.noPointerDeclarator(0)
		}
		{
			p.SetState(1401)
			p.ParametersAndQualifiers()
		}
		{
			p.SetState(1402)
			p.TrailingReturnType()
		}

	}

	return localctx
}

// IPointerDeclaratorContext is an interface to support dynamic dispatch.
type IPointerDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerDeclaratorContext differentiates from other interfaces.
	IsPointerDeclaratorContext()
}

type PointerDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerDeclaratorContext() *PointerDeclaratorContext {
	var p = new(PointerDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerDeclarator
	return p
}

func (*PointerDeclaratorContext) IsPointerDeclaratorContext() {}

func NewPointerDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerDeclaratorContext {
	var p = new(PointerDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerDeclarator

	return p
}

func (s *PointerDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerDeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *PointerDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem())
	var tst = make([]IPointerOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPointerOperatorContext)
		}
	}

	return tst
}

func (s *PointerDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *PointerDeclaratorContext) AllConst() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserConst)
}

func (s *PointerDeclaratorContext) Const(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst, i)
}

func (s *PointerDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPointerDeclarator(s)
	}
}

func (s *PointerDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPointerDeclarator(s)
	}
}

func (p *CPP14Parser) PointerDeclarator() (localctx IPointerDeclaratorContext) {
	localctx = NewPointerDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, CPP14ParserRULE_pointerDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1406)
				p.PointerOperator()
			}
			p.SetState(1408)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserConst {
				{
					p.SetState(1407)
					p.Match(CPP14ParserConst)
				}

			}

		}
		p.SetState(1414)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())
	}
	{
		p.SetState(1415)
		p.noPointerDeclarator(0)
	}

	return localctx
}

// INoPointerDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoPointerDeclaratorContext differentiates from other interfaces.
	IsNoPointerDeclaratorContext()
}

type NoPointerDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerDeclaratorContext() *NoPointerDeclaratorContext {
	var p = new(NoPointerDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerDeclarator
	return p
}

func (*NoPointerDeclaratorContext) IsNoPointerDeclaratorContext() {}

func NewNoPointerDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerDeclaratorContext {
	var p = new(NoPointerDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerDeclarator

	return p
}

func (s *NoPointerDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerDeclaratorContext) Declaratorid() IDeclaratoridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratoridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratoridContext)
}

func (s *NoPointerDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoPointerDeclaratorContext) PointerDeclarator() IPointerDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerDeclaratorContext)
}

func (s *NoPointerDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoPointerDeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *NoPointerDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersAndQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoPointerDeclarator(s)
	}
}

func (s *NoPointerDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoPointerDeclarator(s)
	}
}

func (p *CPP14Parser) NoPointerDeclarator() (localctx INoPointerDeclaratorContext) {
	return p.noPointerDeclarator(0)
}

func (p *CPP14Parser) noPointerDeclarator(_p int) (localctx INoPointerDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoPointerDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 230
	p.EnterRecursionRule(localctx, 230, CPP14ParserRULE_noPointerDeclarator, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserEllipsis, CPP14ParserIdentifier:
		{
			p.SetState(1418)
			p.Declaratorid()
		}
		p.SetState(1420)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1419)
				p.AttributeSpecifierSeq()
			}

		}

	case CPP14ParserLeftParen:
		{
			p.SetState(1422)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1423)
			p.PointerDeclarator()
		}
		{
			p.SetState(1424)
			p.Match(CPP14ParserRightParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1442)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerDeclarator)
			p.SetState(1428)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			p.SetState(1438)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case CPP14ParserLeftParen:
				{
					p.SetState(1429)
					p.ParametersAndQualifiers()
				}

			case CPP14ParserLeftBracket:
				{
					p.SetState(1430)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1432)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(CPP14ParserTypeid_-75))|(1<<(CPP14ParserTypename_-75))|(1<<(CPP14ParserUnsigned-75))|(1<<(CPP14ParserVoid-75))|(1<<(CPP14ParserWchar-75))|(1<<(CPP14ParserLeftParen-75))|(1<<(CPP14ParserLeftBracket-75))|(1<<(CPP14ParserPlus-75))|(1<<(CPP14ParserMinus-75))|(1<<(CPP14ParserStar-75))|(1<<(CPP14ParserAnd-75))|(1<<(CPP14ParserOr-75))|(1<<(CPP14ParserTilde-75))|(1<<(CPP14ParserNot-75)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
					{
						p.SetState(1431)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1434)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1436)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1435)
						p.AttributeSpecifierSeq()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1444)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())
	}

	return localctx
}

// IParametersAndQualifiersContext is an interface to support dynamic dispatch.
type IParametersAndQualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParametersAndQualifiersContext differentiates from other interfaces.
	IsParametersAndQualifiersContext()
}

type ParametersAndQualifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParametersAndQualifiersContext() *ParametersAndQualifiersContext {
	var p = new(ParametersAndQualifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parametersAndQualifiers
	return p
}

func (*ParametersAndQualifiersContext) IsParametersAndQualifiersContext() {}

func NewParametersAndQualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametersAndQualifiersContext {
	var p = new(ParametersAndQualifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parametersAndQualifiers

	return p
}

func (s *ParametersAndQualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametersAndQualifiersContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *ParametersAndQualifiersContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *ParametersAndQualifiersContext) ParameterDeclarationClause() IParameterDeclarationClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationClauseContext)
}

func (s *ParametersAndQualifiersContext) Cvqualifierseq() ICvqualifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *ParametersAndQualifiersContext) Refqualifier() IRefqualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefqualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefqualifierContext)
}

func (s *ParametersAndQualifiersContext) ExceptionSpecification() IExceptionSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptionSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptionSpecificationContext)
}

func (s *ParametersAndQualifiersContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ParametersAndQualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametersAndQualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametersAndQualifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterParametersAndQualifiers(s)
	}
}

func (s *ParametersAndQualifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitParametersAndQualifiers(s)
	}
}

func (p *CPP14Parser) ParametersAndQualifiers() (localctx IParametersAndQualifiersContext) {
	localctx = NewParametersAndQualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, CPP14ParserRULE_parametersAndQualifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserAlignas)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConstexpr)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDouble))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserExplicit-33))|(1<<(CPP14ParserExtern-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserFriend-33))|(1<<(CPP14ParserInline-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserMutable-33))|(1<<(CPP14ParserRegister-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserStatic-33)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(CPP14ParserStruct-66))|(1<<(CPP14ParserThread_local-66))|(1<<(CPP14ParserTypedef-66))|(1<<(CPP14ParserTypename_-66))|(1<<(CPP14ParserUnion-66))|(1<<(CPP14ParserUnsigned-66))|(1<<(CPP14ParserVirtual-66))|(1<<(CPP14ParserVoid-66))|(1<<(CPP14ParserVolatile-66))|(1<<(CPP14ParserWchar-66))|(1<<(CPP14ParserLeftBracket-66)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		{
			p.SetState(1446)
			p.ParameterDeclarationClause()
		}

	}
	{
		p.SetState(1449)
		p.Match(CPP14ParserRightParen)
	}
	p.SetState(1451)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1450)
			p.Cvqualifierseq()
		}

	}
	p.SetState(1454)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1453)
			p.Refqualifier()
		}

	}
	p.SetState(1457)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1456)
			p.ExceptionSpecification()
		}

	}
	p.SetState(1460)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1459)
			p.AttributeSpecifierSeq()
		}

	}

	return localctx
}

// ITrailingReturnTypeContext is an interface to support dynamic dispatch.
type ITrailingReturnTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingReturnTypeContext differentiates from other interfaces.
	IsTrailingReturnTypeContext()
}

type TrailingReturnTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingReturnTypeContext() *TrailingReturnTypeContext {
	var p = new(TrailingReturnTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingReturnType
	return p
}

func (*TrailingReturnTypeContext) IsTrailingReturnTypeContext() {}

func NewTrailingReturnTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingReturnTypeContext {
	var p = new(TrailingReturnTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingReturnType

	return p
}

func (s *TrailingReturnTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingReturnTypeContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TrailingReturnTypeContext) TrailingTypeSpecifierSeq() ITrailingTypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingTypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierSeqContext)
}

func (s *TrailingReturnTypeContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *TrailingReturnTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingReturnTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingReturnTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTrailingReturnType(s)
	}
}

func (s *TrailingReturnTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTrailingReturnType(s)
	}
}

func (p *CPP14Parser) TrailingReturnType() (localctx ITrailingReturnTypeContext) {
	localctx = NewTrailingReturnTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, CPP14ParserRULE_trailingReturnType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1462)
		p.Match(CPP14ParserArrow)
	}
	{
		p.SetState(1463)
		p.TrailingTypeSpecifierSeq()
	}
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1464)
			p.AbstractDeclarator()
		}

	}

	return localctx
}

// IPointerOperatorContext is an interface to support dynamic dispatch.
type IPointerOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerOperatorContext differentiates from other interfaces.
	IsPointerOperatorContext()
}

type PointerOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerOperatorContext() *PointerOperatorContext {
	var p = new(PointerOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerOperator
	return p
}

func (*PointerOperatorContext) IsPointerOperatorContext() {}

func NewPointerOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerOperatorContext {
	var p = new(PointerOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerOperator

	return p
}

func (s *PointerOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *PointerOperatorContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *PointerOperatorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *PointerOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *PointerOperatorContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *PointerOperatorContext) Cvqualifierseq() ICvqualifierseqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvqualifierseqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *PointerOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPointerOperator(s)
	}
}

func (s *PointerOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPointerOperator(s)
	}
}

func (p *CPP14Parser) PointerOperator() (localctx IPointerOperatorContext) {
	localctx = NewPointerOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, CPP14ParserRULE_pointerOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1481)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAnd, CPP14ParserAndAnd:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1467)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserAnd || _la == CPP14ParserAndAnd) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1469)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1468)
				p.AttributeSpecifierSeq()
			}

		}

	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1471)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1474)
			p.Match(CPP14ParserStar)
		}
		p.SetState(1476)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1475)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1479)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1478)
				p.Cvqualifierseq()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICvqualifierseqContext is an interface to support dynamic dispatch.
type ICvqualifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCvqualifierseqContext differentiates from other interfaces.
	IsCvqualifierseqContext()
}

type CvqualifierseqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvqualifierseqContext() *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq
	return p
}

func (*CvqualifierseqContext) IsCvqualifierseqContext() {}

func NewCvqualifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq

	return p
}

func (s *CvqualifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *CvqualifierseqContext) AllCvQualifier() []ICvQualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICvQualifierContext)(nil)).Elem())
	var tst = make([]ICvQualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICvQualifierContext)
		}
	}

	return tst
}

func (s *CvqualifierseqContext) CvQualifier(i int) ICvQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICvQualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICvQualifierContext)
}

func (s *CvqualifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvqualifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CvqualifierseqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCvqualifierseq(s)
	}
}

func (s *CvqualifierseqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCvqualifierseq(s)
	}
}

func (p *CPP14Parser) Cvqualifierseq() (localctx ICvqualifierseqContext) {
	localctx = NewCvqualifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, CPP14ParserRULE_cvqualifierseq)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1484)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1483)
				p.CvQualifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext())
	}

	return localctx
}

// ICvQualifierContext is an interface to support dynamic dispatch.
type ICvQualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCvQualifierContext differentiates from other interfaces.
	IsCvQualifierContext()
}

type CvQualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvQualifierContext() *CvQualifierContext {
	var p = new(CvQualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvQualifier
	return p
}

func (*CvQualifierContext) IsCvQualifierContext() {}

func NewCvQualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvQualifierContext {
	var p = new(CvQualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvQualifier

	return p
}

func (s *CvQualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *CvQualifierContext) Const() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst, 0)
}

func (s *CvQualifierContext) Volatile() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVolatile, 0)
}

func (s *CvQualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvQualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CvQualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterCvQualifier(s)
	}
}

func (s *CvQualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitCvQualifier(s)
	}
}

func (p *CPP14Parser) CvQualifier() (localctx ICvQualifierContext) {
	localctx = NewCvQualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, CPP14ParserRULE_cvQualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1488)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserConst || _la == CPP14ParserVolatile) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRefqualifierContext is an interface to support dynamic dispatch.
type IRefqualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRefqualifierContext differentiates from other interfaces.
	IsRefqualifierContext()
}

type RefqualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefqualifierContext() *RefqualifierContext {
	var p = new(RefqualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_refqualifier
	return p
}

func (*RefqualifierContext) IsRefqualifierContext() {}

func NewRefqualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefqualifierContext {
	var p = new(RefqualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_refqualifier

	return p
}

func (s *RefqualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *RefqualifierContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *RefqualifierContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *RefqualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefqualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefqualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterRefqualifier(s)
	}
}

func (s *RefqualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitRefqualifier(s)
	}
}

func (p *CPP14Parser) Refqualifier() (localctx IRefqualifierContext) {
	localctx = NewRefqualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, CPP14ParserRULE_refqualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserAnd || _la == CPP14ParserAndAnd) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDeclaratoridContext is an interface to support dynamic dispatch.
type IDeclaratoridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaratoridContext differentiates from other interfaces.
	IsDeclaratoridContext()
}

type DeclaratoridContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratoridContext() *DeclaratoridContext {
	var p = new(DeclaratoridContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaratorid
	return p
}

func (*DeclaratoridContext) IsDeclaratoridContext() {}

func NewDeclaratoridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratoridContext {
	var p = new(DeclaratoridContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaratorid

	return p
}

func (s *DeclaratoridContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratoridContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *DeclaratoridContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *DeclaratoridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratoridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaratoridContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDeclaratorid(s)
	}
}

func (s *DeclaratoridContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDeclaratorid(s)
	}
}

func (p *CPP14Parser) Declaratorid() (localctx IDeclaratoridContext) {
	localctx = NewDeclaratoridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, CPP14ParserRULE_declaratorid)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1492)
			p.Match(CPP14ParserEllipsis)
		}

	}
	{
		p.SetState(1495)
		p.IdExpression()
	}

	return localctx
}

// ITheTypeIdContext is an interface to support dynamic dispatch.
type ITheTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheTypeIdContext differentiates from other interfaces.
	IsTheTypeIdContext()
}

type TheTypeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheTypeIdContext() *TheTypeIdContext {
	var p = new(TheTypeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeId
	return p
}

func (*TheTypeIdContext) IsTheTypeIdContext() {}

func NewTheTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheTypeIdContext {
	var p = new(TheTypeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theTypeId

	return p
}

func (s *TheTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TheTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *TheTypeIdContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *TheTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheTypeIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTheTypeId(s)
	}
}

func (s *TheTypeIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTheTypeId(s)
	}
}

func (p *CPP14Parser) TheTypeId() (localctx ITheTypeIdContext) {
	localctx = NewTheTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, CPP14ParserRULE_theTypeId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1497)
		p.TypeSpecifierSeq()
	}
	p.SetState(1499)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1498)
			p.AbstractDeclarator()
		}

	}

	return localctx
}

// IAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractDeclaratorContext differentiates from other interfaces.
	IsAbstractDeclaratorContext()
}

type AbstractDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractDeclaratorContext() *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractDeclarator
	return p
}

func (*AbstractDeclaratorContext) IsAbstractDeclaratorContext() {}

func NewAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractDeclarator

	return p
}

func (s *AbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractDeclaratorContext) PointerAbstractDeclarator() IPointerAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerAbstractDeclaratorContext)
}

func (s *AbstractDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersAndQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *AbstractDeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingReturnTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *AbstractDeclaratorContext) NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *AbstractDeclaratorContext) AbstractPackDeclarator() IAbstractPackDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractPackDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractPackDeclaratorContext)
}

func (s *AbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAbstractDeclarator(s)
	}
}

func (s *AbstractDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAbstractDeclarator(s)
	}
}

func (p *CPP14Parser) AbstractDeclarator() (localctx IAbstractDeclaratorContext) {
	localctx = NewAbstractDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, CPP14ParserRULE_abstractDeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1509)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1501)
			p.PointerAbstractDeclarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1503)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1502)
				p.noPointerAbstractDeclarator(0)
			}

		}
		{
			p.SetState(1505)
			p.ParametersAndQualifiers()
		}
		{
			p.SetState(1506)
			p.TrailingReturnType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1508)
			p.AbstractPackDeclarator()
		}

	}

	return localctx
}

// IPointerAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IPointerAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerAbstractDeclaratorContext differentiates from other interfaces.
	IsPointerAbstractDeclaratorContext()
}

type PointerAbstractDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerAbstractDeclaratorContext() *PointerAbstractDeclaratorContext {
	var p = new(PointerAbstractDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerAbstractDeclarator
	return p
}

func (*PointerAbstractDeclaratorContext) IsPointerAbstractDeclaratorContext() {}

func NewPointerAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerAbstractDeclaratorContext {
	var p = new(PointerAbstractDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerAbstractDeclarator

	return p
}

func (s *PointerAbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerAbstractDeclaratorContext) NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *PointerAbstractDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem())
	var tst = make([]IPointerOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPointerOperatorContext)
		}
	}

	return tst
}

func (s *PointerAbstractDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *PointerAbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerAbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerAbstractDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPointerAbstractDeclarator(s)
	}
}

func (s *PointerAbstractDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPointerAbstractDeclarator(s)
	}
}

func (p *CPP14Parser) PointerAbstractDeclarator() (localctx IPointerAbstractDeclaratorContext) {
	localctx = NewPointerAbstractDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, CPP14ParserRULE_pointerAbstractDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1520)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1511)
			p.noPointerAbstractDeclarator(0)
		}

	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1513)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == CPP14ParserDecltype || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(CPP14ParserStar-93))|(1<<(CPP14ParserAnd-93))|(1<<(CPP14ParserAndAnd-93)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1512)
				p.PointerOperator()
			}

			p.SetState(1515)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1518)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1517)
				p.noPointerAbstractDeclarator(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INoPointerAbstractDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoPointerAbstractDeclaratorContext differentiates from other interfaces.
	IsNoPointerAbstractDeclaratorContext()
}

type NoPointerAbstractDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerAbstractDeclaratorContext() *NoPointerAbstractDeclaratorContext {
	var p = new(NoPointerAbstractDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractDeclarator
	return p
}

func (*NoPointerAbstractDeclaratorContext) IsNoPointerAbstractDeclaratorContext() {}

func NewNoPointerAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerAbstractDeclaratorContext {
	var p = new(NoPointerAbstractDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractDeclarator

	return p
}

func (s *NoPointerAbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerAbstractDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersAndQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerAbstractDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerAbstractDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerAbstractDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerAbstractDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerAbstractDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoPointerAbstractDeclaratorContext) PointerAbstractDeclarator() IPointerAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerAbstractDeclaratorContext)
}

func (s *NoPointerAbstractDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoPointerAbstractDeclaratorContext) AllNoPointerAbstractDeclarator() []INoPointerAbstractDeclaratorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INoPointerAbstractDeclaratorContext)(nil)).Elem())
	var tst = make([]INoPointerAbstractDeclaratorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INoPointerAbstractDeclaratorContext)
		}
	}

	return tst
}

func (s *NoPointerAbstractDeclaratorContext) NoPointerAbstractDeclarator(i int) INoPointerAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerAbstractDeclaratorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *NoPointerAbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerAbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerAbstractDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoPointerAbstractDeclarator(s)
	}
}

func (s *NoPointerAbstractDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoPointerAbstractDeclarator(s)
	}
}

func (p *CPP14Parser) NoPointerAbstractDeclarator() (localctx INoPointerAbstractDeclaratorContext) {
	return p.noPointerAbstractDeclarator(0)
}

func (p *CPP14Parser) noPointerAbstractDeclarator(_p int) (localctx INoPointerAbstractDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoPointerAbstractDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerAbstractDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 252
	p.EnterRecursionRule(localctx, 252, CPP14ParserRULE_noPointerAbstractDeclarator, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1536)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1523)
			p.ParametersAndQualifiers()
		}

	case 2:
		{
			p.SetState(1524)
			p.Match(CPP14ParserLeftBracket)
		}
		p.SetState(1526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(CPP14ParserTypeid_-75))|(1<<(CPP14ParserTypename_-75))|(1<<(CPP14ParserUnsigned-75))|(1<<(CPP14ParserVoid-75))|(1<<(CPP14ParserWchar-75))|(1<<(CPP14ParserLeftParen-75))|(1<<(CPP14ParserLeftBracket-75))|(1<<(CPP14ParserPlus-75))|(1<<(CPP14ParserMinus-75))|(1<<(CPP14ParserStar-75))|(1<<(CPP14ParserAnd-75))|(1<<(CPP14ParserOr-75))|(1<<(CPP14ParserTilde-75))|(1<<(CPP14ParserNot-75)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
			{
				p.SetState(1525)
				p.ConstantExpression()
			}

		}
		{
			p.SetState(1528)
			p.Match(CPP14ParserRightBracket)
		}
		p.SetState(1530)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1529)
				p.AttributeSpecifierSeq()
			}

		}

	case 3:
		{
			p.SetState(1532)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1533)
			p.PointerAbstractDeclarator()
		}
		{
			p.SetState(1534)
			p.Match(CPP14ParserRightParen)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerAbstractDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerAbstractDeclarator)
			p.SetState(1538)

			if !(p.Precpred(p.GetParserRuleContext(), 4)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
			}
			p.SetState(1549)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1539)
					p.ParametersAndQualifiers()
				}

			case 2:
				{
					p.SetState(1540)
					p.noPointerAbstractDeclarator(0)
				}
				{
					p.SetState(1541)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1543)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(CPP14ParserTypeid_-75))|(1<<(CPP14ParserTypename_-75))|(1<<(CPP14ParserUnsigned-75))|(1<<(CPP14ParserVoid-75))|(1<<(CPP14ParserWchar-75))|(1<<(CPP14ParserLeftParen-75))|(1<<(CPP14ParserLeftBracket-75))|(1<<(CPP14ParserPlus-75))|(1<<(CPP14ParserMinus-75))|(1<<(CPP14ParserStar-75))|(1<<(CPP14ParserAnd-75))|(1<<(CPP14ParserOr-75))|(1<<(CPP14ParserTilde-75))|(1<<(CPP14ParserNot-75)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
					{
						p.SetState(1542)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1545)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1547)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1546)
						p.AttributeSpecifierSeq()
					}

				}

			}

		}
		p.SetState(1555)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())
	}

	return localctx
}

// IAbstractPackDeclaratorContext is an interface to support dynamic dispatch.
type IAbstractPackDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractPackDeclaratorContext differentiates from other interfaces.
	IsAbstractPackDeclaratorContext()
}

type AbstractPackDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractPackDeclaratorContext() *AbstractPackDeclaratorContext {
	var p = new(AbstractPackDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractPackDeclarator
	return p
}

func (*AbstractPackDeclaratorContext) IsAbstractPackDeclaratorContext() {}

func NewAbstractPackDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractPackDeclaratorContext {
	var p = new(AbstractPackDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractPackDeclarator

	return p
}

func (s *AbstractPackDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractPackDeclaratorContext) NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerAbstractPackDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractPackDeclaratorContext)
}

func (s *AbstractPackDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem())
	var tst = make([]IPointerOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPointerOperatorContext)
		}
	}

	return tst
}

func (s *AbstractPackDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *AbstractPackDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractPackDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractPackDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAbstractPackDeclarator(s)
	}
}

func (s *AbstractPackDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAbstractPackDeclarator(s)
	}
}

func (p *CPP14Parser) AbstractPackDeclarator() (localctx IAbstractPackDeclaratorContext) {
	localctx = NewAbstractPackDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, CPP14ParserRULE_abstractPackDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserDecltype || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(CPP14ParserStar-93))|(1<<(CPP14ParserAnd-93))|(1<<(CPP14ParserAndAnd-93)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		{
			p.SetState(1556)
			p.PointerOperator()
		}

		p.SetState(1561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1562)
		p.noPointerAbstractPackDeclarator(0)
	}

	return localctx
}

// INoPointerAbstractPackDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerAbstractPackDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoPointerAbstractPackDeclaratorContext differentiates from other interfaces.
	IsNoPointerAbstractPackDeclaratorContext()
}

type NoPointerAbstractPackDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerAbstractPackDeclaratorContext() *NoPointerAbstractPackDeclaratorContext {
	var p = new(NoPointerAbstractPackDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractPackDeclarator
	return p
}

func (*NoPointerAbstractPackDeclaratorContext) IsNoPointerAbstractPackDeclaratorContext() {}

func NewNoPointerAbstractPackDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerAbstractPackDeclaratorContext {
	var p = new(NoPointerAbstractPackDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractPackDeclarator

	return p
}

func (s *NoPointerAbstractPackDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerAbstractPackDeclaratorContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoPointerAbstractPackDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractPackDeclaratorContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersAndQualifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerAbstractPackDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerAbstractPackDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoPointerAbstractPackDeclarator(s)
	}
}

func (s *NoPointerAbstractPackDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoPointerAbstractPackDeclarator(s)
	}
}

func (p *CPP14Parser) NoPointerAbstractPackDeclarator() (localctx INoPointerAbstractPackDeclaratorContext) {
	return p.noPointerAbstractPackDeclarator(0)
}

func (p *CPP14Parser) noPointerAbstractPackDeclarator(_p int) (localctx INoPointerAbstractPackDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewNoPointerAbstractPackDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerAbstractPackDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 256
	p.EnterRecursionRule(localctx, 256, CPP14ParserRULE_noPointerAbstractPackDeclarator, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1565)
		p.Match(CPP14ParserEllipsis)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1581)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerAbstractPackDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerAbstractPackDeclarator)
			p.SetState(1567)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			p.SetState(1577)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case CPP14ParserLeftParen:
				{
					p.SetState(1568)
					p.ParametersAndQualifiers()
				}

			case CPP14ParserLeftBracket:
				{
					p.SetState(1569)
					p.Match(CPP14ParserLeftBracket)
				}
				p.SetState(1571)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(CPP14ParserTypeid_-75))|(1<<(CPP14ParserTypename_-75))|(1<<(CPP14ParserUnsigned-75))|(1<<(CPP14ParserVoid-75))|(1<<(CPP14ParserWchar-75))|(1<<(CPP14ParserLeftParen-75))|(1<<(CPP14ParserLeftBracket-75))|(1<<(CPP14ParserPlus-75))|(1<<(CPP14ParserMinus-75))|(1<<(CPP14ParserStar-75))|(1<<(CPP14ParserAnd-75))|(1<<(CPP14ParserOr-75))|(1<<(CPP14ParserTilde-75))|(1<<(CPP14ParserNot-75)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
					{
						p.SetState(1570)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1573)
					p.Match(CPP14ParserRightBracket)
				}
				p.SetState(1575)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1574)
						p.AttributeSpecifierSeq()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1583)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())
	}

	return localctx
}

// IParameterDeclarationClauseContext is an interface to support dynamic dispatch.
type IParameterDeclarationClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterDeclarationClauseContext differentiates from other interfaces.
	IsParameterDeclarationClauseContext()
}

type ParameterDeclarationClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationClauseContext() *ParameterDeclarationClauseContext {
	var p = new(ParameterDeclarationClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationClause
	return p
}

func (*ParameterDeclarationClauseContext) IsParameterDeclarationClauseContext() {}

func NewParameterDeclarationClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationClauseContext {
	var p = new(ParameterDeclarationClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationClause

	return p
}

func (s *ParameterDeclarationClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationClauseContext) ParameterDeclarationList() IParameterDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationListContext)
}

func (s *ParameterDeclarationClauseContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ParameterDeclarationClauseContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *ParameterDeclarationClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterParameterDeclarationClause(s)
	}
}

func (s *ParameterDeclarationClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitParameterDeclarationClause(s)
	}
}

func (p *CPP14Parser) ParameterDeclarationClause() (localctx IParameterDeclarationClauseContext) {
	localctx = NewParameterDeclarationClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, CPP14ParserRULE_parameterDeclarationClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1584)
		p.ParameterDeclarationList()
	}
	p.SetState(1589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserComma || _la == CPP14ParserEllipsis {
		p.SetState(1586)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1585)
				p.Match(CPP14ParserComma)
			}

		}
		{
			p.SetState(1588)
			p.Match(CPP14ParserEllipsis)
		}

	}

	return localctx
}

// IParameterDeclarationListContext is an interface to support dynamic dispatch.
type IParameterDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterDeclarationListContext differentiates from other interfaces.
	IsParameterDeclarationListContext()
}

type ParameterDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationListContext() *ParameterDeclarationListContext {
	var p = new(ParameterDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationList
	return p
}

func (*ParameterDeclarationListContext) IsParameterDeclarationListContext() {}

func NewParameterDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationListContext {
	var p = new(ParameterDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationList

	return p
}

func (s *ParameterDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationListContext) AllParameterDeclaration() []IParameterDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem())
	var tst = make([]IParameterDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterDeclarationContext)
		}
	}

	return tst
}

func (s *ParameterDeclarationListContext) ParameterDeclaration(i int) IParameterDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *ParameterDeclarationListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *ParameterDeclarationListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *ParameterDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterParameterDeclarationList(s)
	}
}

func (s *ParameterDeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitParameterDeclarationList(s)
	}
}

func (p *CPP14Parser) ParameterDeclarationList() (localctx IParameterDeclarationListContext) {
	localctx = NewParameterDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, CPP14ParserRULE_parameterDeclarationList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1591)
		p.ParameterDeclaration()
	}
	p.SetState(1596)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1592)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1593)
				p.ParameterDeclaration()
			}

		}
		p.SetState(1598)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())
	}

	return localctx
}

// IParameterDeclarationContext is an interface to support dynamic dispatch.
type IParameterDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterDeclarationContext differentiates from other interfaces.
	IsParameterDeclarationContext()
}

type ParameterDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationContext() *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclaration
	return p
}

func (*ParameterDeclarationContext) IsParameterDeclarationContext() {}

func NewParameterDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclaration

	return p
}

func (s *ParameterDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ParameterDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ParameterDeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ParameterDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ParameterDeclarationContext) InitializerClause() IInitializerClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *ParameterDeclarationContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *ParameterDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterParameterDeclaration(s)
	}
}

func (s *ParameterDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitParameterDeclaration(s)
	}
}

func (p *CPP14Parser) ParameterDeclaration() (localctx IParameterDeclarationContext) {
	localctx = NewParameterDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, CPP14ParserRULE_parameterDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1599)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1602)
		p.DeclSpecifierSeq()
	}

	p.SetState(1607)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1603)
			p.Declarator()
		}

	case 2:
		p.SetState(1605)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1604)
				p.AbstractDeclarator()
			}

		}

	}
	p.SetState(1611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAssign {
		{
			p.SetState(1609)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1610)
			p.InitializerClause()
		}

	}

	return localctx
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *FunctionDefinitionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDefinitionContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) VirtualSpecifierSeq() IVirtualSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtualSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitFunctionDefinition(s)
	}
}

func (p *CPP14Parser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, CPP14ParserRULE_functionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1613)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1617)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1616)
			p.DeclSpecifierSeq()
		}

	}
	{
		p.SetState(1619)
		p.Declarator()
	}
	p.SetState(1621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserFinal || _la == CPP14ParserOverride {
		{
			p.SetState(1620)
			p.VirtualSpecifierSeq()
		}

	}
	{
		p.SetState(1623)
		p.FunctionBody()
	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *FunctionBodyContext) ConstructorInitializer() IConstructorInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorInitializerContext)
}

func (s *FunctionBodyContext) FunctionTryBlock() IFunctionTryBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTryBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTryBlockContext)
}

func (s *FunctionBodyContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *FunctionBodyContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *FunctionBodyContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *FunctionBodyContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterFunctionBody(s)
	}
}

func (s *FunctionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitFunctionBody(s)
	}
}

func (p *CPP14Parser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, CPP14ParserRULE_functionBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1633)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace, CPP14ParserColon:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserColon {
			{
				p.SetState(1625)
				p.ConstructorInitializer()
			}

		}
		{
			p.SetState(1628)
			p.CompoundStatement()
		}

	case CPP14ParserTry:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1629)
			p.FunctionTryBlock()
		}

	case CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1630)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1631)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserDefault || _la == CPP14ParserDelete) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1632)
			p.Match(CPP14ParserSemi)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext_(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) BraceOrEqualInitializer() IBraceOrEqualInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBraceOrEqualInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBraceOrEqualInitializerContext)
}

func (s *InitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *InitializerContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitializer(s)
	}
}

func (s *InitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitializer(s)
	}
}

func (p *CPP14Parser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext_(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, CPP14ParserRULE_initializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1640)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace, CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1635)
			p.BraceOrEqualInitializer()
		}

	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1636)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(1637)
			p.ExpressionList()
		}
		{
			p.SetState(1638)
			p.Match(CPP14ParserRightParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBraceOrEqualInitializerContext is an interface to support dynamic dispatch.
type IBraceOrEqualInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBraceOrEqualInitializerContext differentiates from other interfaces.
	IsBraceOrEqualInitializerContext()
}

type BraceOrEqualInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraceOrEqualInitializerContext() *BraceOrEqualInitializerContext {
	var p = new(BraceOrEqualInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_braceOrEqualInitializer
	return p
}

func (*BraceOrEqualInitializerContext) IsBraceOrEqualInitializerContext() {}

func NewBraceOrEqualInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BraceOrEqualInitializerContext {
	var p = new(BraceOrEqualInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_braceOrEqualInitializer

	return p
}

func (s *BraceOrEqualInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *BraceOrEqualInitializerContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *BraceOrEqualInitializerContext) InitializerClause() IInitializerClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *BraceOrEqualInitializerContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *BraceOrEqualInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BraceOrEqualInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BraceOrEqualInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBraceOrEqualInitializer(s)
	}
}

func (s *BraceOrEqualInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBraceOrEqualInitializer(s)
	}
}

func (p *CPP14Parser) BraceOrEqualInitializer() (localctx IBraceOrEqualInitializerContext) {
	localctx = NewBraceOrEqualInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, CPP14ParserRULE_braceOrEqualInitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1645)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1642)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1643)
			p.InitializerClause()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1644)
			p.BracedInitList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializerClauseContext is an interface to support dynamic dispatch.
type IInitializerClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerClauseContext differentiates from other interfaces.
	IsInitializerClauseContext()
}

type InitializerClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerClauseContext() *InitializerClauseContext {
	var p = new(InitializerClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerClause
	return p
}

func (*InitializerClauseContext) IsInitializerClauseContext() {}

func NewInitializerClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerClauseContext {
	var p = new(InitializerClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerClause

	return p
}

func (s *InitializerClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerClauseContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *InitializerClauseContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *InitializerClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitializerClause(s)
	}
}

func (s *InitializerClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitializerClause(s)
	}
}

func (p *CPP14Parser) InitializerClause() (localctx IInitializerClauseContext) {
	localctx = NewInitializerClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, CPP14ParserRULE_initializerClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1649)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1647)
			p.AssignmentExpression()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1648)
			p.BracedInitList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IInitializerListContext is an interface to support dynamic dispatch.
type IInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerListContext differentiates from other interfaces.
	IsInitializerListContext()
}

type InitializerListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerListContext() *InitializerListContext {
	var p = new(InitializerListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerList
	return p
}

func (*InitializerListContext) IsInitializerListContext() {}

func NewInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerListContext {
	var p = new(InitializerListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerList

	return p
}

func (s *InitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerListContext) AllInitializerClause() []IInitializerClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem())
	var tst = make([]IInitializerClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInitializerClauseContext)
		}
	}

	return tst
}

func (s *InitializerListContext) InitializerClause(i int) IInitializerClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *InitializerListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *InitializerListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *InitializerListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *InitializerListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *InitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterInitializerList(s)
	}
}

func (s *InitializerListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitInitializerList(s)
	}
}

func (p *CPP14Parser) InitializerList() (localctx IInitializerListContext) {
	localctx = NewInitializerListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, CPP14ParserRULE_initializerList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1651)
		p.InitializerClause()
	}
	p.SetState(1653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1652)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.SetState(1662)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1655)
				p.Match(CPP14ParserComma)
			}
			{
				p.SetState(1656)
				p.InitializerClause()
			}
			p.SetState(1658)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserEllipsis {
				{
					p.SetState(1657)
					p.Match(CPP14ParserEllipsis)
				}

			}

		}
		p.SetState(1664)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext())
	}

	return localctx
}

// IBracedInitListContext is an interface to support dynamic dispatch.
type IBracedInitListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBracedInitListContext differentiates from other interfaces.
	IsBracedInitListContext()
}

type BracedInitListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBracedInitListContext() *BracedInitListContext {
	var p = new(BracedInitListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_bracedInitList
	return p
}

func (*BracedInitListContext) IsBracedInitListContext() {}

func NewBracedInitListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BracedInitListContext {
	var p = new(BracedInitListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_bracedInitList

	return p
}

func (s *BracedInitListContext) GetParser() antlr.Parser { return s.parser }

func (s *BracedInitListContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *BracedInitListContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *BracedInitListContext) InitializerList() IInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *BracedInitListContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *BracedInitListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BracedInitListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BracedInitListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBracedInitList(s)
	}
}

func (s *BracedInitListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBracedInitList(s)
	}
}

func (p *CPP14Parser) BracedInitList() (localctx IBracedInitListContext) {
	localctx = NewBracedInitListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, CPP14ParserRULE_bracedInitList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1665)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserLeftBrace-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
		{
			p.SetState(1666)
			p.InitializerList()
		}
		p.SetState(1668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1667)
				p.Match(CPP14ParserComma)
			}

		}

	}
	{
		p.SetState(1672)
		p.Match(CPP14ParserRightBrace)
	}

	return localctx
}

// IClassNameContext is an interface to support dynamic dispatch.
type IClassNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassNameContext differentiates from other interfaces.
	IsClassNameContext()
}

type ClassNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassNameContext() *ClassNameContext {
	var p = new(ClassNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_className
	return p
}

func (*ClassNameContext) IsClassNameContext() {}

func NewClassNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassNameContext {
	var p = new(ClassNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_className

	return p
}

func (s *ClassNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ClassNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *ClassNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassName(s)
	}
}

func (s *ClassNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassName(s)
	}
}

func (p *CPP14Parser) ClassName() (localctx IClassNameContext) {
	localctx = NewClassNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, CPP14ParserRULE_className)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1674)
			p.Match(CPP14ParserIdentifier)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1675)
			p.SimpleTemplateId()
		}

	}

	return localctx
}

// IClassSpecifierContext is an interface to support dynamic dispatch.
type IClassSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassSpecifierContext differentiates from other interfaces.
	IsClassSpecifierContext()
}

type ClassSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassSpecifierContext() *ClassSpecifierContext {
	var p = new(ClassSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classSpecifier
	return p
}

func (*ClassSpecifierContext) IsClassSpecifierContext() {}

func NewClassSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassSpecifierContext {
	var p = new(ClassSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classSpecifier

	return p
}

func (s *ClassSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassSpecifierContext) ClassHead() IClassHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeadContext)
}

func (s *ClassSpecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *ClassSpecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *ClassSpecifierContext) MemberSpecification() IMemberSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberSpecificationContext)
}

func (s *ClassSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassSpecifier(s)
	}
}

func (s *ClassSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassSpecifier(s)
	}
}

func (p *CPP14Parser) ClassSpecifier() (localctx IClassSpecifierContext) {
	localctx = NewClassSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, CPP14ParserRULE_classSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1678)
		p.ClassHead()
	}
	{
		p.SetState(1679)
		p.Match(CPP14ParserLeftBrace)
	}
	p.SetState(1681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserPrivate-44))|(1<<(CPP14ParserProtected-44))|(1<<(CPP14ParserPublic-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserColon-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
		{
			p.SetState(1680)
			p.MemberSpecification()
		}

	}
	{
		p.SetState(1683)
		p.Match(CPP14ParserRightBrace)
	}

	return localctx
}

// IClassHeadContext is an interface to support dynamic dispatch.
type IClassHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeadContext differentiates from other interfaces.
	IsClassHeadContext()
}

type ClassHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeadContext() *ClassHeadContext {
	var p = new(ClassHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHead
	return p
}

func (*ClassHeadContext) IsClassHeadContext() {}

func NewClassHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeadContext {
	var p = new(ClassHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classHead

	return p
}

func (s *ClassHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeadContext) ClassKey() IClassKeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassKeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassKeyContext)
}

func (s *ClassHeadContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ClassHeadContext) ClassHeadName() IClassHeadNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassHeadNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassHeadNameContext)
}

func (s *ClassHeadContext) BaseClause() IBaseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseClauseContext)
}

func (s *ClassHeadContext) ClassVirtSpecifier() IClassVirtSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassVirtSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassVirtSpecifierContext)
}

func (s *ClassHeadContext) Union() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnion, 0)
}

func (s *ClassHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassHead(s)
	}
}

func (s *ClassHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassHead(s)
	}
}

func (p *CPP14Parser) ClassHead() (localctx IClassHeadContext) {
	localctx = NewClassHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, CPP14ParserRULE_classHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1708)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1685)
			p.ClassKey()
		}
		p.SetState(1687)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1686)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1689)
				p.ClassHeadName()
			}
			p.SetState(1691)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal {
				{
					p.SetState(1690)
					p.ClassVirtSpecifier()
				}

			}

		}
		p.SetState(1696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserColon {
			{
				p.SetState(1695)
				p.BaseClause()
			}

		}

	case CPP14ParserUnion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1698)
			p.Match(CPP14ParserUnion)
		}
		p.SetState(1700)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1699)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1702)
				p.ClassHeadName()
			}
			p.SetState(1704)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal {
				{
					p.SetState(1703)
					p.ClassVirtSpecifier()
				}

			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassHeadNameContext is an interface to support dynamic dispatch.
type IClassHeadNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassHeadNameContext differentiates from other interfaces.
	IsClassHeadNameContext()
}

type ClassHeadNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeadNameContext() *ClassHeadNameContext {
	var p = new(ClassHeadNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHeadName
	return p
}

func (*ClassHeadNameContext) IsClassHeadNameContext() {}

func NewClassHeadNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeadNameContext {
	var p = new(ClassHeadNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classHeadName

	return p
}

func (s *ClassHeadNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeadNameContext) ClassName() IClassNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *ClassHeadNameContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ClassHeadNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeadNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeadNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassHeadName(s)
	}
}

func (s *ClassHeadNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassHeadName(s)
	}
}

func (p *CPP14Parser) ClassHeadName() (localctx IClassHeadNameContext) {
	localctx = NewClassHeadNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, CPP14ParserRULE_classHeadName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1711)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1710)
			p.nestedNameSpecifier(0)
		}

	}
	{
		p.SetState(1713)
		p.ClassName()
	}

	return localctx
}

// IClassVirtSpecifierContext is an interface to support dynamic dispatch.
type IClassVirtSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassVirtSpecifierContext differentiates from other interfaces.
	IsClassVirtSpecifierContext()
}

type ClassVirtSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassVirtSpecifierContext() *ClassVirtSpecifierContext {
	var p = new(ClassVirtSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classVirtSpecifier
	return p
}

func (*ClassVirtSpecifierContext) IsClassVirtSpecifierContext() {}

func NewClassVirtSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassVirtSpecifierContext {
	var p = new(ClassVirtSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classVirtSpecifier

	return p
}

func (s *ClassVirtSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassVirtSpecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *ClassVirtSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassVirtSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassVirtSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassVirtSpecifier(s)
	}
}

func (s *ClassVirtSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassVirtSpecifier(s)
	}
}

func (p *CPP14Parser) ClassVirtSpecifier() (localctx IClassVirtSpecifierContext) {
	localctx = NewClassVirtSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, CPP14ParserRULE_classVirtSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1715)
		p.Match(CPP14ParserFinal)
	}

	return localctx
}

// IClassKeyContext is an interface to support dynamic dispatch.
type IClassKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassKeyContext differentiates from other interfaces.
	IsClassKeyContext()
}

type ClassKeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassKeyContext() *ClassKeyContext {
	var p = new(ClassKeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classKey
	return p
}

func (*ClassKeyContext) IsClassKeyContext() {}

func NewClassKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassKeyContext {
	var p = new(ClassKeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classKey

	return p
}

func (s *ClassKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassKeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *ClassKeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *ClassKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassKey(s)
	}
}

func (s *ClassKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassKey(s)
	}
}

func (p *CPP14Parser) ClassKey() (localctx IClassKeyContext) {
	localctx = NewClassKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, CPP14ParserRULE_classKey)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1717)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserClass || _la == CPP14ParserStruct) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMemberSpecificationContext is an interface to support dynamic dispatch.
type IMemberSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberSpecificationContext differentiates from other interfaces.
	IsMemberSpecificationContext()
}

type MemberSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberSpecificationContext() *MemberSpecificationContext {
	var p = new(MemberSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberSpecification
	return p
}

func (*MemberSpecificationContext) IsMemberSpecificationContext() {}

func NewMemberSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberSpecificationContext {
	var p = new(MemberSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberSpecification

	return p
}

func (s *MemberSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberSpecificationContext) AllMemberdeclaration() []IMemberdeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMemberdeclarationContext)(nil)).Elem())
	var tst = make([]IMemberdeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMemberdeclarationContext)
		}
	}

	return tst
}

func (s *MemberSpecificationContext) Memberdeclaration(i int) IMemberdeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberdeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMemberdeclarationContext)
}

func (s *MemberSpecificationContext) AllAccessSpecifier() []IAccessSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAccessSpecifierContext)(nil)).Elem())
	var tst = make([]IAccessSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAccessSpecifierContext)
		}
	}

	return tst
}

func (s *MemberSpecificationContext) AccessSpecifier(i int) IAccessSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAccessSpecifierContext)
}

func (s *MemberSpecificationContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserColon)
}

func (s *MemberSpecificationContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, i)
}

func (s *MemberSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemberSpecification(s)
	}
}

func (s *MemberSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemberSpecification(s)
	}
}

func (p *CPP14Parser) MemberSpecification() (localctx IMemberSpecificationContext) {
	localctx = NewMemberSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, CPP14ParserRULE_memberSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1723)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-10)&-(0x1f+1)) == 0 && ((1<<uint((_la-10)))&((1<<(CPP14ParserAlignas-10))|(1<<(CPP14ParserAuto-10))|(1<<(CPP14ParserBool-10))|(1<<(CPP14ParserChar-10))|(1<<(CPP14ParserChar16-10))|(1<<(CPP14ParserChar32-10))|(1<<(CPP14ParserClass-10))|(1<<(CPP14ParserConst-10))|(1<<(CPP14ParserConstexpr-10))|(1<<(CPP14ParserDecltype-10))|(1<<(CPP14ParserDouble-10))|(1<<(CPP14ParserEnum-10))|(1<<(CPP14ParserExplicit-10))|(1<<(CPP14ParserExtern-10))|(1<<(CPP14ParserFloat-10))|(1<<(CPP14ParserFriend-10)))) != 0) || (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(CPP14ParserInline-44))|(1<<(CPP14ParserInt-44))|(1<<(CPP14ParserLong-44))|(1<<(CPP14ParserMutable-44))|(1<<(CPP14ParserOperator-44))|(1<<(CPP14ParserPrivate-44))|(1<<(CPP14ParserProtected-44))|(1<<(CPP14ParserPublic-44))|(1<<(CPP14ParserRegister-44))|(1<<(CPP14ParserShort-44))|(1<<(CPP14ParserSigned-44))|(1<<(CPP14ParserStatic-44))|(1<<(CPP14ParserStatic_assert-44))|(1<<(CPP14ParserStruct-44))|(1<<(CPP14ParserTemplate-44))|(1<<(CPP14ParserThread_local-44))|(1<<(CPP14ParserTypedef-44)))) != 0) || (((_la-76)&-(0x1f+1)) == 0 && ((1<<uint((_la-76)))&((1<<(CPP14ParserTypename_-76))|(1<<(CPP14ParserUnion-76))|(1<<(CPP14ParserUnsigned-76))|(1<<(CPP14ParserUsing-76))|(1<<(CPP14ParserVirtual-76))|(1<<(CPP14ParserVoid-76))|(1<<(CPP14ParserVolatile-76))|(1<<(CPP14ParserWchar-76))|(1<<(CPP14ParserLeftParen-76))|(1<<(CPP14ParserLeftBracket-76))|(1<<(CPP14ParserStar-76))|(1<<(CPP14ParserAnd-76))|(1<<(CPP14ParserTilde-76)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserColon-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserSemi-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
		p.SetState(1723)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAlignas, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStruct, CPP14ParserTemplate, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
			{
				p.SetState(1719)
				p.Memberdeclaration()
			}

		case CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic:
			{
				p.SetState(1720)
				p.AccessSpecifier()
			}
			{
				p.SetState(1721)
				p.Match(CPP14ParserColon)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1725)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMemberdeclarationContext is an interface to support dynamic dispatch.
type IMemberdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberdeclarationContext differentiates from other interfaces.
	IsMemberdeclarationContext()
}

type MemberdeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberdeclarationContext() *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclaration
	return p
}

func (*MemberdeclarationContext) IsMemberdeclarationContext() {}

func NewMemberdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberdeclaration

	return p
}

func (s *MemberdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *MemberdeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *MemberdeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *MemberdeclarationContext) MemberDeclaratorList() IMemberDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberDeclaratorListContext)
}

func (s *MemberdeclarationContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *MemberdeclarationContext) UsingDeclaration() IUsingDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingDeclarationContext)
}

func (s *MemberdeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStaticAssertDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *MemberdeclarationContext) TemplateDeclaration() ITemplateDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDeclarationContext)
}

func (s *MemberdeclarationContext) AliasDeclaration() IAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasDeclarationContext)
}

func (s *MemberdeclarationContext) EmptyDeclaration() IEmptyDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptyDeclarationContext)
}

func (s *MemberdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberdeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemberdeclaration(s)
	}
}

func (s *MemberdeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemberdeclaration(s)
	}
}

func (p *CPP14Parser) Memberdeclaration() (localctx IMemberdeclarationContext) {
	localctx = NewMemberdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, CPP14ParserRULE_memberdeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1728)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1727)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1731)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1730)
				p.DeclSpecifierSeq()
			}

		}
		p.SetState(1734)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserDecltype || _la == CPP14ParserOperator || (((_la-85)&-(0x1f+1)) == 0 && ((1<<uint((_la-85)))&((1<<(CPP14ParserLeftParen-85))|(1<<(CPP14ParserLeftBracket-85))|(1<<(CPP14ParserStar-85))|(1<<(CPP14ParserAnd-85))|(1<<(CPP14ParserTilde-85)))) != 0) || (((_la-118)&-(0x1f+1)) == 0 && ((1<<uint((_la-118)))&((1<<(CPP14ParserAndAnd-118))|(1<<(CPP14ParserColon-118))|(1<<(CPP14ParserDoublecolon-118))|(1<<(CPP14ParserEllipsis-118))|(1<<(CPP14ParserIdentifier-118)))) != 0) {
			{
				p.SetState(1733)
				p.MemberDeclaratorList()
			}

		}
		{
			p.SetState(1736)
			p.Match(CPP14ParserSemi)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1737)
			p.FunctionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1738)
			p.UsingDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1739)
			p.StaticAssertDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1740)
			p.TemplateDeclaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1741)
			p.AliasDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1742)
			p.EmptyDeclaration()
		}

	}

	return localctx
}

// IMemberDeclaratorListContext is an interface to support dynamic dispatch.
type IMemberDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberDeclaratorListContext differentiates from other interfaces.
	IsMemberDeclaratorListContext()
}

type MemberDeclaratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberDeclaratorListContext() *MemberDeclaratorListContext {
	var p = new(MemberDeclaratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclaratorList
	return p
}

func (*MemberDeclaratorListContext) IsMemberDeclaratorListContext() {}

func NewMemberDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberDeclaratorListContext {
	var p = new(MemberDeclaratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberDeclaratorList

	return p
}

func (s *MemberDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberDeclaratorListContext) AllMemberDeclarator() []IMemberDeclaratorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMemberDeclaratorContext)(nil)).Elem())
	var tst = make([]IMemberDeclaratorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMemberDeclaratorContext)
		}
	}

	return tst
}

func (s *MemberDeclaratorListContext) MemberDeclarator(i int) IMemberDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberDeclaratorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMemberDeclaratorContext)
}

func (s *MemberDeclaratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *MemberDeclaratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *MemberDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberDeclaratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemberDeclaratorList(s)
	}
}

func (s *MemberDeclaratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemberDeclaratorList(s)
	}
}

func (p *CPP14Parser) MemberDeclaratorList() (localctx IMemberDeclaratorListContext) {
	localctx = NewMemberDeclaratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, CPP14ParserRULE_memberDeclaratorList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1745)
		p.MemberDeclarator()
	}
	p.SetState(1750)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1746)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1747)
			p.MemberDeclarator()
		}

		p.SetState(1752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMemberDeclaratorContext is an interface to support dynamic dispatch.
type IMemberDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberDeclaratorContext differentiates from other interfaces.
	IsMemberDeclaratorContext()
}

type MemberDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberDeclaratorContext() *MemberDeclaratorContext {
	var p = new(MemberDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclarator
	return p
}

func (*MemberDeclaratorContext) IsMemberDeclaratorContext() {}

func NewMemberDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberDeclaratorContext {
	var p = new(MemberDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberDeclarator

	return p
}

func (s *MemberDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberDeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *MemberDeclaratorContext) VirtualSpecifierSeq() IVirtualSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtualSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierSeqContext)
}

func (s *MemberDeclaratorContext) PureSpecifier() IPureSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPureSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPureSpecifierContext)
}

func (s *MemberDeclaratorContext) BraceOrEqualInitializer() IBraceOrEqualInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBraceOrEqualInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBraceOrEqualInitializerContext)
}

func (s *MemberDeclaratorContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *MemberDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *MemberDeclaratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MemberDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *MemberDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemberDeclarator(s)
	}
}

func (s *MemberDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemberDeclarator(s)
	}
}

func (p *CPP14Parser) MemberDeclarator() (localctx IMemberDeclaratorContext) {
	localctx = NewMemberDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, CPP14ParserRULE_memberDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1773)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1753)
			p.Declarator()
		}
		p.SetState(1763)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1755)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal || _la == CPP14ParserOverride {
				{
					p.SetState(1754)
					p.VirtualSpecifierSeq()
				}

			}
			p.SetState(1758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserAssign {
				{
					p.SetState(1757)
					p.PureSpecifier()
				}

			}

		case 2:
			p.SetState(1761)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserLeftBrace || _la == CPP14ParserAssign {
				{
					p.SetState(1760)
					p.BraceOrEqualInitializer()
				}

			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1765)
				p.Match(CPP14ParserIdentifier)
			}

		}
		p.SetState(1769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1768)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(1771)
			p.Match(CPP14ParserColon)
		}
		{
			p.SetState(1772)
			p.ConstantExpression()
		}

	}

	return localctx
}

// IVirtualSpecifierSeqContext is an interface to support dynamic dispatch.
type IVirtualSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVirtualSpecifierSeqContext differentiates from other interfaces.
	IsVirtualSpecifierSeqContext()
}

type VirtualSpecifierSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtualSpecifierSeqContext() *VirtualSpecifierSeqContext {
	var p = new(VirtualSpecifierSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifierSeq
	return p
}

func (*VirtualSpecifierSeqContext) IsVirtualSpecifierSeqContext() {}

func NewVirtualSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualSpecifierSeqContext {
	var p = new(VirtualSpecifierSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtualSpecifierSeq

	return p
}

func (s *VirtualSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualSpecifierSeqContext) AllVirtualSpecifier() []IVirtualSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVirtualSpecifierContext)(nil)).Elem())
	var tst = make([]IVirtualSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVirtualSpecifierContext)
		}
	}

	return tst
}

func (s *VirtualSpecifierSeqContext) VirtualSpecifier(i int) IVirtualSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVirtualSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierContext)
}

func (s *VirtualSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualSpecifierSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterVirtualSpecifierSeq(s)
	}
}

func (s *VirtualSpecifierSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitVirtualSpecifierSeq(s)
	}
}

func (p *CPP14Parser) VirtualSpecifierSeq() (localctx IVirtualSpecifierSeqContext) {
	localctx = NewVirtualSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, CPP14ParserRULE_virtualSpecifierSeq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1776)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == CPP14ParserFinal || _la == CPP14ParserOverride {
		{
			p.SetState(1775)
			p.VirtualSpecifier()
		}

		p.SetState(1778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IVirtualSpecifierContext is an interface to support dynamic dispatch.
type IVirtualSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVirtualSpecifierContext differentiates from other interfaces.
	IsVirtualSpecifierContext()
}

type VirtualSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtualSpecifierContext() *VirtualSpecifierContext {
	var p = new(VirtualSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifier
	return p
}

func (*VirtualSpecifierContext) IsVirtualSpecifierContext() {}

func NewVirtualSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualSpecifierContext {
	var p = new(VirtualSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtualSpecifier

	return p
}

func (s *VirtualSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualSpecifierContext) Override() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOverride, 0)
}

func (s *VirtualSpecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *VirtualSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterVirtualSpecifier(s)
	}
}

func (s *VirtualSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitVirtualSpecifier(s)
	}
}

func (p *CPP14Parser) VirtualSpecifier() (localctx IVirtualSpecifierContext) {
	localctx = NewVirtualSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, CPP14ParserRULE_virtualSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1780)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserFinal || _la == CPP14ParserOverride) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPureSpecifierContext is an interface to support dynamic dispatch.
type IPureSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVal returns the val token.
	GetVal() antlr.Token

	// SetVal sets the val token.
	SetVal(antlr.Token)

	// IsPureSpecifierContext differentiates from other interfaces.
	IsPureSpecifierContext()
}

type PureSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	val    antlr.Token
}

func NewEmptyPureSpecifierContext() *PureSpecifierContext {
	var p = new(PureSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_pureSpecifier
	return p
}

func (*PureSpecifierContext) IsPureSpecifierContext() {}

func NewPureSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PureSpecifierContext {
	var p = new(PureSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pureSpecifier

	return p
}

func (s *PureSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PureSpecifierContext) GetVal() antlr.Token { return s.val }

func (s *PureSpecifierContext) SetVal(v antlr.Token) { s.val = v }

func (s *PureSpecifierContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *PureSpecifierContext) OctalLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOctalLiteral, 0)
}

func (s *PureSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PureSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PureSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterPureSpecifier(s)
	}
}

func (s *PureSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitPureSpecifier(s)
	}
}

func (p *CPP14Parser) PureSpecifier() (localctx IPureSpecifierContext) {
	localctx = NewPureSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, CPP14ParserRULE_pureSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1782)
		p.Match(CPP14ParserAssign)
	}
	{
		p.SetState(1783)

		var _m = p.Match(CPP14ParserOctalLiteral)

		localctx.(*PureSpecifierContext).val = _m
	}
	//if ((func() string {
	//	if localctx.(*PureSpecifierContext).GetVal() == nil {
	//		return ""
	//	} else {
	//		return localctx.(*PureSpecifierContext).GetVal().GetText()
	//	}
	//}()).compareTo("0") != 0) throw
	//new
	//InputMismatchException(this)

	return localctx
}

// IBaseClauseContext is an interface to support dynamic dispatch.
type IBaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseClauseContext differentiates from other interfaces.
	IsBaseClauseContext()
}

type BaseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseClauseContext() *BaseClauseContext {
	var p = new(BaseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseClause
	return p
}

func (*BaseClauseContext) IsBaseClauseContext() {}

func NewBaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseClauseContext {
	var p = new(BaseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseClause

	return p
}

func (s *BaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseClauseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *BaseClauseContext) BaseSpecifierList() IBaseSpecifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseSpecifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseSpecifierListContext)
}

func (s *BaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBaseClause(s)
	}
}

func (s *BaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBaseClause(s)
	}
}

func (p *CPP14Parser) BaseClause() (localctx IBaseClauseContext) {
	localctx = NewBaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, CPP14ParserRULE_baseClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1786)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(1787)
		p.BaseSpecifierList()
	}

	return localctx
}

// IBaseSpecifierListContext is an interface to support dynamic dispatch.
type IBaseSpecifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseSpecifierListContext differentiates from other interfaces.
	IsBaseSpecifierListContext()
}

type BaseSpecifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseSpecifierListContext() *BaseSpecifierListContext {
	var p = new(BaseSpecifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifierList
	return p
}

func (*BaseSpecifierListContext) IsBaseSpecifierListContext() {}

func NewBaseSpecifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseSpecifierListContext {
	var p = new(BaseSpecifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseSpecifierList

	return p
}

func (s *BaseSpecifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseSpecifierListContext) AllBaseSpecifier() []IBaseSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBaseSpecifierContext)(nil)).Elem())
	var tst = make([]IBaseSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBaseSpecifierContext)
		}
	}

	return tst
}

func (s *BaseSpecifierListContext) BaseSpecifier(i int) IBaseSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBaseSpecifierContext)
}

func (s *BaseSpecifierListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *BaseSpecifierListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *BaseSpecifierListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *BaseSpecifierListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *BaseSpecifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseSpecifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseSpecifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBaseSpecifierList(s)
	}
}

func (s *BaseSpecifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBaseSpecifierList(s)
	}
}

func (p *CPP14Parser) BaseSpecifierList() (localctx IBaseSpecifierListContext) {
	localctx = NewBaseSpecifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, CPP14ParserRULE_baseSpecifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1789)
		p.BaseSpecifier()
	}
	p.SetState(1791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1790)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.SetState(1800)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1793)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1794)
			p.BaseSpecifier()
		}
		p.SetState(1796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1795)
				p.Match(CPP14ParserEllipsis)
			}

		}

		p.SetState(1802)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBaseSpecifierContext is an interface to support dynamic dispatch.
type IBaseSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseSpecifierContext differentiates from other interfaces.
	IsBaseSpecifierContext()
}

type BaseSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseSpecifierContext() *BaseSpecifierContext {
	var p = new(BaseSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifier
	return p
}

func (*BaseSpecifierContext) IsBaseSpecifierContext() {}

func NewBaseSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseSpecifierContext {
	var p = new(BaseSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseSpecifier

	return p
}

func (s *BaseSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseSpecifierContext) BaseTypeSpecifier() IBaseTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseTypeSpecifierContext)
}

func (s *BaseSpecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *BaseSpecifierContext) AccessSpecifier() IAccessSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccessSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccessSpecifierContext)
}

func (s *BaseSpecifierContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *BaseSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBaseSpecifier(s)
	}
}

func (s *BaseSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBaseSpecifier(s)
	}
}

func (p *CPP14Parser) BaseSpecifier() (localctx IBaseSpecifierContext) {
	localctx = NewBaseSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, CPP14ParserRULE_baseSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1804)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1803)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1818)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		{
			p.SetState(1806)
			p.BaseTypeSpecifier()
		}

	case CPP14ParserVirtual:
		{
			p.SetState(1807)
			p.Match(CPP14ParserVirtual)
		}
		p.SetState(1809)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(CPP14ParserPrivate-54))|(1<<(CPP14ParserProtected-54))|(1<<(CPP14ParserPublic-54)))) != 0 {
			{
				p.SetState(1808)
				p.AccessSpecifier()
			}

		}
		{
			p.SetState(1811)
			p.BaseTypeSpecifier()
		}

	case CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic:
		{
			p.SetState(1812)
			p.AccessSpecifier()
		}
		p.SetState(1814)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserVirtual {
			{
				p.SetState(1813)
				p.Match(CPP14ParserVirtual)
			}

		}
		{
			p.SetState(1816)
			p.BaseTypeSpecifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IClassOrDeclTypeContext is an interface to support dynamic dispatch.
type IClassOrDeclTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassOrDeclTypeContext differentiates from other interfaces.
	IsClassOrDeclTypeContext()
}

type ClassOrDeclTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassOrDeclTypeContext() *ClassOrDeclTypeContext {
	var p = new(ClassOrDeclTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_classOrDeclType
	return p
}

func (*ClassOrDeclTypeContext) IsClassOrDeclTypeContext() {}

func NewClassOrDeclTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassOrDeclTypeContext {
	var p = new(ClassOrDeclTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classOrDeclType

	return p
}

func (s *ClassOrDeclTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassOrDeclTypeContext) ClassName() IClassNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *ClassOrDeclTypeContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ClassOrDeclTypeContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecltypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *ClassOrDeclTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassOrDeclTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassOrDeclTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterClassOrDeclType(s)
	}
}

func (s *ClassOrDeclTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitClassOrDeclType(s)
	}
}

func (p *CPP14Parser) ClassOrDeclType() (localctx IClassOrDeclTypeContext) {
	localctx = NewClassOrDeclTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, CPP14ParserRULE_classOrDeclType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1825)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1821)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1820)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1823)
			p.ClassName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1824)
			p.DecltypeSpecifier()
		}

	}

	return localctx
}

// IBaseTypeSpecifierContext is an interface to support dynamic dispatch.
type IBaseTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseTypeSpecifierContext differentiates from other interfaces.
	IsBaseTypeSpecifierContext()
}

type BaseTypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseTypeSpecifierContext() *BaseTypeSpecifierContext {
	var p = new(BaseTypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseTypeSpecifier
	return p
}

func (*BaseTypeSpecifierContext) IsBaseTypeSpecifierContext() {}

func NewBaseTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseTypeSpecifierContext {
	var p = new(BaseTypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseTypeSpecifier

	return p
}

func (s *BaseTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseTypeSpecifierContext) ClassOrDeclType() IClassOrDeclTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassOrDeclTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassOrDeclTypeContext)
}

func (s *BaseTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseTypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterBaseTypeSpecifier(s)
	}
}

func (s *BaseTypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitBaseTypeSpecifier(s)
	}
}

func (p *CPP14Parser) BaseTypeSpecifier() (localctx IBaseTypeSpecifierContext) {
	localctx = NewBaseTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, CPP14ParserRULE_baseTypeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1827)
		p.ClassOrDeclType()
	}

	return localctx
}

// IAccessSpecifierContext is an interface to support dynamic dispatch.
type IAccessSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccessSpecifierContext differentiates from other interfaces.
	IsAccessSpecifierContext()
}

type AccessSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccessSpecifierContext() *AccessSpecifierContext {
	var p = new(AccessSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_accessSpecifier
	return p
}

func (*AccessSpecifierContext) IsAccessSpecifierContext() {}

func NewAccessSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccessSpecifierContext {
	var p = new(AccessSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_accessSpecifier

	return p
}

func (s *AccessSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AccessSpecifierContext) Private() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPrivate, 0)
}

func (s *AccessSpecifierContext) Protected() antlr.TerminalNode {
	return s.GetToken(CPP14ParserProtected, 0)
}

func (s *AccessSpecifierContext) Public() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPublic, 0)
}

func (s *AccessSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccessSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccessSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterAccessSpecifier(s)
	}
}

func (s *AccessSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitAccessSpecifier(s)
	}
}

func (p *CPP14Parser) AccessSpecifier() (localctx IAccessSpecifierContext) {
	localctx = NewAccessSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, CPP14ParserRULE_accessSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1829)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(CPP14ParserPrivate-54))|(1<<(CPP14ParserProtected-54))|(1<<(CPP14ParserPublic-54)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IConversionFunctionIdContext is an interface to support dynamic dispatch.
type IConversionFunctionIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversionFunctionIdContext differentiates from other interfaces.
	IsConversionFunctionIdContext()
}

type ConversionFunctionIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionFunctionIdContext() *ConversionFunctionIdContext {
	var p = new(ConversionFunctionIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionFunctionId
	return p
}

func (*ConversionFunctionIdContext) IsConversionFunctionIdContext() {}

func NewConversionFunctionIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionFunctionIdContext {
	var p = new(ConversionFunctionIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionFunctionId

	return p
}

func (s *ConversionFunctionIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionFunctionIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *ConversionFunctionIdContext) ConversionTypeId() IConversionTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionTypeIdContext)
}

func (s *ConversionFunctionIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionFunctionIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionFunctionIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConversionFunctionId(s)
	}
}

func (s *ConversionFunctionIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConversionFunctionId(s)
	}
}

func (p *CPP14Parser) ConversionFunctionId() (localctx IConversionFunctionIdContext) {
	localctx = NewConversionFunctionIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, CPP14ParserRULE_conversionFunctionId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1831)
		p.Match(CPP14ParserOperator)
	}
	{
		p.SetState(1832)
		p.ConversionTypeId()
	}

	return localctx
}

// IConversionTypeIdContext is an interface to support dynamic dispatch.
type IConversionTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversionTypeIdContext differentiates from other interfaces.
	IsConversionTypeIdContext()
}

type ConversionTypeIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionTypeIdContext() *ConversionTypeIdContext {
	var p = new(ConversionTypeIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionTypeId
	return p
}

func (*ConversionTypeIdContext) IsConversionTypeIdContext() {}

func NewConversionTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionTypeIdContext {
	var p = new(ConversionTypeIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionTypeId

	return p
}

func (s *ConversionTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *ConversionTypeIdContext) ConversionDeclarator() IConversionDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionDeclaratorContext)
}

func (s *ConversionTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionTypeIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConversionTypeId(s)
	}
}

func (s *ConversionTypeIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConversionTypeId(s)
	}
}

func (p *CPP14Parser) ConversionTypeId() (localctx IConversionTypeIdContext) {
	localctx = NewConversionTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, CPP14ParserRULE_conversionTypeId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1834)
		p.TypeSpecifierSeq()
	}
	p.SetState(1836)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1835)
			p.ConversionDeclarator()
		}

	}

	return localctx
}

// IConversionDeclaratorContext is an interface to support dynamic dispatch.
type IConversionDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversionDeclaratorContext differentiates from other interfaces.
	IsConversionDeclaratorContext()
}

type ConversionDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionDeclaratorContext() *ConversionDeclaratorContext {
	var p = new(ConversionDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionDeclarator
	return p
}

func (*ConversionDeclaratorContext) IsConversionDeclaratorContext() {}

func NewConversionDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionDeclaratorContext {
	var p = new(ConversionDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionDeclarator

	return p
}

func (s *ConversionDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionDeclaratorContext) PointerOperator() IPointerOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *ConversionDeclaratorContext) ConversionDeclarator() IConversionDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionDeclaratorContext)
}

func (s *ConversionDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConversionDeclarator(s)
	}
}

func (s *ConversionDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConversionDeclarator(s)
	}
}

func (p *CPP14Parser) ConversionDeclarator() (localctx IConversionDeclaratorContext) {
	localctx = NewConversionDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, CPP14ParserRULE_conversionDeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1838)
		p.PointerOperator()
	}
	p.SetState(1840)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1839)
			p.ConversionDeclarator()
		}

	}

	return localctx
}

// IConstructorInitializerContext is an interface to support dynamic dispatch.
type IConstructorInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorInitializerContext differentiates from other interfaces.
	IsConstructorInitializerContext()
}

type ConstructorInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorInitializerContext() *ConstructorInitializerContext {
	var p = new(ConstructorInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_constructorInitializer
	return p
}

func (*ConstructorInitializerContext) IsConstructorInitializerContext() {}

func NewConstructorInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorInitializerContext {
	var p = new(ConstructorInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_constructorInitializer

	return p
}

func (s *ConstructorInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorInitializerContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *ConstructorInitializerContext) MemInitializerList() IMemInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemInitializerListContext)
}

func (s *ConstructorInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterConstructorInitializer(s)
	}
}

func (s *ConstructorInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitConstructorInitializer(s)
	}
}

func (p *CPP14Parser) ConstructorInitializer() (localctx IConstructorInitializerContext) {
	localctx = NewConstructorInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, CPP14ParserRULE_constructorInitializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1842)
		p.Match(CPP14ParserColon)
	}
	{
		p.SetState(1843)
		p.MemInitializerList()
	}

	return localctx
}

// IMemInitializerListContext is an interface to support dynamic dispatch.
type IMemInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemInitializerListContext differentiates from other interfaces.
	IsMemInitializerListContext()
}

type MemInitializerListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemInitializerListContext() *MemInitializerListContext {
	var p = new(MemInitializerListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializerList
	return p
}

func (*MemInitializerListContext) IsMemInitializerListContext() {}

func NewMemInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemInitializerListContext {
	var p = new(MemInitializerListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memInitializerList

	return p
}

func (s *MemInitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *MemInitializerListContext) AllMemInitializer() []IMemInitializerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMemInitializerContext)(nil)).Elem())
	var tst = make([]IMemInitializerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMemInitializerContext)
		}
	}

	return tst
}

func (s *MemInitializerListContext) MemInitializer(i int) IMemInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemInitializerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMemInitializerContext)
}

func (s *MemInitializerListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *MemInitializerListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *MemInitializerListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *MemInitializerListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *MemInitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemInitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemInitializerListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemInitializerList(s)
	}
}

func (s *MemInitializerListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemInitializerList(s)
	}
}

func (p *CPP14Parser) MemInitializerList() (localctx IMemInitializerListContext) {
	localctx = NewMemInitializerListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, CPP14ParserRULE_memInitializerList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1845)
		p.MemInitializer()
	}
	p.SetState(1847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1846)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.SetState(1856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1849)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1850)
			p.MemInitializer()
		}
		p.SetState(1852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1851)
				p.Match(CPP14ParserEllipsis)
			}

		}

		p.SetState(1858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMemInitializerContext is an interface to support dynamic dispatch.
type IMemInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemInitializerContext differentiates from other interfaces.
	IsMemInitializerContext()
}

type MemInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemInitializerContext() *MemInitializerContext {
	var p = new(MemInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializer
	return p
}

func (*MemInitializerContext) IsMemInitializerContext() {}

func NewMemInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemInitializerContext {
	var p = new(MemInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memInitializer

	return p
}

func (s *MemInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *MemInitializerContext) Meminitializerid() IMeminitializeridContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMeminitializeridContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMeminitializeridContext)
}

func (s *MemInitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *MemInitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *MemInitializerContext) BracedInitList() IBracedInitListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracedInitListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *MemInitializerContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *MemInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMemInitializer(s)
	}
}

func (s *MemInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMemInitializer(s)
	}
}

func (p *CPP14Parser) MemInitializer() (localctx IMemInitializerContext) {
	localctx = NewMemInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, CPP14ParserRULE_memInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1859)
		p.Meminitializerid()
	}
	p.SetState(1866)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		{
			p.SetState(1860)
			p.Match(CPP14ParserLeftParen)
		}
		p.SetState(1862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserLeftBrace-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
			{
				p.SetState(1861)
				p.ExpressionList()
			}

		}
		{
			p.SetState(1864)
			p.Match(CPP14ParserRightParen)
		}

	case CPP14ParserLeftBrace:
		{
			p.SetState(1865)
			p.BracedInitList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMeminitializeridContext is an interface to support dynamic dispatch.
type IMeminitializeridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMeminitializeridContext differentiates from other interfaces.
	IsMeminitializeridContext()
}

type MeminitializeridContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeminitializeridContext() *MeminitializeridContext {
	var p = new(MeminitializeridContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializerid
	return p
}

func (*MeminitializeridContext) IsMeminitializeridContext() {}

func NewMeminitializeridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeminitializeridContext {
	var p = new(MeminitializeridContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_meminitializerid

	return p
}

func (s *MeminitializeridContext) GetParser() antlr.Parser { return s.parser }

func (s *MeminitializeridContext) ClassOrDeclType() IClassOrDeclTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassOrDeclTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassOrDeclTypeContext)
}

func (s *MeminitializeridContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MeminitializeridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeminitializeridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MeminitializeridContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterMeminitializerid(s)
	}
}

func (s *MeminitializeridContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitMeminitializerid(s)
	}
}

func (p *CPP14Parser) Meminitializerid() (localctx IMeminitializeridContext) {
	localctx = NewMeminitializeridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, CPP14ParserRULE_meminitializerid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1868)
			p.ClassOrDeclType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1869)
			p.Match(CPP14ParserIdentifier)
		}

	}

	return localctx
}

// IOperatorFunctionIdContext is an interface to support dynamic dispatch.
type IOperatorFunctionIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorFunctionIdContext differentiates from other interfaces.
	IsOperatorFunctionIdContext()
}

type OperatorFunctionIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorFunctionIdContext() *OperatorFunctionIdContext {
	var p = new(OperatorFunctionIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_operatorFunctionId
	return p
}

func (*OperatorFunctionIdContext) IsOperatorFunctionIdContext() {}

func NewOperatorFunctionIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorFunctionIdContext {
	var p = new(OperatorFunctionIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_operatorFunctionId

	return p
}

func (s *OperatorFunctionIdContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorFunctionIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *OperatorFunctionIdContext) TheOperator() ITheOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheOperatorContext)
}

func (s *OperatorFunctionIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorFunctionIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorFunctionIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterOperatorFunctionId(s)
	}
}

func (s *OperatorFunctionIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitOperatorFunctionId(s)
	}
}

func (p *CPP14Parser) OperatorFunctionId() (localctx IOperatorFunctionIdContext) {
	localctx = NewOperatorFunctionIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, CPP14ParserRULE_operatorFunctionId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1872)
		p.Match(CPP14ParserOperator)
	}
	{
		p.SetState(1873)
		p.TheOperator()
	}

	return localctx
}

// ILiteralOperatorIdContext is an interface to support dynamic dispatch.
type ILiteralOperatorIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralOperatorIdContext differentiates from other interfaces.
	IsLiteralOperatorIdContext()
}

type LiteralOperatorIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralOperatorIdContext() *LiteralOperatorIdContext {
	var p = new(LiteralOperatorIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_literalOperatorId
	return p
}

func (*LiteralOperatorIdContext) IsLiteralOperatorIdContext() {}

func NewLiteralOperatorIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralOperatorIdContext {
	var p = new(LiteralOperatorIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literalOperatorId

	return p
}

func (s *LiteralOperatorIdContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralOperatorIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *LiteralOperatorIdContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LiteralOperatorIdContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LiteralOperatorIdContext) UserDefinedStringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserDefinedStringLiteral, 0)
}

func (s *LiteralOperatorIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralOperatorIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralOperatorIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLiteralOperatorId(s)
	}
}

func (s *LiteralOperatorIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLiteralOperatorId(s)
	}
}

func (p *CPP14Parser) LiteralOperatorId() (localctx ILiteralOperatorIdContext) {
	localctx = NewLiteralOperatorIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, CPP14ParserRULE_literalOperatorId)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1875)
		p.Match(CPP14ParserOperator)
	}
	p.SetState(1879)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserStringLiteral:
		{
			p.SetState(1876)
			p.Match(CPP14ParserStringLiteral)
		}
		{
			p.SetState(1877)
			p.Match(CPP14ParserIdentifier)
		}

	case CPP14ParserUserDefinedStringLiteral:
		{
			p.SetState(1878)
			p.Match(CPP14ParserUserDefinedStringLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateDeclarationContext is an interface to support dynamic dispatch.
type ITemplateDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDeclarationContext differentiates from other interfaces.
	IsTemplateDeclarationContext()
}

type TemplateDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDeclarationContext() *TemplateDeclarationContext {
	var p = new(TemplateDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateDeclaration
	return p
}

func (*TemplateDeclarationContext) IsTemplateDeclarationContext() {}

func NewTemplateDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDeclarationContext {
	var p = new(TemplateDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateDeclaration

	return p
}

func (s *TemplateDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDeclarationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TemplateDeclarationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplateDeclarationContext) TemplateparameterList() ITemplateparameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterListContext)
}

func (s *TemplateDeclarationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplateDeclarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *TemplateDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateDeclaration(s)
	}
}

func (s *TemplateDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateDeclaration(s)
	}
}

func (p *CPP14Parser) TemplateDeclaration() (localctx ITemplateDeclarationContext) {
	localctx = NewTemplateDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, CPP14ParserRULE_templateDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1881)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(1882)
		p.Match(CPP14ParserLess)
	}
	{
		p.SetState(1883)
		p.TemplateparameterList()
	}
	{
		p.SetState(1884)
		p.Match(CPP14ParserGreater)
	}
	{
		p.SetState(1885)
		p.Declaration()
	}

	return localctx
}

// ITemplateparameterListContext is an interface to support dynamic dispatch.
type ITemplateparameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateparameterListContext differentiates from other interfaces.
	IsTemplateparameterListContext()
}

type TemplateparameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateparameterListContext() *TemplateparameterListContext {
	var p = new(TemplateparameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateparameterList
	return p
}

func (*TemplateparameterListContext) IsTemplateparameterListContext() {}

func NewTemplateparameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateparameterListContext {
	var p = new(TemplateparameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateparameterList

	return p
}

func (s *TemplateparameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateparameterListContext) AllTemplateParameter() []ITemplateParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateParameterContext)(nil)).Elem())
	var tst = make([]ITemplateParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateParameterContext)
		}
	}

	return tst
}

func (s *TemplateparameterListContext) TemplateParameter(i int) ITemplateParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateParameterContext)
}

func (s *TemplateparameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TemplateparameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TemplateparameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateparameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateparameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateparameterList(s)
	}
}

func (s *TemplateparameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateparameterList(s)
	}
}

func (p *CPP14Parser) TemplateparameterList() (localctx ITemplateparameterListContext) {
	localctx = NewTemplateparameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, CPP14ParserRULE_templateparameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1887)
		p.TemplateParameter()
	}
	p.SetState(1892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1888)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1889)
			p.TemplateParameter()
		}

		p.SetState(1894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateParameterContext is an interface to support dynamic dispatch.
type ITemplateParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateParameterContext differentiates from other interfaces.
	IsTemplateParameterContext()
}

type TemplateParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateParameterContext() *TemplateParameterContext {
	var p = new(TemplateParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateParameter
	return p
}

func (*TemplateParameterContext) IsTemplateParameterContext() {}

func NewTemplateParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateParameterContext {
	var p = new(TemplateParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateParameter

	return p
}

func (s *TemplateParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateParameterContext) TypeParameter() ITypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *TemplateParameterContext) ParameterDeclaration() IParameterDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *TemplateParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateParameter(s)
	}
}

func (s *TemplateParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateParameter(s)
	}
}

func (p *CPP14Parser) TemplateParameter() (localctx ITemplateParameterContext) {
	localctx = NewTemplateParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, CPP14ParserRULE_templateParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1897)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1895)
			p.TypeParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1896)
			p.ParameterDeclaration()
		}

	}

	return localctx
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeParameter
	return p
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *TypeParameterContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypeParameterContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TypeParameterContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TypeParameterContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypeParameterContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TypeParameterContext) TemplateparameterList() ITemplateparameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateparameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterListContext)
}

func (s *TypeParameterContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TypeParameterContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *TypeParameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeParameter(s)
	}
}

func (s *TypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeParameter(s)
	}
}

func (p *CPP14Parser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, CPP14ParserRULE_typeParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1908)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserTemplate:
		p.SetState(1904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTemplate {
			{
				p.SetState(1899)
				p.Match(CPP14ParserTemplate)
			}
			{
				p.SetState(1900)
				p.Match(CPP14ParserLess)
			}
			{
				p.SetState(1901)
				p.TemplateparameterList()
			}
			{
				p.SetState(1902)
				p.Match(CPP14ParserGreater)
			}

		}
		{
			p.SetState(1906)
			p.Match(CPP14ParserClass)
		}

	case CPP14ParserTypename_:
		{
			p.SetState(1907)
			p.Match(CPP14ParserTypename_)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1911)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1910)
				p.Match(CPP14ParserEllipsis)
			}

		}
		p.SetState(1914)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1913)
				p.Match(CPP14ParserIdentifier)
			}

		}

	case 2:
		p.SetState(1917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1916)
				p.Match(CPP14ParserIdentifier)
			}

		}
		{
			p.SetState(1919)
			p.Match(CPP14ParserAssign)
		}
		{
			p.SetState(1920)
			p.TheTypeId()
		}

	}

	return localctx
}

// ISimpleTemplateIdContext is an interface to support dynamic dispatch.
type ISimpleTemplateIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleTemplateIdContext differentiates from other interfaces.
	IsSimpleTemplateIdContext()
}

type SimpleTemplateIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTemplateIdContext() *SimpleTemplateIdContext {
	var p = new(SimpleTemplateIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTemplateId
	return p
}

func (*SimpleTemplateIdContext) IsSimpleTemplateIdContext() {}

func NewSimpleTemplateIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTemplateIdContext {
	var p = new(SimpleTemplateIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTemplateId

	return p
}

func (s *SimpleTemplateIdContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTemplateIdContext) TemplateName() ITemplateNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateNameContext)
}

func (s *SimpleTemplateIdContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *SimpleTemplateIdContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *SimpleTemplateIdContext) TemplateArgumentList() ITemplateArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentListContext)
}

func (s *SimpleTemplateIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTemplateIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTemplateIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterSimpleTemplateId(s)
	}
}

func (s *SimpleTemplateIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitSimpleTemplateId(s)
	}
}

func (p *CPP14Parser) SimpleTemplateId() (localctx ISimpleTemplateIdContext) {
	localctx = NewSimpleTemplateIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, CPP14ParserRULE_simpleTemplateId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1923)
		p.TemplateName()
	}
	{
		p.SetState(1924)
		p.Match(CPP14ParserLess)
	}
	p.SetState(1926)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserNew-33))|(1<<(CPP14ParserNoexcept-33))|(1<<(CPP14ParserOperator-33))|(1<<(CPP14ParserReinterpret_cast-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserSizeof-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(CPP14ParserStatic_cast-65))|(1<<(CPP14ParserStruct-65))|(1<<(CPP14ParserThis-65))|(1<<(CPP14ParserTypeid_-65))|(1<<(CPP14ParserTypename_-65))|(1<<(CPP14ParserUnion-65))|(1<<(CPP14ParserUnsigned-65))|(1<<(CPP14ParserVoid-65))|(1<<(CPP14ParserVolatile-65))|(1<<(CPP14ParserWchar-65))|(1<<(CPP14ParserLeftParen-65))|(1<<(CPP14ParserLeftBracket-65))|(1<<(CPP14ParserPlus-65))|(1<<(CPP14ParserMinus-65))|(1<<(CPP14ParserStar-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CPP14ParserAnd-97))|(1<<(CPP14ParserOr-97))|(1<<(CPP14ParserTilde-97))|(1<<(CPP14ParserNot-97))|(1<<(CPP14ParserPlusPlus-97))|(1<<(CPP14ParserMinusMinus-97))|(1<<(CPP14ParserDoublecolon-97)))) != 0) || _la == CPP14ParserIdentifier {
		{
			p.SetState(1925)
			p.TemplateArgumentList()
		}

	}
	{
		p.SetState(1928)
		p.Match(CPP14ParserGreater)
	}

	return localctx
}

// ITemplateIdContext is an interface to support dynamic dispatch.
type ITemplateIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateIdContext differentiates from other interfaces.
	IsTemplateIdContext()
}

type TemplateIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateIdContext() *TemplateIdContext {
	var p = new(TemplateIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateId
	return p
}

func (*TemplateIdContext) IsTemplateIdContext() {}

func NewTemplateIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateIdContext {
	var p = new(TemplateIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateId

	return p
}

func (s *TemplateIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateIdContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TemplateIdContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplateIdContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplateIdContext) OperatorFunctionId() IOperatorFunctionIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorFunctionIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorFunctionIdContext)
}

func (s *TemplateIdContext) LiteralOperatorId() ILiteralOperatorIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralOperatorIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralOperatorIdContext)
}

func (s *TemplateIdContext) TemplateArgumentList() ITemplateArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentListContext)
}

func (s *TemplateIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateIdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateId(s)
	}
}

func (s *TemplateIdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateId(s)
	}
}

func (p *CPP14Parser) TemplateId() (localctx ITemplateIdContext) {
	localctx = NewTemplateIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, CPP14ParserRULE_templateId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1941)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1930)
			p.SimpleTemplateId()
		}

	case CPP14ParserOperator:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1933)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1931)
				p.OperatorFunctionId()
			}

		case 2:
			{
				p.SetState(1932)
				p.LiteralOperatorId()
			}

		}
		{
			p.SetState(1935)
			p.Match(CPP14ParserLess)
		}
		p.SetState(1937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserNew-33))|(1<<(CPP14ParserNoexcept-33))|(1<<(CPP14ParserOperator-33))|(1<<(CPP14ParserReinterpret_cast-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33))|(1<<(CPP14ParserSizeof-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(CPP14ParserStatic_cast-65))|(1<<(CPP14ParserStruct-65))|(1<<(CPP14ParserThis-65))|(1<<(CPP14ParserTypeid_-65))|(1<<(CPP14ParserTypename_-65))|(1<<(CPP14ParserUnion-65))|(1<<(CPP14ParserUnsigned-65))|(1<<(CPP14ParserVoid-65))|(1<<(CPP14ParserVolatile-65))|(1<<(CPP14ParserWchar-65))|(1<<(CPP14ParserLeftParen-65))|(1<<(CPP14ParserLeftBracket-65))|(1<<(CPP14ParserPlus-65))|(1<<(CPP14ParserMinus-65))|(1<<(CPP14ParserStar-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CPP14ParserAnd-97))|(1<<(CPP14ParserOr-97))|(1<<(CPP14ParserTilde-97))|(1<<(CPP14ParserNot-97))|(1<<(CPP14ParserPlusPlus-97))|(1<<(CPP14ParserMinusMinus-97))|(1<<(CPP14ParserDoublecolon-97)))) != 0) || _la == CPP14ParserIdentifier {
			{
				p.SetState(1936)
				p.TemplateArgumentList()
			}

		}
		{
			p.SetState(1939)
			p.Match(CPP14ParserGreater)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateNameContext is an interface to support dynamic dispatch.
type ITemplateNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateNameContext differentiates from other interfaces.
	IsTemplateNameContext()
}

type TemplateNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateNameContext() *TemplateNameContext {
	var p = new(TemplateNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateName
	return p
}

func (*TemplateNameContext) IsTemplateNameContext() {}

func NewTemplateNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateNameContext {
	var p = new(TemplateNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateName

	return p
}

func (s *TemplateNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TemplateNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateName(s)
	}
}

func (s *TemplateNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateName(s)
	}
}

func (p *CPP14Parser) TemplateName() (localctx ITemplateNameContext) {
	localctx = NewTemplateNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, CPP14ParserRULE_templateName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1943)
		p.Match(CPP14ParserIdentifier)
	}

	return localctx
}

// ITemplateArgumentListContext is an interface to support dynamic dispatch.
type ITemplateArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateArgumentListContext differentiates from other interfaces.
	IsTemplateArgumentListContext()
}

type TemplateArgumentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentListContext() *TemplateArgumentListContext {
	var p = new(TemplateArgumentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgumentList
	return p
}

func (*TemplateArgumentListContext) IsTemplateArgumentListContext() {}

func NewTemplateArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentListContext {
	var p = new(TemplateArgumentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateArgumentList

	return p
}

func (s *TemplateArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentListContext) AllTemplateArgument() []ITemplateArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateArgumentContext)(nil)).Elem())
	var tst = make([]ITemplateArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateArgumentContext)
		}
	}

	return tst
}

func (s *TemplateArgumentListContext) TemplateArgument(i int) ITemplateArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentContext)
}

func (s *TemplateArgumentListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *TemplateArgumentListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *TemplateArgumentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TemplateArgumentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TemplateArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateArgumentList(s)
	}
}

func (s *TemplateArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateArgumentList(s)
	}
}

func (p *CPP14Parser) TemplateArgumentList() (localctx ITemplateArgumentListContext) {
	localctx = NewTemplateArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, CPP14ParserRULE_templateArgumentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1945)
		p.TemplateArgument()
	}
	p.SetState(1947)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1946)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.SetState(1956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1949)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(1950)
			p.TemplateArgument()
		}
		p.SetState(1952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1951)
				p.Match(CPP14ParserEllipsis)
			}

		}

		p.SetState(1958)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateArgumentContext is an interface to support dynamic dispatch.
type ITemplateArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateArgumentContext differentiates from other interfaces.
	IsTemplateArgumentContext()
}

type TemplateArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentContext() *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgument
	return p
}

func (*TemplateArgumentContext) IsTemplateArgumentContext() {}

func NewTemplateArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateArgument

	return p
}

func (s *TemplateArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentContext) TheTypeId() ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TemplateArgumentContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *TemplateArgumentContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *TemplateArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTemplateArgument(s)
	}
}

func (s *TemplateArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTemplateArgument(s)
	}
}

func (p *CPP14Parser) TemplateArgument() (localctx ITemplateArgumentContext) {
	localctx = NewTemplateArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, CPP14ParserRULE_templateArgument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1962)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1959)
			p.TheTypeId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1960)
			p.ConstantExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1961)
			p.IdExpression()
		}

	}

	return localctx
}

// ITypeNameSpecifierContext is an interface to support dynamic dispatch.
type ITypeNameSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameSpecifierContext differentiates from other interfaces.
	IsTypeNameSpecifierContext()
}

type TypeNameSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameSpecifierContext() *TypeNameSpecifierContext {
	var p = new(TypeNameSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeNameSpecifier
	return p
}

func (*TypeNameSpecifierContext) IsTypeNameSpecifierContext() {}

func NewTypeNameSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameSpecifierContext {
	var p = new(TypeNameSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeNameSpecifier

	return p
}

func (s *TypeNameSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameSpecifierContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypeNameSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedNameSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *TypeNameSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypeNameSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleTemplateIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TypeNameSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypeNameSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeNameSpecifier(s)
	}
}

func (s *TypeNameSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeNameSpecifier(s)
	}
}

func (p *CPP14Parser) TypeNameSpecifier() (localctx ITypeNameSpecifierContext) {
	localctx = NewTypeNameSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, CPP14ParserRULE_typeNameSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1964)
		p.Match(CPP14ParserTypename_)
	}
	{
		p.SetState(1965)
		p.nestedNameSpecifier(0)
	}
	p.SetState(1971)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1966)
			p.Match(CPP14ParserIdentifier)
		}

	case 2:
		p.SetState(1968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTemplate {
			{
				p.SetState(1967)
				p.Match(CPP14ParserTemplate)
			}

		}
		{
			p.SetState(1970)
			p.SimpleTemplateId()
		}

	}

	return localctx
}

// IExplicitInstantiationContext is an interface to support dynamic dispatch.
type IExplicitInstantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitInstantiationContext differentiates from other interfaces.
	IsExplicitInstantiationContext()
}

type ExplicitInstantiationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitInstantiationContext() *ExplicitInstantiationContext {
	var p = new(ExplicitInstantiationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitInstantiation
	return p
}

func (*ExplicitInstantiationContext) IsExplicitInstantiationContext() {}

func NewExplicitInstantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitInstantiationContext {
	var p = new(ExplicitInstantiationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitInstantiation

	return p
}

func (s *ExplicitInstantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitInstantiationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitInstantiationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitInstantiationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *ExplicitInstantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitInstantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitInstantiationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExplicitInstantiation(s)
	}
}

func (s *ExplicitInstantiationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExplicitInstantiation(s)
	}
}

func (p *CPP14Parser) ExplicitInstantiation() (localctx IExplicitInstantiationContext) {
	localctx = NewExplicitInstantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, CPP14ParserRULE_explicitInstantiation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1974)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserExtern {
		{
			p.SetState(1973)
			p.Match(CPP14ParserExtern)
		}

	}
	{
		p.SetState(1976)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(1977)
		p.Declaration()
	}

	return localctx
}

// IExplicitSpecializationContext is an interface to support dynamic dispatch.
type IExplicitSpecializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitSpecializationContext differentiates from other interfaces.
	IsExplicitSpecializationContext()
}

type ExplicitSpecializationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitSpecializationContext() *ExplicitSpecializationContext {
	var p = new(ExplicitSpecializationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitSpecialization
	return p
}

func (*ExplicitSpecializationContext) IsExplicitSpecializationContext() {}

func NewExplicitSpecializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitSpecializationContext {
	var p = new(ExplicitSpecializationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitSpecialization

	return p
}

func (s *ExplicitSpecializationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitSpecializationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitSpecializationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *ExplicitSpecializationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *ExplicitSpecializationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitSpecializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitSpecializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitSpecializationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExplicitSpecialization(s)
	}
}

func (s *ExplicitSpecializationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExplicitSpecialization(s)
	}
}

func (p *CPP14Parser) ExplicitSpecialization() (localctx IExplicitSpecializationContext) {
	localctx = NewExplicitSpecializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, CPP14ParserRULE_explicitSpecialization)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1979)
		p.Match(CPP14ParserTemplate)
	}
	{
		p.SetState(1980)
		p.Match(CPP14ParserLess)
	}
	{
		p.SetState(1981)
		p.Match(CPP14ParserGreater)
	}
	{
		p.SetState(1982)
		p.Declaration()
	}

	return localctx
}

// ITryBlockContext is an interface to support dynamic dispatch.
type ITryBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryBlockContext differentiates from other interfaces.
	IsTryBlockContext()
}

type TryBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryBlockContext() *TryBlockContext {
	var p = new(TryBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_tryBlock
	return p
}

func (*TryBlockContext) IsTryBlockContext() {}

func NewTryBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryBlockContext {
	var p = new(TryBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_tryBlock

	return p
}

func (s *TryBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *TryBlockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *TryBlockContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *TryBlockContext) HandlerSeq() IHandlerSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerSeqContext)
}

func (s *TryBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTryBlock(s)
	}
}

func (s *TryBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTryBlock(s)
	}
}

func (p *CPP14Parser) TryBlock() (localctx ITryBlockContext) {
	localctx = NewTryBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, CPP14ParserRULE_tryBlock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1984)
		p.Match(CPP14ParserTry)
	}
	{
		p.SetState(1985)
		p.CompoundStatement()
	}
	{
		p.SetState(1986)
		p.HandlerSeq()
	}

	return localctx
}

// IFunctionTryBlockContext is an interface to support dynamic dispatch.
type IFunctionTryBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTryBlockContext differentiates from other interfaces.
	IsFunctionTryBlockContext()
}

type FunctionTryBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTryBlockContext() *FunctionTryBlockContext {
	var p = new(FunctionTryBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionTryBlock
	return p
}

func (*FunctionTryBlockContext) IsFunctionTryBlockContext() {}

func NewFunctionTryBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTryBlockContext {
	var p = new(FunctionTryBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionTryBlock

	return p
}

func (s *FunctionTryBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTryBlockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *FunctionTryBlockContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *FunctionTryBlockContext) HandlerSeq() IHandlerSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandlerSeqContext)
}

func (s *FunctionTryBlockContext) ConstructorInitializer() IConstructorInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorInitializerContext)
}

func (s *FunctionTryBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTryBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTryBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterFunctionTryBlock(s)
	}
}

func (s *FunctionTryBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitFunctionTryBlock(s)
	}
}

func (p *CPP14Parser) FunctionTryBlock() (localctx IFunctionTryBlockContext) {
	localctx = NewFunctionTryBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, CPP14ParserRULE_functionTryBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1988)
		p.Match(CPP14ParserTry)
	}
	p.SetState(1990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1989)
			p.ConstructorInitializer()
		}

	}
	{
		p.SetState(1992)
		p.CompoundStatement()
	}
	{
		p.SetState(1993)
		p.HandlerSeq()
	}

	return localctx
}

// IHandlerSeqContext is an interface to support dynamic dispatch.
type IHandlerSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerSeqContext differentiates from other interfaces.
	IsHandlerSeqContext()
}

type HandlerSeqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerSeqContext() *HandlerSeqContext {
	var p = new(HandlerSeqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_handlerSeq
	return p
}

func (*HandlerSeqContext) IsHandlerSeqContext() {}

func NewHandlerSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerSeqContext {
	var p = new(HandlerSeqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handlerSeq

	return p
}

func (s *HandlerSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerSeqContext) AllHandler() []IHandlerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHandlerContext)(nil)).Elem())
	var tst = make([]IHandlerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHandlerContext)
		}
	}

	return tst
}

func (s *HandlerSeqContext) Handler(i int) IHandlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandlerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHandlerContext)
}

func (s *HandlerSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerSeqContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterHandlerSeq(s)
	}
}

func (s *HandlerSeqContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitHandlerSeq(s)
	}
}

func (p *CPP14Parser) HandlerSeq() (localctx IHandlerSeqContext) {
	localctx = NewHandlerSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, CPP14ParserRULE_handlerSeq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1996)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == CPP14ParserCatch {
		{
			p.SetState(1995)
			p.Handler()
		}

		p.SetState(1998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IHandlerContext is an interface to support dynamic dispatch.
type IHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandlerContext differentiates from other interfaces.
	IsHandlerContext()
}

type HandlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerContext() *HandlerContext {
	var p = new(HandlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_handler
	return p
}

func (*HandlerContext) IsHandlerContext() {}

func NewHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerContext {
	var p = new(HandlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handler

	return p
}

func (s *HandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerContext) Catch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCatch, 0)
}

func (s *HandlerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *HandlerContext) ExceptionDeclaration() IExceptionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExceptionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExceptionDeclarationContext)
}

func (s *HandlerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *HandlerContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *HandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterHandler(s)
	}
}

func (s *HandlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitHandler(s)
	}
}

func (p *CPP14Parser) Handler() (localctx IHandlerContext) {
	localctx = NewHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, CPP14ParserRULE_handler)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2000)
		p.Match(CPP14ParserCatch)
	}
	{
		p.SetState(2001)
		p.Match(CPP14ParserLeftParen)
	}
	{
		p.SetState(2002)
		p.ExceptionDeclaration()
	}
	{
		p.SetState(2003)
		p.Match(CPP14ParserRightParen)
	}
	{
		p.SetState(2004)
		p.CompoundStatement()
	}

	return localctx
}

// IExceptionDeclarationContext is an interface to support dynamic dispatch.
type IExceptionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExceptionDeclarationContext differentiates from other interfaces.
	IsExceptionDeclarationContext()
}

type ExceptionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionDeclarationContext() *ExceptionDeclarationContext {
	var p = new(ExceptionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionDeclaration
	return p
}

func (*ExceptionDeclarationContext) IsExceptionDeclarationContext() {}

func NewExceptionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionDeclarationContext {
	var p = new(ExceptionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptionDeclaration

	return p
}

func (s *ExceptionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionDeclarationContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *ExceptionDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeSpecifierSeqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ExceptionDeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ExceptionDeclarationContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *ExceptionDeclarationContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ExceptionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExceptionDeclaration(s)
	}
}

func (s *ExceptionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExceptionDeclaration(s)
	}
}

func (p *CPP14Parser) ExceptionDeclaration() (localctx IExceptionDeclarationContext) {
	localctx = NewExceptionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, CPP14ParserRULE_exceptionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2015)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAlignas, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftBracket, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(2006)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(2009)
			p.TypeSpecifierSeq()
		}
		p.SetState(2012)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2010)
				p.Declarator()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2011)
				p.AbstractDeclarator()
			}

		}

	case CPP14ParserEllipsis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2014)
			p.Match(CPP14ParserEllipsis)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IThrowExpressionContext is an interface to support dynamic dispatch.
type IThrowExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowExpressionContext differentiates from other interfaces.
	IsThrowExpressionContext()
}

type ThrowExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowExpressionContext() *ThrowExpressionContext {
	var p = new(ThrowExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_throwExpression
	return p
}

func (*ThrowExpressionContext) IsThrowExpressionContext() {}

func NewThrowExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowExpressionContext {
	var p = new(ThrowExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_throwExpression

	return p
}

func (s *ThrowExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowExpressionContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *ThrowExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ThrowExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterThrowExpression(s)
	}
}

func (s *ThrowExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitThrowExpression(s)
	}
}

func (p *CPP14Parser) ThrowExpression() (localctx IThrowExpressionContext) {
	localctx = NewThrowExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, CPP14ParserRULE_throwExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2017)
		p.Match(CPP14ParserThrow)
	}
	p.SetState(2019)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral)|(1<<CPP14ParserAlignof)|(1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserConst_cast)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDelete)|(1<<CPP14ParserDouble)|(1<<CPP14ParserDynamic_cast))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CPP14ParserFloat-39))|(1<<(CPP14ParserInt-39))|(1<<(CPP14ParserLong-39))|(1<<(CPP14ParserNew-39))|(1<<(CPP14ParserNoexcept-39))|(1<<(CPP14ParserOperator-39))|(1<<(CPP14ParserReinterpret_cast-39))|(1<<(CPP14ParserShort-39))|(1<<(CPP14ParserSigned-39))|(1<<(CPP14ParserSizeof-39))|(1<<(CPP14ParserStatic_cast-39))|(1<<(CPP14ParserThis-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CPP14ParserThrow-71))|(1<<(CPP14ParserTypeid_-71))|(1<<(CPP14ParserTypename_-71))|(1<<(CPP14ParserUnsigned-71))|(1<<(CPP14ParserVoid-71))|(1<<(CPP14ParserWchar-71))|(1<<(CPP14ParserLeftParen-71))|(1<<(CPP14ParserLeftBracket-71))|(1<<(CPP14ParserPlus-71))|(1<<(CPP14ParserMinus-71))|(1<<(CPP14ParserStar-71))|(1<<(CPP14ParserAnd-71))|(1<<(CPP14ParserOr-71))|(1<<(CPP14ParserTilde-71))|(1<<(CPP14ParserNot-71)))) != 0) || (((_la-120)&-(0x1f+1)) == 0 && ((1<<uint((_la-120)))&((1<<(CPP14ParserPlusPlus-120))|(1<<(CPP14ParserMinusMinus-120))|(1<<(CPP14ParserDoublecolon-120))|(1<<(CPP14ParserIdentifier-120)))) != 0) {
		{
			p.SetState(2018)
			p.AssignmentExpression()
		}

	}

	return localctx
}

// IExceptionSpecificationContext is an interface to support dynamic dispatch.
type IExceptionSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExceptionSpecificationContext differentiates from other interfaces.
	IsExceptionSpecificationContext()
}

type ExceptionSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionSpecificationContext() *ExceptionSpecificationContext {
	var p = new(ExceptionSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionSpecification
	return p
}

func (*ExceptionSpecificationContext) IsExceptionSpecificationContext() {}

func NewExceptionSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionSpecificationContext {
	var p = new(ExceptionSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptionSpecification

	return p
}

func (s *ExceptionSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionSpecificationContext) DynamicExceptionSpecification() IDynamicExceptionSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDynamicExceptionSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDynamicExceptionSpecificationContext)
}

func (s *ExceptionSpecificationContext) NoeExceptSpecification() INoeExceptSpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INoeExceptSpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INoeExceptSpecificationContext)
}

func (s *ExceptionSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterExceptionSpecification(s)
	}
}

func (s *ExceptionSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitExceptionSpecification(s)
	}
}

func (p *CPP14Parser) ExceptionSpecification() (localctx IExceptionSpecificationContext) {
	localctx = NewExceptionSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, CPP14ParserRULE_exceptionSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2023)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserThrow:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2021)
			p.DynamicExceptionSpecification()
		}

	case CPP14ParserNoexcept:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2022)
			p.NoeExceptSpecification()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDynamicExceptionSpecificationContext is an interface to support dynamic dispatch.
type IDynamicExceptionSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDynamicExceptionSpecificationContext differentiates from other interfaces.
	IsDynamicExceptionSpecificationContext()
}

type DynamicExceptionSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamicExceptionSpecificationContext() *DynamicExceptionSpecificationContext {
	var p = new(DynamicExceptionSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_dynamicExceptionSpecification
	return p
}

func (*DynamicExceptionSpecificationContext) IsDynamicExceptionSpecificationContext() {}

func NewDynamicExceptionSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DynamicExceptionSpecificationContext {
	var p = new(DynamicExceptionSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_dynamicExceptionSpecification

	return p
}

func (s *DynamicExceptionSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *DynamicExceptionSpecificationContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *DynamicExceptionSpecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DynamicExceptionSpecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DynamicExceptionSpecificationContext) TypeIdList() ITypeIdListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdListContext)
}

func (s *DynamicExceptionSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicExceptionSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DynamicExceptionSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterDynamicExceptionSpecification(s)
	}
}

func (s *DynamicExceptionSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitDynamicExceptionSpecification(s)
	}
}

func (p *CPP14Parser) DynamicExceptionSpecification() (localctx IDynamicExceptionSpecificationContext) {
	localctx = NewDynamicExceptionSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, CPP14ParserRULE_dynamicExceptionSpecification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2025)
		p.Match(CPP14ParserThrow)
	}
	{
		p.SetState(2026)
		p.Match(CPP14ParserLeftParen)
	}
	p.SetState(2028)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserAuto)|(1<<CPP14ParserBool)|(1<<CPP14ParserChar)|(1<<CPP14ParserChar16)|(1<<CPP14ParserChar32)|(1<<CPP14ParserClass)|(1<<CPP14ParserConst)|(1<<CPP14ParserDecltype)|(1<<CPP14ParserDouble))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(CPP14ParserEnum-33))|(1<<(CPP14ParserFloat-33))|(1<<(CPP14ParserInt-33))|(1<<(CPP14ParserLong-33))|(1<<(CPP14ParserShort-33))|(1<<(CPP14ParserSigned-33)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(CPP14ParserStruct-66))|(1<<(CPP14ParserTypename_-66))|(1<<(CPP14ParserUnion-66))|(1<<(CPP14ParserUnsigned-66))|(1<<(CPP14ParserVoid-66))|(1<<(CPP14ParserVolatile-66))|(1<<(CPP14ParserWchar-66)))) != 0) || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		{
			p.SetState(2027)
			p.TypeIdList()
		}

	}
	{
		p.SetState(2030)
		p.Match(CPP14ParserRightParen)
	}

	return localctx
}

// ITypeIdListContext is an interface to support dynamic dispatch.
type ITypeIdListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdListContext differentiates from other interfaces.
	IsTypeIdListContext()
}

type TypeIdListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdListContext() *TypeIdListContext {
	var p = new(TypeIdListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdList
	return p
}

func (*TypeIdListContext) IsTypeIdListContext() {}

func NewTypeIdListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdListContext {
	var p = new(TypeIdListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeIdList

	return p
}

func (s *TypeIdListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdListContext) AllTheTypeId() []ITheTypeIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem())
	var tst = make([]ITheTypeIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITheTypeIdContext)
		}
	}

	return tst
}

func (s *TypeIdListContext) TheTypeId(i int) ITheTypeIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITheTypeIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TypeIdListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *TypeIdListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *TypeIdListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TypeIdListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TypeIdListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTypeIdList(s)
	}
}

func (s *TypeIdListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTypeIdList(s)
	}
}

func (p *CPP14Parser) TypeIdList() (localctx ITypeIdListContext) {
	localctx = NewTypeIdListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, CPP14ParserRULE_typeIdList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2032)
		p.TheTypeId()
	}
	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(2033)
			p.Match(CPP14ParserEllipsis)
		}

	}
	p.SetState(2043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(2036)
			p.Match(CPP14ParserComma)
		}
		{
			p.SetState(2037)
			p.TheTypeId()
		}
		p.SetState(2039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(2038)
				p.Match(CPP14ParserEllipsis)
			}

		}

		p.SetState(2045)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INoeExceptSpecificationContext is an interface to support dynamic dispatch.
type INoeExceptSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNoeExceptSpecificationContext differentiates from other interfaces.
	IsNoeExceptSpecificationContext()
}

type NoeExceptSpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoeExceptSpecificationContext() *NoeExceptSpecificationContext {
	var p = new(NoeExceptSpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_noeExceptSpecification
	return p
}

func (*NoeExceptSpecificationContext) IsNoeExceptSpecificationContext() {}

func NewNoeExceptSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoeExceptSpecificationContext {
	var p = new(NoeExceptSpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noeExceptSpecification

	return p
}

func (s *NoeExceptSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoeExceptSpecificationContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoeExceptSpecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoeExceptSpecificationContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoeExceptSpecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoeExceptSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoeExceptSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoeExceptSpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterNoeExceptSpecification(s)
	}
}

func (s *NoeExceptSpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitNoeExceptSpecification(s)
	}
}

func (p *CPP14Parser) NoeExceptSpecification() (localctx INoeExceptSpecificationContext) {
	localctx = NewNoeExceptSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, CPP14ParserRULE_noeExceptSpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2052)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2046)
			p.Match(CPP14ParserNoexcept)
		}
		{
			p.SetState(2047)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(2048)
			p.ConstantExpression()
		}
		{
			p.SetState(2049)
			p.Match(CPP14ParserRightParen)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2051)
			p.Match(CPP14ParserNoexcept)
		}

	}

	return localctx
}

// ITheOperatorContext is an interface to support dynamic dispatch.
type ITheOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTheOperatorContext differentiates from other interfaces.
	IsTheOperatorContext()
}

type TheOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheOperatorContext() *TheOperatorContext {
	var p = new(TheOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_theOperator
	return p
}

func (*TheOperatorContext) IsTheOperatorContext() {}

func NewTheOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheOperatorContext {
	var p = new(TheOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theOperator

	return p
}

func (s *TheOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *TheOperatorContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *TheOperatorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *TheOperatorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *TheOperatorContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *TheOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *TheOperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *TheOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *TheOperatorContext) Div() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, 0)
}

func (s *TheOperatorContext) Mod() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, 0)
}

func (s *TheOperatorContext) Caret() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, 0)
}

func (s *TheOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *TheOperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *TheOperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *TheOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNot, 0)
}

func (s *TheOperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TheOperatorContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *TheOperatorContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *TheOperatorContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *TheOperatorContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *TheOperatorContext) GreaterEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, 0)
}

func (s *TheOperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *TheOperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *TheOperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *TheOperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *TheOperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *TheOperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *TheOperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *TheOperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *TheOperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *TheOperatorContext) Equal() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, 0)
}

func (s *TheOperatorContext) NotEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, 0)
}

func (s *TheOperatorContext) LessEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, 0)
}

func (s *TheOperatorContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *TheOperatorContext) OrOr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrOr, 0)
}

func (s *TheOperatorContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *TheOperatorContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *TheOperatorContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TheOperatorContext) ArrowStar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, 0)
}

func (s *TheOperatorContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TheOperatorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *TheOperatorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *TheOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterTheOperator(s)
	}
}

func (s *TheOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitTheOperator(s)
	}
}

func (p *CPP14Parser) TheOperator() (localctx ITheOperatorContext) {
	localctx = NewTheOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, CPP14ParserRULE_theOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2105)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2054)
			p.Match(CPP14ParserNew)
		}
		p.SetState(2057)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 303, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2055)
				p.Match(CPP14ParserLeftBracket)
			}
			{
				p.SetState(2056)
				p.Match(CPP14ParserRightBracket)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2059)
			p.Match(CPP14ParserDelete)
		}
		p.SetState(2062)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2060)
				p.Match(CPP14ParserLeftBracket)
			}
			{
				p.SetState(2061)
				p.Match(CPP14ParserRightBracket)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2064)
			p.Match(CPP14ParserPlus)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2065)
			p.Match(CPP14ParserMinus)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2066)
			p.Match(CPP14ParserStar)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2067)
			p.Match(CPP14ParserDiv)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2068)
			p.Match(CPP14ParserMod)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2069)
			p.Match(CPP14ParserCaret)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2070)
			p.Match(CPP14ParserAnd)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2071)
			p.Match(CPP14ParserOr)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2072)
			p.Match(CPP14ParserTilde)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2073)
			p.Match(CPP14ParserNot)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2074)
			p.Match(CPP14ParserAssign)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2075)
			p.Match(CPP14ParserGreater)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2076)
			p.Match(CPP14ParserLess)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2077)
			p.Match(CPP14ParserGreaterEqual)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2078)
			p.Match(CPP14ParserPlusAssign)
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2079)
			p.Match(CPP14ParserMinusAssign)
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2080)
			p.Match(CPP14ParserStarAssign)
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2081)
			p.Match(CPP14ParserModAssign)
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2082)
			p.Match(CPP14ParserXorAssign)
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2083)
			p.Match(CPP14ParserAndAssign)
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2084)
			p.Match(CPP14ParserOrAssign)
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2085)
			p.Match(CPP14ParserLess)
		}
		{
			p.SetState(2086)
			p.Match(CPP14ParserLess)
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2087)
			p.Match(CPP14ParserGreater)
		}
		{
			p.SetState(2088)
			p.Match(CPP14ParserGreater)
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2089)
			p.Match(CPP14ParserRightShiftAssign)
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2090)
			p.Match(CPP14ParserLeftShiftAssign)
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2091)
			p.Match(CPP14ParserEqual)
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2092)
			p.Match(CPP14ParserNotEqual)
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2093)
			p.Match(CPP14ParserLessEqual)
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2094)
			p.Match(CPP14ParserAndAnd)
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2095)
			p.Match(CPP14ParserOrOr)
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2096)
			p.Match(CPP14ParserPlusPlus)
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2097)
			p.Match(CPP14ParserMinusMinus)
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2098)
			p.Match(CPP14ParserComma)
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2099)
			p.Match(CPP14ParserArrowStar)
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2100)
			p.Match(CPP14ParserArrow)
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2101)
			p.Match(CPP14ParserLeftParen)
		}
		{
			p.SetState(2102)
			p.Match(CPP14ParserRightParen)
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2103)
			p.Match(CPP14ParserLeftBracket)
		}
		{
			p.SetState(2104)
			p.Match(CPP14ParserRightBracket)
		}

	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CPP14ParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIntegerLiteral, 0)
}

func (s *LiteralContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCharacterLiteral, 0)
}

func (s *LiteralContext) FloatingLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloatingLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LiteralContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBooleanLiteral, 0)
}

func (s *LiteralContext) PointerLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPointerLiteral, 0)
}

func (s *LiteralContext) UserDefinedLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserDefinedLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CPP14ParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *CPP14Parser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, CPP14ParserRULE_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2107)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CPP14ParserIntegerLiteral)|(1<<CPP14ParserCharacterLiteral)|(1<<CPP14ParserFloatingLiteral)|(1<<CPP14ParserStringLiteral)|(1<<CPP14ParserBooleanLiteral)|(1<<CPP14ParserPointerLiteral)|(1<<CPP14ParserUserDefinedLiteral))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *CPP14Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 5:
		var t *NestedNameSpecifierContext = nil
		if localctx != nil {
			t = localctx.(*NestedNameSpecifierContext)
		}
		return p.NestedNameSpecifier_Sempred(t, predIndex)

	case 15:
		var t *PostfixExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PostfixExpressionContext)
		}
		return p.PostfixExpression_Sempred(t, predIndex)

	case 25:
		var t *NoPointerNewDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerNewDeclaratorContext)
		}
		return p.NoPointerNewDeclarator_Sempred(t, predIndex)

	case 115:
		var t *NoPointerDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerDeclaratorContext)
		}
		return p.NoPointerDeclarator_Sempred(t, predIndex)

	case 126:
		var t *NoPointerAbstractDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerAbstractDeclaratorContext)
		}
		return p.NoPointerAbstractDeclarator_Sempred(t, predIndex)

	case 128:
		var t *NoPointerAbstractPackDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerAbstractPackDeclaratorContext)
		}
		return p.NoPointerAbstractPackDeclarator_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *CPP14Parser) NestedNameSpecifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) PostfixExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerNewDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerAbstractDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerAbstractPackDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
