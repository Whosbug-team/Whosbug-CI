// Generated from KotlinParser.g4 by ANTLR 4.7.

package KotlinParser // KotlinParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 171, 3302,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 3, 2, 5, 2, 336, 10, 2, 3, 2, 7,
	2, 339, 10, 2, 12, 2, 14, 2, 342, 11, 2, 3, 2, 7, 2, 345, 10, 2, 12, 2,
	14, 2, 348, 11, 2, 3, 2, 3, 2, 3, 2, 7, 2, 353, 10, 2, 12, 2, 14, 2, 356,
	11, 2, 3, 2, 3, 2, 3, 3, 5, 3, 361, 10, 3, 3, 3, 7, 3, 364, 10, 3, 12,
	3, 14, 3, 367, 11, 3, 3, 3, 7, 3, 370, 10, 3, 12, 3, 14, 3, 373, 11, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 380, 10, 3, 12, 3, 14, 3, 383, 11,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 7, 4, 389, 10, 4, 12, 4, 14, 4, 392, 11, 4,
	3, 4, 3, 4, 7, 4, 396, 10, 4, 12, 4, 14, 4, 399, 11, 4, 3, 4, 3, 4, 6,
	4, 403, 10, 4, 13, 4, 14, 4, 404, 3, 4, 3, 4, 3, 4, 5, 4, 410, 10, 4, 3,
	4, 7, 4, 413, 10, 4, 12, 4, 14, 4, 416, 11, 4, 3, 5, 3, 5, 3, 5, 5, 5,
	421, 10, 5, 5, 5, 423, 10, 5, 3, 6, 7, 6, 426, 10, 6, 12, 6, 14, 6, 429,
	11, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 436, 10, 7, 3, 7, 5, 7, 439,
	10, 7, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 5, 9, 446, 10, 9, 3, 10, 5, 10, 449,
	10, 10, 3, 10, 3, 10, 7, 10, 453, 10, 10, 12, 10, 14, 10, 456, 11, 10,
	3, 10, 3, 10, 7, 10, 460, 10, 10, 12, 10, 14, 10, 463, 11, 10, 3, 10, 5,
	10, 466, 10, 10, 3, 10, 7, 10, 469, 10, 10, 12, 10, 14, 10, 472, 11, 10,
	3, 10, 5, 10, 475, 10, 10, 3, 10, 7, 10, 478, 10, 10, 12, 10, 14, 10, 481,
	11, 10, 3, 10, 3, 10, 7, 10, 485, 10, 10, 12, 10, 14, 10, 488, 11, 10,
	3, 10, 5, 10, 491, 10, 10, 3, 10, 7, 10, 494, 10, 10, 12, 10, 14, 10, 497,
	11, 10, 3, 10, 5, 10, 500, 10, 10, 3, 10, 7, 10, 503, 10, 10, 12, 10, 14,
	10, 506, 11, 10, 3, 10, 3, 10, 7, 10, 510, 10, 10, 12, 10, 14, 10, 513,
	11, 10, 3, 10, 5, 10, 516, 10, 10, 3, 11, 5, 11, 519, 10, 11, 3, 11, 3,
	11, 7, 11, 523, 10, 11, 12, 11, 14, 11, 526, 11, 11, 5, 11, 528, 10, 11,
	3, 11, 3, 11, 3, 12, 3, 12, 7, 12, 534, 10, 12, 12, 12, 14, 12, 537, 11,
	12, 3, 12, 3, 12, 7, 12, 541, 10, 12, 12, 12, 14, 12, 544, 11, 12, 3, 12,
	3, 12, 7, 12, 548, 10, 12, 12, 12, 14, 12, 551, 11, 12, 3, 12, 7, 12, 554,
	10, 12, 12, 12, 14, 12, 557, 11, 12, 5, 12, 559, 10, 12, 3, 12, 7, 12,
	562, 10, 12, 12, 12, 14, 12, 565, 11, 12, 3, 12, 5, 12, 568, 10, 12, 3,
	12, 3, 12, 3, 13, 5, 13, 573, 10, 13, 3, 13, 5, 13, 576, 10, 13, 3, 13,
	7, 13, 579, 10, 13, 12, 13, 14, 13, 582, 11, 13, 3, 13, 3, 13, 3, 13, 7,
	13, 587, 10, 13, 12, 13, 14, 13, 590, 11, 13, 3, 13, 3, 13, 7, 13, 594,
	10, 13, 12, 13, 14, 13, 597, 11, 13, 3, 13, 3, 13, 7, 13, 601, 10, 13,
	12, 13, 14, 13, 604, 11, 13, 3, 13, 5, 13, 607, 10, 13, 3, 14, 3, 14, 7,
	14, 611, 10, 14, 12, 14, 14, 14, 614, 11, 14, 3, 14, 3, 14, 7, 14, 618,
	10, 14, 12, 14, 14, 14, 621, 11, 14, 3, 14, 7, 14, 624, 10, 14, 12, 14,
	14, 14, 627, 11, 14, 3, 15, 7, 15, 630, 10, 15, 12, 15, 14, 15, 633, 11,
	15, 3, 15, 7, 15, 636, 10, 15, 12, 15, 14, 15, 639, 11, 15, 3, 15, 3, 15,
	3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 647, 10, 16, 3, 17, 3, 17, 3, 17, 3,
	18, 3, 18, 5, 18, 654, 10, 18, 3, 18, 7, 18, 657, 10, 18, 12, 18, 14, 18,
	660, 11, 18, 3, 18, 3, 18, 7, 18, 664, 10, 18, 12, 18, 14, 18, 667, 11,
	18, 3, 18, 3, 18, 3, 19, 3, 19, 7, 19, 673, 10, 19, 12, 19, 14, 19, 676,
	11, 19, 3, 19, 3, 19, 7, 19, 680, 10, 19, 12, 19, 14, 19, 683, 11, 19,
	3, 19, 3, 19, 3, 20, 3, 20, 5, 20, 689, 10, 20, 7, 20, 691, 10, 20, 12,
	20, 14, 20, 694, 11, 20, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 700, 10, 21,
	3, 22, 3, 22, 7, 22, 704, 10, 22, 12, 22, 14, 22, 707, 11, 22, 3, 22, 3,
	22, 3, 23, 5, 23, 712, 10, 23, 3, 23, 3, 23, 7, 23, 716, 10, 23, 12, 23,
	14, 23, 719, 11, 23, 3, 23, 3, 23, 7, 23, 723, 10, 23, 12, 23, 14, 23,
	726, 11, 23, 3, 23, 3, 23, 7, 23, 730, 10, 23, 12, 23, 14, 23, 733, 11,
	23, 3, 23, 5, 23, 736, 10, 23, 3, 23, 7, 23, 739, 10, 23, 12, 23, 14, 23,
	742, 11, 23, 3, 23, 5, 23, 745, 10, 23, 3, 24, 3, 24, 7, 24, 749, 10, 24,
	12, 24, 14, 24, 752, 11, 24, 3, 24, 3, 24, 3, 24, 7, 24, 757, 10, 24, 12,
	24, 14, 24, 760, 11, 24, 3, 24, 5, 24, 763, 10, 24, 3, 25, 3, 25, 7, 25,
	767, 10, 25, 12, 25, 14, 25, 770, 11, 25, 3, 25, 5, 25, 773, 10, 25, 3,
	25, 7, 25, 776, 10, 25, 12, 25, 14, 25, 779, 11, 25, 3, 25, 3, 25, 7, 25,
	783, 10, 25, 12, 25, 14, 25, 786, 11, 25, 3, 25, 5, 25, 789, 10, 25, 3,
	25, 7, 25, 792, 10, 25, 12, 25, 14, 25, 795, 11, 25, 3, 25, 3, 25, 3, 26,
	3, 26, 7, 26, 801, 10, 26, 12, 26, 14, 26, 804, 11, 26, 3, 26, 3, 26, 7,
	26, 808, 10, 26, 12, 26, 14, 26, 811, 11, 26, 3, 26, 7, 26, 814, 10, 26,
	12, 26, 14, 26, 817, 11, 26, 3, 26, 7, 26, 820, 10, 26, 12, 26, 14, 26,
	823, 11, 26, 3, 26, 5, 26, 826, 10, 26, 3, 27, 3, 27, 7, 27, 830, 10, 27,
	12, 27, 14, 27, 833, 11, 27, 5, 27, 835, 10, 27, 3, 27, 3, 27, 7, 27, 839,
	10, 27, 12, 27, 14, 27, 842, 11, 27, 3, 27, 5, 27, 845, 10, 27, 3, 27,
	7, 27, 848, 10, 27, 12, 27, 14, 27, 851, 11, 27, 3, 27, 5, 27, 854, 10,
	27, 3, 28, 5, 28, 857, 10, 28, 3, 28, 3, 28, 7, 28, 861, 10, 28, 12, 28,
	14, 28, 864, 11, 28, 3, 28, 5, 28, 867, 10, 28, 3, 28, 7, 28, 870, 10,
	28, 12, 28, 14, 28, 873, 11, 28, 3, 28, 3, 28, 7, 28, 877, 10, 28, 12,
	28, 14, 28, 880, 11, 28, 3, 28, 3, 28, 5, 28, 884, 10, 28, 3, 28, 7, 28,
	887, 10, 28, 12, 28, 14, 28, 890, 11, 28, 3, 28, 3, 28, 7, 28, 894, 10,
	28, 12, 28, 14, 28, 897, 11, 28, 3, 28, 3, 28, 7, 28, 901, 10, 28, 12,
	28, 14, 28, 904, 11, 28, 3, 28, 3, 28, 7, 28, 908, 10, 28, 12, 28, 14,
	28, 911, 11, 28, 3, 28, 5, 28, 914, 10, 28, 3, 28, 7, 28, 917, 10, 28,
	12, 28, 14, 28, 920, 11, 28, 3, 28, 5, 28, 923, 10, 28, 3, 28, 7, 28, 926,
	10, 28, 12, 28, 14, 28, 929, 11, 28, 3, 28, 5, 28, 932, 10, 28, 3, 29,
	3, 29, 7, 29, 936, 10, 29, 12, 29, 14, 29, 939, 11, 29, 3, 29, 3, 29, 7,
	29, 943, 10, 29, 12, 29, 14, 29, 946, 11, 29, 3, 29, 3, 29, 7, 29, 950,
	10, 29, 12, 29, 14, 29, 953, 11, 29, 3, 29, 7, 29, 956, 10, 29, 12, 29,
	14, 29, 959, 11, 29, 5, 29, 961, 10, 29, 3, 29, 7, 29, 964, 10, 29, 12,
	29, 14, 29, 967, 11, 29, 3, 29, 5, 29, 970, 10, 29, 3, 29, 3, 29, 3, 30,
	5, 30, 975, 10, 30, 3, 30, 3, 30, 7, 30, 979, 10, 30, 12, 30, 14, 30, 982,
	11, 30, 3, 30, 3, 30, 7, 30, 986, 10, 30, 12, 30, 14, 30, 989, 11, 30,
	3, 30, 5, 30, 992, 10, 30, 3, 31, 3, 31, 7, 31, 996, 10, 31, 12, 31, 14,
	31, 999, 11, 31, 3, 31, 3, 31, 7, 31, 1003, 10, 31, 12, 31, 14, 31, 1006,
	11, 31, 3, 31, 3, 31, 3, 32, 3, 32, 7, 32, 1012, 10, 32, 12, 32, 14, 32,
	1015, 11, 32, 3, 32, 3, 32, 7, 32, 1019, 10, 32, 12, 32, 14, 32, 1022,
	11, 32, 3, 32, 5, 32, 1025, 10, 32, 3, 33, 3, 33, 3, 33, 7, 33, 1030, 10,
	33, 12, 33, 14, 33, 1033, 11, 33, 3, 33, 5, 33, 1036, 10, 33, 3, 34, 5,
	34, 1039, 10, 34, 3, 34, 3, 34, 7, 34, 1043, 10, 34, 12, 34, 14, 34, 1046,
	11, 34, 3, 34, 3, 34, 7, 34, 1050, 10, 34, 12, 34, 14, 34, 1053, 11, 34,
	3, 34, 3, 34, 7, 34, 1057, 10, 34, 12, 34, 14, 34, 1060, 11, 34, 3, 34,
	5, 34, 1063, 10, 34, 3, 34, 7, 34, 1066, 10, 34, 12, 34, 14, 34, 1069,
	11, 34, 3, 34, 5, 34, 1072, 10, 34, 3, 35, 5, 35, 1075, 10, 35, 3, 35,
	3, 35, 7, 35, 1079, 10, 35, 12, 35, 14, 35, 1082, 11, 35, 3, 35, 3, 35,
	7, 35, 1086, 10, 35, 12, 35, 14, 35, 1089, 11, 35, 3, 35, 5, 35, 1092,
	10, 35, 3, 35, 7, 35, 1095, 10, 35, 12, 35, 14, 35, 1098, 11, 35, 3, 35,
	3, 35, 7, 35, 1102, 10, 35, 12, 35, 14, 35, 1105, 11, 35, 3, 35, 5, 35,
	1108, 10, 35, 3, 35, 7, 35, 1111, 10, 35, 12, 35, 14, 35, 1114, 11, 35,
	3, 35, 5, 35, 1117, 10, 35, 3, 36, 5, 36, 1120, 10, 36, 3, 36, 3, 36, 7,
	36, 1124, 10, 36, 12, 36, 14, 36, 1127, 11, 36, 3, 36, 5, 36, 1130, 10,
	36, 3, 36, 7, 36, 1133, 10, 36, 12, 36, 14, 36, 1136, 11, 36, 3, 36, 3,
	36, 7, 36, 1140, 10, 36, 12, 36, 14, 36, 1143, 11, 36, 3, 36, 3, 36, 5,
	36, 1147, 10, 36, 3, 36, 7, 36, 1150, 10, 36, 12, 36, 14, 36, 1153, 11,
	36, 3, 36, 3, 36, 5, 36, 1157, 10, 36, 3, 36, 7, 36, 1160, 10, 36, 12,
	36, 14, 36, 1163, 11, 36, 3, 36, 5, 36, 1166, 10, 36, 3, 36, 7, 36, 1169,
	10, 36, 12, 36, 14, 36, 1172, 11, 36, 3, 36, 3, 36, 7, 36, 1176, 10, 36,
	12, 36, 14, 36, 1179, 11, 36, 3, 36, 3, 36, 5, 36, 1183, 10, 36, 5, 36,
	1185, 10, 36, 3, 36, 6, 36, 1188, 10, 36, 13, 36, 14, 36, 1189, 3, 36,
	5, 36, 1193, 10, 36, 3, 36, 7, 36, 1196, 10, 36, 12, 36, 14, 36, 1199,
	11, 36, 3, 36, 5, 36, 1202, 10, 36, 3, 36, 7, 36, 1205, 10, 36, 12, 36,
	14, 36, 1208, 11, 36, 3, 36, 5, 36, 1211, 10, 36, 3, 36, 5, 36, 1214, 10,
	36, 3, 36, 5, 36, 1217, 10, 36, 3, 36, 7, 36, 1220, 10, 36, 12, 36, 14,
	36, 1223, 11, 36, 3, 36, 5, 36, 1226, 10, 36, 3, 36, 5, 36, 1229, 10, 36,
	5, 36, 1231, 10, 36, 3, 37, 3, 37, 7, 37, 1235, 10, 37, 12, 37, 14, 37,
	1238, 11, 37, 3, 37, 3, 37, 7, 37, 1242, 10, 37, 12, 37, 14, 37, 1245,
	11, 37, 3, 37, 3, 37, 7, 37, 1249, 10, 37, 12, 37, 14, 37, 1252, 11, 37,
	3, 37, 7, 37, 1255, 10, 37, 12, 37, 14, 37, 1258, 11, 37, 3, 37, 7, 37,
	1261, 10, 37, 12, 37, 14, 37, 1264, 11, 37, 3, 37, 3, 37, 3, 38, 7, 38,
	1269, 10, 38, 12, 38, 14, 38, 1272, 11, 38, 3, 38, 7, 38, 1275, 10, 38,
	12, 38, 14, 38, 1278, 11, 38, 3, 38, 3, 38, 7, 38, 1282, 10, 38, 12, 38,
	14, 38, 1285, 11, 38, 3, 38, 3, 38, 7, 38, 1289, 10, 38, 12, 38, 14, 38,
	1292, 11, 38, 3, 38, 5, 38, 1295, 10, 38, 3, 39, 3, 39, 7, 39, 1299, 10,
	39, 12, 39, 14, 39, 1302, 11, 39, 3, 39, 3, 39, 3, 40, 5, 40, 1307, 10,
	40, 3, 40, 3, 40, 5, 40, 1311, 10, 40, 3, 40, 3, 40, 7, 40, 1315, 10, 40,
	12, 40, 14, 40, 1318, 11, 40, 3, 40, 3, 40, 7, 40, 1322, 10, 40, 12, 40,
	14, 40, 1325, 11, 40, 3, 40, 3, 40, 7, 40, 1329, 10, 40, 12, 40, 14, 40,
	1332, 11, 40, 3, 40, 3, 40, 7, 40, 1336, 10, 40, 12, 40, 14, 40, 1339,
	11, 40, 3, 40, 5, 40, 1342, 10, 40, 3, 40, 7, 40, 1345, 10, 40, 12, 40,
	14, 40, 1348, 11, 40, 3, 40, 5, 40, 1351, 10, 40, 3, 41, 5, 41, 1354, 10,
	41, 3, 41, 3, 41, 5, 41, 1358, 10, 41, 3, 41, 3, 41, 7, 41, 1362, 10, 41,
	12, 41, 14, 41, 1365, 11, 41, 3, 41, 3, 41, 3, 41, 7, 41, 1370, 10, 41,
	12, 41, 14, 41, 1373, 11, 41, 3, 41, 3, 41, 3, 41, 7, 41, 1378, 10, 41,
	12, 41, 14, 41, 1381, 11, 41, 3, 41, 3, 41, 7, 41, 1385, 10, 41, 12, 41,
	14, 41, 1388, 11, 41, 3, 41, 5, 41, 1391, 10, 41, 3, 41, 7, 41, 1394, 10,
	41, 12, 41, 14, 41, 1397, 11, 41, 3, 41, 3, 41, 5, 41, 1401, 10, 41, 3,
	42, 5, 42, 1404, 10, 42, 3, 42, 3, 42, 7, 42, 1408, 10, 42, 12, 42, 14,
	42, 1411, 11, 42, 3, 42, 3, 42, 7, 42, 1415, 10, 42, 12, 42, 14, 42, 1418,
	11, 42, 3, 42, 5, 42, 1421, 10, 42, 3, 42, 7, 42, 1424, 10, 42, 12, 42,
	14, 42, 1427, 11, 42, 3, 42, 3, 42, 7, 42, 1431, 10, 42, 12, 42, 14, 42,
	1434, 11, 42, 3, 42, 3, 42, 3, 43, 3, 43, 7, 43, 1440, 10, 43, 12, 43,
	14, 43, 1443, 11, 43, 3, 43, 3, 43, 7, 43, 1447, 10, 43, 12, 43, 14, 43,
	1450, 11, 43, 3, 43, 3, 43, 7, 43, 1454, 10, 43, 12, 43, 14, 43, 1457,
	11, 43, 3, 43, 7, 43, 1460, 10, 43, 12, 43, 14, 43, 1463, 11, 43, 3, 43,
	7, 43, 1466, 10, 43, 12, 43, 14, 43, 1469, 11, 43, 3, 43, 5, 43, 1472,
	10, 43, 3, 43, 3, 43, 3, 44, 5, 44, 1477, 10, 44, 3, 44, 7, 44, 1480, 10,
	44, 12, 44, 14, 44, 1483, 11, 44, 3, 44, 3, 44, 7, 44, 1487, 10, 44, 12,
	44, 14, 44, 1490, 11, 44, 3, 44, 3, 44, 7, 44, 1494, 10, 44, 12, 44, 14,
	44, 1497, 11, 44, 3, 44, 5, 44, 1500, 10, 44, 3, 45, 6, 45, 1503, 10, 45,
	13, 45, 14, 45, 1504, 3, 46, 3, 46, 7, 46, 1509, 10, 46, 12, 46, 14, 46,
	1512, 11, 46, 3, 46, 3, 46, 7, 46, 1516, 10, 46, 12, 46, 14, 46, 1519,
	11, 46, 3, 46, 5, 46, 1522, 10, 46, 3, 47, 5, 47, 1525, 10, 47, 3, 47,
	3, 47, 3, 47, 3, 47, 5, 47, 1531, 10, 47, 3, 48, 6, 48, 1534, 10, 48, 13,
	48, 14, 48, 1535, 3, 49, 3, 49, 3, 49, 7, 49, 1541, 10, 49, 12, 49, 14,
	49, 1544, 11, 49, 5, 49, 1546, 10, 49, 3, 50, 3, 50, 7, 50, 1550, 10, 50,
	12, 50, 14, 50, 1553, 11, 50, 3, 50, 3, 50, 7, 50, 1557, 10, 50, 12, 50,
	14, 50, 1560, 11, 50, 3, 50, 3, 50, 3, 51, 3, 51, 5, 51, 1566, 10, 51,
	3, 51, 7, 51, 1569, 10, 51, 12, 51, 14, 51, 1572, 11, 51, 3, 51, 6, 51,
	1575, 10, 51, 13, 51, 14, 51, 1576, 3, 52, 3, 52, 5, 52, 1581, 10, 52,
	3, 53, 3, 53, 7, 53, 1585, 10, 53, 12, 53, 14, 53, 1588, 11, 53, 3, 53,
	3, 53, 7, 53, 1592, 10, 53, 12, 53, 14, 53, 1595, 11, 53, 5, 53, 1597,
	10, 53, 3, 53, 3, 53, 7, 53, 1601, 10, 53, 12, 53, 14, 53, 1604, 11, 53,
	3, 53, 3, 53, 7, 53, 1608, 10, 53, 12, 53, 14, 53, 1611, 11, 53, 3, 53,
	3, 53, 3, 54, 5, 54, 1616, 10, 54, 3, 54, 3, 54, 3, 54, 5, 54, 1621, 10,
	54, 3, 55, 3, 55, 7, 55, 1625, 10, 55, 12, 55, 14, 55, 1628, 11, 55, 3,
	55, 3, 55, 7, 55, 1632, 10, 55, 12, 55, 14, 55, 1635, 11, 55, 3, 55, 7,
	55, 1638, 10, 55, 12, 55, 14, 55, 1641, 11, 55, 3, 56, 3, 56, 7, 56, 1645,
	10, 56, 12, 56, 14, 56, 1648, 11, 56, 3, 56, 3, 56, 7, 56, 1652, 10, 56,
	12, 56, 14, 56, 1655, 11, 56, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1661,
	10, 56, 12, 56, 14, 56, 1664, 11, 56, 3, 56, 3, 56, 7, 56, 1668, 10, 56,
	12, 56, 14, 56, 1671, 11, 56, 3, 56, 3, 56, 5, 56, 1675, 10, 56, 3, 57,
	3, 57, 7, 57, 1679, 10, 57, 12, 57, 14, 57, 1682, 11, 57, 3, 57, 5, 57,
	1685, 10, 57, 3, 58, 3, 58, 7, 58, 1689, 10, 58, 12, 58, 14, 58, 1692,
	11, 58, 3, 58, 3, 58, 5, 58, 1696, 10, 58, 3, 58, 7, 58, 1699, 10, 58,
	12, 58, 14, 58, 1702, 11, 58, 3, 58, 3, 58, 7, 58, 1706, 10, 58, 12, 58,
	14, 58, 1709, 11, 58, 3, 58, 3, 58, 5, 58, 1713, 10, 58, 7, 58, 1715, 10,
	58, 12, 58, 14, 58, 1718, 11, 58, 3, 58, 7, 58, 1721, 10, 58, 12, 58, 14,
	58, 1724, 11, 58, 3, 58, 3, 58, 3, 59, 3, 59, 7, 59, 1730, 10, 59, 12,
	59, 14, 59, 1733, 11, 59, 3, 59, 3, 59, 7, 59, 1737, 10, 59, 12, 59, 14,
	59, 1740, 11, 59, 3, 59, 3, 59, 7, 59, 1744, 10, 59, 12, 59, 14, 59, 1747,
	11, 59, 3, 59, 7, 59, 1750, 10, 59, 12, 59, 14, 59, 1753, 11, 59, 3, 60,
	7, 60, 1756, 10, 60, 12, 60, 14, 60, 1759, 11, 60, 3, 60, 3, 60, 7, 60,
	1763, 10, 60, 12, 60, 14, 60, 1766, 11, 60, 3, 60, 3, 60, 7, 60, 1770,
	10, 60, 12, 60, 14, 60, 1773, 11, 60, 3, 60, 3, 60, 3, 61, 3, 61, 7, 61,
	1779, 10, 61, 12, 61, 14, 61, 1782, 11, 61, 3, 61, 3, 61, 7, 61, 1786,
	10, 61, 12, 61, 14, 61, 1789, 11, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62,
	3, 62, 7, 62, 1797, 10, 62, 12, 62, 14, 62, 1800, 11, 62, 3, 62, 5, 62,
	1803, 10, 62, 5, 62, 1805, 10, 62, 3, 63, 3, 63, 7, 63, 1809, 10, 63, 12,
	63, 14, 63, 1812, 11, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1818, 10,
	63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 1825, 10, 64, 3, 65, 3, 65,
	3, 65, 7, 65, 1830, 10, 65, 12, 65, 14, 65, 1833, 11, 65, 3, 65, 3, 65,
	3, 65, 3, 65, 3, 65, 7, 65, 1840, 10, 65, 12, 65, 14, 65, 1843, 11, 65,
	3, 65, 3, 65, 5, 65, 1847, 10, 65, 3, 66, 3, 66, 3, 67, 3, 67, 7, 67, 1853,
	10, 67, 12, 67, 14, 67, 1856, 11, 67, 3, 67, 3, 67, 7, 67, 1860, 10, 67,
	12, 67, 14, 67, 1863, 11, 67, 3, 67, 7, 67, 1866, 10, 67, 12, 67, 14, 67,
	1869, 11, 67, 3, 68, 3, 68, 7, 68, 1873, 10, 68, 12, 68, 14, 68, 1876,
	11, 68, 3, 68, 3, 68, 7, 68, 1880, 10, 68, 12, 68, 14, 68, 1883, 11, 68,
	3, 68, 7, 68, 1886, 10, 68, 12, 68, 14, 68, 1889, 11, 68, 3, 69, 3, 69,
	3, 69, 7, 69, 1894, 10, 69, 12, 69, 14, 69, 1897, 11, 69, 3, 69, 3, 69,
	7, 69, 1901, 10, 69, 12, 69, 14, 69, 1904, 11, 69, 3, 70, 3, 70, 3, 70,
	7, 70, 1909, 10, 70, 12, 70, 14, 70, 1912, 11, 70, 3, 70, 3, 70, 5, 70,
	1916, 10, 70, 3, 71, 3, 71, 3, 71, 7, 71, 1921, 10, 71, 12, 71, 14, 71,
	1924, 11, 71, 3, 71, 3, 71, 3, 71, 3, 71, 7, 71, 1930, 10, 71, 12, 71,
	14, 71, 1933, 11, 71, 3, 71, 3, 71, 7, 71, 1937, 10, 71, 12, 71, 14, 71,
	1940, 11, 71, 3, 72, 3, 72, 7, 72, 1944, 10, 72, 12, 72, 14, 72, 1947,
	11, 72, 3, 72, 3, 72, 7, 72, 1951, 10, 72, 12, 72, 14, 72, 1954, 11, 72,
	3, 72, 3, 72, 7, 72, 1958, 10, 72, 12, 72, 14, 72, 1961, 11, 72, 3, 73,
	3, 73, 3, 73, 7, 73, 1966, 10, 73, 12, 73, 14, 73, 1969, 11, 73, 3, 73,
	3, 73, 7, 73, 1973, 10, 73, 12, 73, 14, 73, 1976, 11, 73, 3, 74, 3, 74,
	3, 74, 7, 74, 1981, 10, 74, 12, 74, 14, 74, 1984, 11, 74, 3, 74, 7, 74,
	1987, 10, 74, 12, 74, 14, 74, 1990, 11, 74, 3, 75, 3, 75, 3, 75, 7, 75,
	1995, 10, 75, 12, 75, 14, 75, 1998, 11, 75, 3, 75, 3, 75, 7, 75, 2002,
	10, 75, 12, 75, 14, 75, 2005, 11, 75, 3, 76, 3, 76, 3, 76, 7, 76, 2010,
	10, 76, 12, 76, 14, 76, 2013, 11, 76, 3, 76, 3, 76, 7, 76, 2017, 10, 76,
	12, 76, 14, 76, 2020, 11, 76, 3, 77, 3, 77, 7, 77, 2024, 10, 77, 12, 77,
	14, 77, 2027, 11, 77, 3, 77, 3, 77, 7, 77, 2031, 10, 77, 12, 77, 14, 77,
	2034, 11, 77, 3, 77, 3, 77, 5, 77, 2038, 10, 77, 3, 78, 7, 78, 2041, 10,
	78, 12, 78, 14, 78, 2044, 11, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 3,
	79, 7, 79, 2052, 10, 79, 12, 79, 14, 79, 2055, 11, 79, 5, 79, 2057, 10,
	79, 3, 80, 3, 80, 3, 80, 6, 80, 2062, 10, 80, 13, 80, 14, 80, 2063, 5,
	80, 2066, 10, 80, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 2073, 10, 81,
	3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2079, 10, 82, 3, 83, 3, 83, 3, 84, 3,
	84, 3, 84, 5, 84, 2086, 10, 84, 3, 85, 3, 85, 7, 85, 2090, 10, 85, 12,
	85, 14, 85, 2093, 11, 85, 3, 85, 3, 85, 7, 85, 2097, 10, 85, 12, 85, 14,
	85, 2100, 11, 85, 3, 85, 3, 85, 7, 85, 2104, 10, 85, 12, 85, 14, 85, 2107,
	11, 85, 3, 85, 7, 85, 2110, 10, 85, 12, 85, 14, 85, 2113, 11, 85, 3, 85,
	7, 85, 2116, 10, 85, 12, 85, 14, 85, 2119, 11, 85, 3, 85, 3, 85, 3, 86,
	7, 86, 2124, 10, 86, 12, 86, 14, 86, 2127, 11, 86, 3, 86, 3, 86, 7, 86,
	2131, 10, 86, 12, 86, 14, 86, 2134, 11, 86, 3, 86, 3, 86, 3, 86, 5, 86,
	2139, 10, 86, 3, 87, 5, 87, 2142, 10, 87, 3, 87, 5, 87, 2145, 10, 87, 3,
	87, 3, 87, 5, 87, 2149, 10, 87, 3, 87, 5, 87, 2152, 10, 87, 3, 88, 7, 88,
	2155, 10, 88, 12, 88, 14, 88, 2158, 11, 88, 3, 88, 5, 88, 2161, 10, 88,
	3, 88, 7, 88, 2164, 10, 88, 12, 88, 14, 88, 2167, 11, 88, 3, 88, 3, 88,
	3, 89, 3, 89, 7, 89, 2173, 10, 89, 12, 89, 14, 89, 2176, 11, 89, 3, 89,
	3, 89, 3, 89, 7, 89, 2181, 10, 89, 12, 89, 14, 89, 2184, 11, 89, 3, 89,
	3, 89, 7, 89, 2188, 10, 89, 12, 89, 14, 89, 2191, 11, 89, 3, 89, 3, 89,
	7, 89, 2195, 10, 89, 12, 89, 14, 89, 2198, 11, 89, 3, 89, 7, 89, 2201,
	10, 89, 12, 89, 14, 89, 2204, 11, 89, 3, 89, 7, 89, 2207, 10, 89, 12, 89,
	14, 89, 2210, 11, 89, 3, 89, 5, 89, 2213, 10, 89, 3, 89, 3, 89, 5, 89,
	2217, 10, 89, 3, 90, 3, 90, 7, 90, 2221, 10, 90, 12, 90, 14, 90, 2224,
	11, 90, 3, 90, 3, 90, 7, 90, 2228, 10, 90, 12, 90, 14, 90, 2231, 11, 90,
	3, 90, 3, 90, 7, 90, 2235, 10, 90, 12, 90, 14, 90, 2238, 11, 90, 3, 90,
	7, 90, 2241, 10, 90, 12, 90, 14, 90, 2244, 11, 90, 3, 90, 7, 90, 2247,
	10, 90, 12, 90, 14, 90, 2250, 11, 90, 3, 90, 5, 90, 2253, 10, 90, 3, 90,
	3, 90, 3, 91, 5, 91, 2258, 10, 91, 3, 91, 3, 91, 5, 91, 2262, 10, 91, 3,
	92, 6, 92, 2265, 10, 92, 13, 92, 14, 92, 2266, 3, 93, 3, 93, 7, 93, 2271,
	10, 93, 12, 93, 14, 93, 2274, 11, 93, 3, 93, 5, 93, 2277, 10, 93, 3, 94,
	5, 94, 2280, 10, 94, 3, 94, 7, 94, 2283, 10, 94, 12, 94, 14, 94, 2286,
	11, 94, 3, 94, 3, 94, 7, 94, 2290, 10, 94, 12, 94, 14, 94, 2293, 11, 94,
	3, 94, 3, 94, 7, 94, 2297, 10, 94, 12, 94, 14, 94, 2300, 11, 94, 5, 94,
	2302, 10, 94, 3, 94, 5, 94, 2305, 10, 94, 3, 94, 7, 94, 2308, 10, 94, 12,
	94, 14, 94, 2311, 11, 94, 3, 94, 3, 94, 3, 95, 3, 95, 3, 95, 3, 95, 3,
	95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 5, 95,
	2329, 10, 95, 3, 96, 3, 96, 7, 96, 2333, 10, 96, 12, 96, 14, 96, 2336,
	11, 96, 3, 96, 3, 96, 7, 96, 2340, 10, 96, 12, 96, 14, 96, 2343, 11, 96,
	3, 96, 3, 96, 3, 97, 3, 97, 7, 97, 2349, 10, 97, 12, 97, 14, 97, 2352,
	11, 97, 3, 97, 3, 97, 7, 97, 2356, 10, 97, 12, 97, 14, 97, 2359, 11, 97,
	3, 97, 3, 97, 7, 97, 2363, 10, 97, 12, 97, 14, 97, 2366, 11, 97, 3, 97,
	7, 97, 2369, 10, 97, 12, 97, 14, 97, 2372, 11, 97, 3, 97, 7, 97, 2375,
	10, 97, 12, 97, 14, 97, 2378, 11, 97, 3, 97, 5, 97, 2381, 10, 97, 3, 97,
	3, 97, 3, 97, 3, 97, 7, 97, 2387, 10, 97, 12, 97, 14, 97, 2390, 11, 97,
	3, 97, 5, 97, 2393, 10, 97, 3, 98, 3, 98, 3, 99, 3, 99, 5, 99, 2399, 10,
	99, 3, 100, 3, 100, 3, 100, 7, 100, 2404, 10, 100, 12, 100, 14, 100, 2407,
	11, 100, 3, 100, 3, 100, 3, 101, 3, 101, 3, 101, 3, 101, 7, 101, 2415,
	10, 101, 12, 101, 14, 101, 2418, 11, 101, 3, 101, 3, 101, 3, 102, 3, 102,
	3, 103, 3, 103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 105, 3, 105, 7, 105,
	2432, 10, 105, 12, 105, 14, 105, 2435, 11, 105, 3, 105, 3, 105, 7, 105,
	2439, 10, 105, 12, 105, 14, 105, 2442, 11, 105, 3, 105, 3, 105, 3, 106,
	3, 106, 7, 106, 2448, 10, 106, 12, 106, 14, 106, 2451, 11, 106, 3, 106,
	3, 106, 7, 106, 2455, 10, 106, 12, 106, 14, 106, 2458, 11, 106, 3, 106,
	3, 106, 3, 106, 3, 106, 7, 106, 2464, 10, 106, 12, 106, 14, 106, 2467,
	11, 106, 3, 106, 5, 106, 2470, 10, 106, 3, 106, 7, 106, 2473, 10, 106,
	12, 106, 14, 106, 2476, 11, 106, 3, 106, 3, 106, 7, 106, 2480, 10, 106,
	12, 106, 14, 106, 2483, 11, 106, 3, 106, 3, 106, 7, 106, 2487, 10, 106,
	12, 106, 14, 106, 2490, 11, 106, 3, 106, 3, 106, 5, 106, 2494, 10, 106,
	3, 107, 3, 107, 7, 107, 2498, 10, 107, 12, 107, 14, 107, 2501, 11, 107,
	3, 107, 3, 107, 7, 107, 2505, 10, 107, 12, 107, 14, 107, 2508, 11, 107,
	3, 107, 7, 107, 2511, 10, 107, 12, 107, 14, 107, 2514, 11, 107, 3, 107,
	5, 107, 2517, 10, 107, 3, 108, 3, 108, 3, 108, 7, 108, 2522, 10, 108, 12,
	108, 14, 108, 2525, 11, 108, 3, 108, 3, 108, 7, 108, 2529, 10, 108, 12,
	108, 14, 108, 2532, 11, 108, 3, 108, 5, 108, 2535, 10, 108, 5, 108, 2537,
	10, 108, 3, 109, 3, 109, 7, 109, 2541, 10, 109, 12, 109, 14, 109, 2544,
	11, 109, 3, 109, 3, 109, 7, 109, 2548, 10, 109, 12, 109, 14, 109, 2551,
	11, 109, 3, 109, 3, 109, 5, 109, 2555, 10, 109, 3, 109, 7, 109, 2558, 10,
	109, 12, 109, 14, 109, 2561, 11, 109, 3, 109, 3, 109, 7, 109, 2565, 10,
	109, 12, 109, 14, 109, 2568, 11, 109, 3, 109, 3, 109, 7, 109, 2572, 10,
	109, 12, 109, 14, 109, 2575, 11, 109, 3, 109, 5, 109, 2578, 10, 109, 3,
	109, 7, 109, 2581, 10, 109, 12, 109, 14, 109, 2584, 11, 109, 3, 109, 5,
	109, 2587, 10, 109, 3, 109, 7, 109, 2590, 10, 109, 12, 109, 14, 109, 2593,
	11, 109, 3, 109, 5, 109, 2596, 10, 109, 3, 110, 3, 110, 5, 110, 2600, 10,
	110, 3, 111, 3, 111, 7, 111, 2604, 10, 111, 12, 111, 14, 111, 2607, 11,
	111, 3, 111, 3, 111, 7, 111, 2611, 10, 111, 12, 111, 14, 111, 2614, 11,
	111, 3, 111, 3, 111, 7, 111, 2618, 10, 111, 12, 111, 14, 111, 2621, 11,
	111, 3, 111, 5, 111, 2624, 10, 111, 3, 111, 3, 111, 7, 111, 2628, 10, 111,
	12, 111, 14, 111, 2631, 11, 111, 3, 111, 5, 111, 2634, 10, 111, 3, 112,
	3, 112, 3, 113, 3, 113, 3, 113, 7, 113, 2641, 10, 113, 12, 113, 14, 113,
	2644, 11, 113, 3, 113, 3, 113, 7, 113, 2648, 10, 113, 12, 113, 14, 113,
	2651, 11, 113, 3, 113, 3, 113, 5, 113, 2655, 10, 113, 3, 113, 3, 113, 5,
	113, 2659, 10, 113, 3, 113, 5, 113, 2662, 10, 113, 3, 114, 3, 114, 5, 114,
	2666, 10, 114, 3, 115, 3, 115, 7, 115, 2670, 10, 115, 12, 115, 14, 115,
	2673, 11, 115, 3, 115, 3, 115, 7, 115, 2677, 10, 115, 12, 115, 14, 115,
	2680, 11, 115, 3, 115, 3, 115, 7, 115, 2684, 10, 115, 12, 115, 14, 115,
	2687, 11, 115, 3, 115, 3, 115, 7, 115, 2691, 10, 115, 12, 115, 14, 115,
	2694, 11, 115, 3, 115, 3, 115, 5, 115, 2698, 10, 115, 3, 115, 7, 115, 2701,
	10, 115, 12, 115, 14, 115, 2704, 11, 115, 3, 115, 3, 115, 7, 115, 2708,
	10, 115, 12, 115, 14, 115, 2711, 11, 115, 3, 115, 5, 115, 2714, 10, 115,
	3, 115, 3, 115, 7, 115, 2718, 10, 115, 12, 115, 14, 115, 2721, 11, 115,
	3, 115, 3, 115, 7, 115, 2725, 10, 115, 12, 115, 14, 115, 2728, 11, 115,
	3, 115, 3, 115, 7, 115, 2732, 10, 115, 12, 115, 14, 115, 2735, 11, 115,
	3, 115, 3, 115, 7, 115, 2739, 10, 115, 12, 115, 14, 115, 2742, 11, 115,
	3, 115, 3, 115, 7, 115, 2746, 10, 115, 12, 115, 14, 115, 2749, 11, 115,
	5, 115, 2751, 10, 115, 3, 115, 3, 115, 7, 115, 2755, 10, 115, 12, 115,
	14, 115, 2758, 11, 115, 3, 115, 3, 115, 5, 115, 2762, 10, 115, 3, 116,
	3, 116, 7, 116, 2766, 10, 116, 12, 116, 14, 116, 2769, 11, 116, 3, 116,
	3, 116, 3, 116, 3, 116, 5, 116, 2775, 10, 116, 3, 116, 7, 116, 2778, 10,
	116, 12, 116, 14, 116, 2781, 11, 116, 3, 116, 3, 116, 7, 116, 2785, 10,
	116, 12, 116, 14, 116, 2788, 11, 116, 3, 116, 3, 116, 7, 116, 2792, 10,
	116, 12, 116, 14, 116, 2795, 11, 116, 7, 116, 2797, 10, 116, 12, 116, 14,
	116, 2800, 11, 116, 3, 116, 7, 116, 2803, 10, 116, 12, 116, 14, 116, 2806,
	11, 116, 3, 116, 3, 116, 3, 117, 3, 117, 7, 117, 2812, 10, 117, 12, 117,
	14, 117, 2815, 11, 117, 3, 117, 3, 117, 7, 117, 2819, 10, 117, 12, 117,
	14, 117, 2822, 11, 117, 3, 117, 7, 117, 2825, 10, 117, 12, 117, 14, 117,
	2828, 11, 117, 3, 117, 7, 117, 2831, 10, 117, 12, 117, 14, 117, 2834, 11,
	117, 3, 117, 3, 117, 7, 117, 2838, 10, 117, 12, 117, 14, 117, 2841, 11,
	117, 3, 117, 3, 117, 5, 117, 2845, 10, 117, 3, 117, 3, 117, 7, 117, 2849,
	10, 117, 12, 117, 14, 117, 2852, 11, 117, 3, 117, 3, 117, 7, 117, 2856,
	10, 117, 12, 117, 14, 117, 2859, 11, 117, 3, 117, 3, 117, 5, 117, 2863,
	10, 117, 5, 117, 2865, 10, 117, 3, 118, 3, 118, 3, 118, 5, 118, 2870, 10,
	118, 3, 119, 3, 119, 7, 119, 2874, 10, 119, 12, 119, 14, 119, 2877, 11,
	119, 3, 119, 3, 119, 3, 120, 3, 120, 7, 120, 2883, 10, 120, 12, 120, 14,
	120, 2886, 11, 120, 3, 120, 3, 120, 3, 121, 3, 121, 7, 121, 2892, 10, 121,
	12, 121, 14, 121, 2895, 11, 121, 3, 121, 3, 121, 7, 121, 2899, 10, 121,
	12, 121, 14, 121, 2902, 11, 121, 3, 121, 6, 121, 2905, 10, 121, 13, 121,
	14, 121, 2906, 3, 121, 7, 121, 2910, 10, 121, 12, 121, 14, 121, 2913, 11,
	121, 3, 121, 5, 121, 2916, 10, 121, 3, 121, 7, 121, 2919, 10, 121, 12,
	121, 14, 121, 2922, 11, 121, 3, 121, 5, 121, 2925, 10, 121, 3, 122, 3,
	122, 7, 122, 2929, 10, 122, 12, 122, 14, 122, 2932, 11, 122, 3, 122, 3,
	122, 7, 122, 2936, 10, 122, 12, 122, 14, 122, 2939, 11, 122, 3, 122, 3,
	122, 3, 122, 3, 122, 3, 122, 7, 122, 2946, 10, 122, 12, 122, 14, 122, 2949,
	11, 122, 3, 122, 3, 122, 3, 123, 3, 123, 7, 123, 2955, 10, 123, 12, 123,
	14, 123, 2958, 11, 123, 3, 123, 3, 123, 3, 124, 3, 124, 3, 124, 5, 124,
	2965, 10, 124, 3, 125, 3, 125, 7, 125, 2969, 10, 125, 12, 125, 14, 125,
	2972, 11, 125, 3, 125, 3, 125, 7, 125, 2976, 10, 125, 12, 125, 14, 125,
	2979, 11, 125, 3, 125, 3, 125, 5, 125, 2983, 10, 125, 3, 125, 3, 125, 3,
	125, 3, 125, 7, 125, 2989, 10, 125, 12, 125, 14, 125, 2992, 11, 125, 3,
	125, 5, 125, 2995, 10, 125, 3, 126, 3, 126, 7, 126, 2999, 10, 126, 12,
	126, 14, 126, 3002, 11, 126, 3, 126, 3, 126, 3, 126, 3, 126, 7, 126, 3008,
	10, 126, 12, 126, 14, 126, 3011, 11, 126, 3, 126, 3, 126, 3, 126, 3, 126,
	7, 126, 3017, 10, 126, 12, 126, 14, 126, 3020, 11, 126, 3, 126, 3, 126,
	3, 126, 3, 126, 7, 126, 3026, 10, 126, 12, 126, 14, 126, 3029, 11, 126,
	3, 126, 3, 126, 5, 126, 3033, 10, 126, 3, 127, 3, 127, 7, 127, 3037, 10,
	127, 12, 127, 14, 127, 3040, 11, 127, 3, 127, 5, 127, 3043, 10, 127, 3,
	127, 7, 127, 3046, 10, 127, 12, 127, 14, 127, 3049, 11, 127, 3, 127, 3,
	127, 7, 127, 3053, 10, 127, 12, 127, 14, 127, 3056, 11, 127, 3, 127, 3,
	127, 3, 127, 3, 127, 3, 128, 3, 128, 7, 128, 3064, 10, 128, 12, 128, 14,
	128, 3067, 11, 128, 3, 128, 3, 128, 3, 128, 5, 128, 3072, 10, 128, 3, 128,
	3, 128, 3, 128, 3, 128, 5, 128, 3078, 10, 128, 3, 129, 5, 129, 3081, 10,
	129, 3, 129, 7, 129, 3084, 10, 129, 12, 129, 14, 129, 3087, 11, 129, 3,
	129, 3, 129, 7, 129, 3091, 10, 129, 12, 129, 14, 129, 3094, 11, 129, 3,
	129, 3, 129, 5, 129, 3098, 10, 129, 3, 130, 3, 130, 3, 131, 3, 131, 3,
	132, 3, 132, 3, 133, 3, 133, 3, 134, 3, 134, 3, 135, 3, 135, 3, 136, 3,
	136, 3, 137, 3, 137, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 5, 138, 3121,
	10, 138, 3, 139, 3, 139, 3, 139, 3, 139, 5, 139, 3127, 10, 139, 3, 140,
	3, 140, 3, 140, 5, 140, 3132, 10, 140, 3, 141, 3, 141, 6, 141, 3136, 10,
	141, 13, 141, 14, 141, 3137, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3,
	142, 3, 142, 3, 142, 5, 142, 3148, 10, 142, 3, 142, 7, 142, 3151, 10, 142,
	12, 142, 14, 142, 3154, 11, 142, 3, 143, 3, 143, 3, 144, 3, 144, 3, 145,
	3, 145, 3, 146, 3, 146, 3, 147, 3, 147, 3, 148, 3, 148, 3, 149, 3, 149,
	3, 150, 3, 150, 3, 151, 3, 151, 3, 152, 3, 152, 3, 153, 3, 153, 7, 153,
	3178, 10, 153, 12, 153, 14, 153, 3181, 11, 153, 3, 154, 3, 154, 5, 154,
	3185, 10, 154, 3, 154, 7, 154, 3188, 10, 154, 12, 154, 14, 154, 3191, 11,
	154, 3, 155, 3, 155, 7, 155, 3195, 10, 155, 12, 155, 14, 155, 3198, 11,
	155, 3, 155, 3, 155, 7, 155, 3202, 10, 155, 12, 155, 14, 155, 3205, 11,
	155, 3, 155, 3, 155, 3, 155, 3, 155, 5, 155, 3211, 10, 155, 3, 156, 3,
	156, 7, 156, 3215, 10, 156, 12, 156, 14, 156, 3218, 11, 156, 3, 156, 3,
	156, 7, 156, 3222, 10, 156, 12, 156, 14, 156, 3225, 11, 156, 3, 156, 3,
	156, 6, 156, 3229, 10, 156, 13, 156, 14, 156, 3230, 3, 156, 3, 156, 3,
	156, 3, 156, 3, 156, 6, 156, 3238, 10, 156, 13, 156, 14, 156, 3239, 3,
	156, 3, 156, 5, 156, 3244, 10, 156, 3, 157, 3, 157, 3, 158, 3, 158, 5,
	158, 3250, 10, 158, 3, 159, 3, 159, 3, 160, 3, 160, 7, 160, 3256, 10, 160,
	12, 160, 14, 160, 3259, 11, 160, 3, 160, 3, 160, 7, 160, 3263, 10, 160,
	12, 160, 14, 160, 3266, 11, 160, 3, 161, 3, 161, 6, 161, 3270, 10, 161,
	13, 161, 14, 161, 3271, 3, 162, 3, 162, 3, 163, 3, 163, 3, 163, 3, 164,
	3, 164, 3, 164, 3, 165, 3, 165, 3, 166, 3, 166, 7, 166, 3286, 10, 166,
	12, 166, 14, 166, 3289, 11, 166, 3, 166, 5, 166, 3292, 10, 166, 3, 167,
	6, 167, 3295, 10, 167, 13, 167, 14, 167, 3296, 3, 167, 5, 167, 3300, 10,
	167, 3, 167, 2, 2, 168, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
	28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
	64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98,
	100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128,
	130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
	160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188,
	190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218,
	220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248,
	250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278,
	280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308,
	310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 2, 30, 3, 2,
	63, 64, 3, 2, 67, 68, 5, 2, 138, 138, 141, 146, 150, 150, 3, 2, 163, 165,
	3, 2, 168, 170, 4, 2, 59, 59, 74, 74, 4, 2, 56, 56, 88, 88, 3, 2, 31, 35,
	4, 2, 50, 51, 53, 54, 3, 2, 46, 49, 4, 2, 93, 93, 95, 95, 4, 2, 92, 92,
	94, 94, 3, 2, 20, 21, 3, 2, 17, 19, 4, 2, 52, 52, 91, 91, 3, 2, 113, 117,
	4, 2, 124, 124, 129, 129, 3, 2, 109, 112, 4, 2, 93, 93, 96, 96, 3, 2, 118,
	123, 3, 2, 125, 127, 3, 2, 130, 132, 3, 2, 134, 135, 3, 2, 101, 108, 9,
	2, 62, 62, 70, 73, 77, 77, 82, 83, 96, 99, 109, 135, 147, 147, 3, 2, 44,
	45, 3, 2, 26, 27, 4, 2, 7, 7, 29, 29, 2, 3689, 2, 335, 3, 2, 2, 2, 4, 360,
	3, 2, 2, 2, 6, 386, 3, 2, 2, 2, 8, 422, 3, 2, 2, 2, 10, 427, 3, 2, 2, 2,
	12, 430, 3, 2, 2, 2, 14, 440, 3, 2, 2, 2, 16, 443, 3, 2, 2, 2, 18, 448,
	3, 2, 2, 2, 20, 527, 3, 2, 2, 2, 22, 531, 3, 2, 2, 2, 24, 572, 3, 2, 2,
	2, 26, 608, 3, 2, 2, 2, 28, 631, 3, 2, 2, 2, 30, 646, 3, 2, 2, 2, 32, 648,
	3, 2, 2, 2, 34, 653, 3, 2, 2, 2, 36, 670, 3, 2, 2, 2, 38, 692, 3, 2, 2,
	2, 40, 699, 3, 2, 2, 2, 42, 701, 3, 2, 2, 2, 44, 711, 3, 2, 2, 2, 46, 762,
	3, 2, 2, 2, 48, 764, 3, 2, 2, 2, 50, 798, 3, 2, 2, 2, 52, 834, 3, 2, 2,
	2, 54, 856, 3, 2, 2, 2, 56, 933, 3, 2, 2, 2, 58, 974, 3, 2, 2, 2, 60, 993,
	3, 2, 2, 2, 62, 1009, 3, 2, 2, 2, 64, 1035, 3, 2, 2, 2, 66, 1038, 3, 2,
	2, 2, 68, 1074, 3, 2, 2, 2, 70, 1119, 3, 2, 2, 2, 72, 1232, 3, 2, 2, 2,
	74, 1270, 3, 2, 2, 2, 76, 1296, 3, 2, 2, 2, 78, 1350, 3, 2, 2, 2, 80, 1400,
	3, 2, 2, 2, 82, 1403, 3, 2, 2, 2, 84, 1437, 3, 2, 2, 2, 86, 1476, 3, 2,
	2, 2, 88, 1502, 3, 2, 2, 2, 90, 1521, 3, 2, 2, 2, 92, 1524, 3, 2, 2, 2,
	94, 1533, 3, 2, 2, 2, 96, 1545, 3, 2, 2, 2, 98, 1547, 3, 2, 2, 2, 100,
	1565, 3, 2, 2, 2, 102, 1580, 3, 2, 2, 2, 104, 1596, 3, 2, 2, 2, 106, 1615,
	3, 2, 2, 2, 108, 1622, 3, 2, 2, 2, 110, 1674, 3, 2, 2, 2, 112, 1676, 3,
	2, 2, 2, 114, 1686, 3, 2, 2, 2, 116, 1727, 3, 2, 2, 2, 118, 1757, 3, 2,
	2, 2, 120, 1776, 3, 2, 2, 2, 122, 1804, 3, 2, 2, 2, 124, 1810, 3, 2, 2,
	2, 126, 1824, 3, 2, 2, 2, 128, 1846, 3, 2, 2, 2, 130, 1848, 3, 2, 2, 2,
	132, 1850, 3, 2, 2, 2, 134, 1870, 3, 2, 2, 2, 136, 1890, 3, 2, 2, 2, 138,
	1905, 3, 2, 2, 2, 140, 1917, 3, 2, 2, 2, 142, 1941, 3, 2, 2, 2, 144, 1962,
	3, 2, 2, 2, 146, 1977, 3, 2, 2, 2, 148, 1991, 3, 2, 2, 2, 150, 2006, 3,
	2, 2, 2, 152, 2021, 3, 2, 2, 2, 154, 2042, 3, 2, 2, 2, 156, 2056, 3, 2,
	2, 2, 158, 2065, 3, 2, 2, 2, 160, 2072, 3, 2, 2, 2, 162, 2078, 3, 2, 2,
	2, 164, 2080, 3, 2, 2, 2, 166, 2085, 3, 2, 2, 2, 168, 2087, 3, 2, 2, 2,
	170, 2125, 3, 2, 2, 2, 172, 2151, 3, 2, 2, 2, 174, 2156, 3, 2, 2, 2, 176,
	2216, 3, 2, 2, 2, 178, 2218, 3, 2, 2, 2, 180, 2261, 3, 2, 2, 2, 182, 2264,
	3, 2, 2, 2, 184, 2276, 3, 2, 2, 2, 186, 2279, 3, 2, 2, 2, 188, 2328, 3,
	2, 2, 2, 190, 2330, 3, 2, 2, 2, 192, 2392, 3, 2, 2, 2, 194, 2394, 3, 2,
	2, 2, 196, 2398, 3, 2, 2, 2, 198, 2400, 3, 2, 2, 2, 200, 2410, 3, 2, 2,
	2, 202, 2421, 3, 2, 2, 2, 204, 2423, 3, 2, 2, 2, 206, 2427, 3, 2, 2, 2,
	208, 2429, 3, 2, 2, 2, 210, 2493, 3, 2, 2, 2, 212, 2495, 3, 2, 2, 2, 214,
	2536, 3, 2, 2, 2, 216, 2538, 3, 2, 2, 2, 218, 2599, 3, 2, 2, 2, 220, 2633,
	3, 2, 2, 2, 222, 2635, 3, 2, 2, 2, 224, 2661, 3, 2, 2, 2, 226, 2665, 3,
	2, 2, 2, 228, 2761, 3, 2, 2, 2, 230, 2763, 3, 2, 2, 2, 232, 2864, 3, 2,
	2, 2, 234, 2869, 3, 2, 2, 2, 236, 2871, 3, 2, 2, 2, 238, 2880, 3, 2, 2,
	2, 240, 2889, 3, 2, 2, 2, 242, 2926, 3, 2, 2, 2, 244, 2952, 3, 2, 2, 2,
	246, 2964, 3, 2, 2, 2, 248, 2966, 3, 2, 2, 2, 250, 3032, 3, 2, 2, 2, 252,
	3034, 3, 2, 2, 2, 254, 3077, 3, 2, 2, 2, 256, 3080, 3, 2, 2, 2, 258, 3099,
	3, 2, 2, 2, 260, 3101, 3, 2, 2, 2, 262, 3103, 3, 2, 2, 2, 264, 3105, 3,
	2, 2, 2, 266, 3107, 3, 2, 2, 2, 268, 3109, 3, 2, 2, 2, 270, 3111, 3, 2,
	2, 2, 272, 3113, 3, 2, 2, 2, 274, 3120, 3, 2, 2, 2, 276, 3126, 3, 2, 2,
	2, 278, 3131, 3, 2, 2, 2, 280, 3135, 3, 2, 2, 2, 282, 3147, 3, 2, 2, 2,
	284, 3155, 3, 2, 2, 2, 286, 3157, 3, 2, 2, 2, 288, 3159, 3, 2, 2, 2, 290,
	3161, 3, 2, 2, 2, 292, 3163, 3, 2, 2, 2, 294, 3165, 3, 2, 2, 2, 296, 3167,
	3, 2, 2, 2, 298, 3169, 3, 2, 2, 2, 300, 3171, 3, 2, 2, 2, 302, 3173, 3,
	2, 2, 2, 304, 3175, 3, 2, 2, 2, 306, 3184, 3, 2, 2, 2, 308, 3210, 3, 2,
	2, 2, 310, 3243, 3, 2, 2, 2, 312, 3245, 3, 2, 2, 2, 314, 3249, 3, 2, 2,
	2, 316, 3251, 3, 2, 2, 2, 318, 3253, 3, 2, 2, 2, 320, 3267, 3, 2, 2, 2,
	322, 3273, 3, 2, 2, 2, 324, 3275, 3, 2, 2, 2, 326, 3278, 3, 2, 2, 2, 328,
	3281, 3, 2, 2, 2, 330, 3291, 3, 2, 2, 2, 332, 3299, 3, 2, 2, 2, 334, 336,
	5, 320, 161, 2, 335, 334, 3, 2, 2, 2, 335, 336, 3, 2, 2, 2, 336, 340, 3,
	2, 2, 2, 337, 339, 7, 7, 2, 2, 338, 337, 3, 2, 2, 2, 339, 342, 3, 2, 2,
	2, 340, 338, 3, 2, 2, 2, 340, 341, 3, 2, 2, 2, 341, 346, 3, 2, 2, 2, 342,
	340, 3, 2, 2, 2, 343, 345, 5, 6, 4, 2, 344, 343, 3, 2, 2, 2, 345, 348,
	3, 2, 2, 2, 346, 344, 3, 2, 2, 2, 346, 347, 3, 2, 2, 2, 347, 349, 3, 2,
	2, 2, 348, 346, 3, 2, 2, 2, 349, 350, 5, 8, 5, 2, 350, 354, 5, 10, 6, 2,
	351, 353, 5, 16, 9, 2, 352, 351, 3, 2, 2, 2, 353, 356, 3, 2, 2, 2, 354,
	352, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 357, 3, 2, 2, 2, 356, 354,
	3, 2, 2, 2, 357, 358, 7, 2, 2, 3, 358, 3, 3, 2, 2, 2, 359, 361, 5, 320,
	161, 2, 360, 359, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361, 365, 3, 2, 2,
	2, 362, 364, 7, 7, 2, 2, 363, 362, 3, 2, 2, 2, 364, 367, 3, 2, 2, 2, 365,
	363, 3, 2, 2, 2, 365, 366, 3, 2, 2, 2, 366, 371, 3, 2, 2, 2, 367, 365,
	3, 2, 2, 2, 368, 370, 5, 6, 4, 2, 369, 368, 3, 2, 2, 2, 370, 373, 3, 2,
	2, 2, 371, 369, 3, 2, 2, 2, 371, 372, 3, 2, 2, 2, 372, 374, 3, 2, 2, 2,
	373, 371, 3, 2, 2, 2, 374, 375, 5, 8, 5, 2, 375, 381, 5, 10, 6, 2, 376,
	377, 5, 124, 63, 2, 377, 378, 5, 330, 166, 2, 378, 380, 3, 2, 2, 2, 379,
	376, 3, 2, 2, 2, 380, 383, 3, 2, 2, 2, 381, 379, 3, 2, 2, 2, 381, 382,
	3, 2, 2, 2, 382, 384, 3, 2, 2, 2, 383, 381, 3, 2, 2, 2, 384, 385, 7, 2,
	2, 3, 385, 5, 3, 2, 2, 2, 386, 390, 7, 100, 2, 2, 387, 389, 7, 7, 2, 2,
	388, 387, 3, 2, 2, 2, 389, 392, 3, 2, 2, 2, 390, 388, 3, 2, 2, 2, 390,
	391, 3, 2, 2, 2, 391, 393, 3, 2, 2, 2, 392, 390, 3, 2, 2, 2, 393, 397,
	7, 28, 2, 2, 394, 396, 7, 7, 2, 2, 395, 394, 3, 2, 2, 2, 396, 399, 3, 2,
	2, 2, 397, 395, 3, 2, 2, 2, 397, 398, 3, 2, 2, 2, 398, 409, 3, 2, 2, 2,
	399, 397, 3, 2, 2, 2, 400, 402, 7, 13, 2, 2, 401, 403, 5, 314, 158, 2,
	402, 401, 3, 2, 2, 2, 403, 404, 3, 2, 2, 2, 404, 402, 3, 2, 2, 2, 404,
	405, 3, 2, 2, 2, 405, 406, 3, 2, 2, 2, 406, 407, 7, 14, 2, 2, 407, 410,
	3, 2, 2, 2, 408, 410, 5, 314, 158, 2, 409, 400, 3, 2, 2, 2, 409, 408, 3,
	2, 2, 2, 410, 414, 3, 2, 2, 2, 411, 413, 7, 7, 2, 2, 412, 411, 3, 2, 2,
	2, 413, 416, 3, 2, 2, 2, 414, 412, 3, 2, 2, 2, 414, 415, 3, 2, 2, 2, 415,
	7, 3, 2, 2, 2, 416, 414, 3, 2, 2, 2, 417, 418, 7, 61, 2, 2, 418, 420, 5,
	318, 160, 2, 419, 421, 5, 330, 166, 2, 420, 419, 3, 2, 2, 2, 420, 421,
	3, 2, 2, 2, 421, 423, 3, 2, 2, 2, 422, 417, 3, 2, 2, 2, 422, 423, 3, 2,
	2, 2, 423, 9, 3, 2, 2, 2, 424, 426, 5, 12, 7, 2, 425, 424, 3, 2, 2, 2,
	426, 429, 3, 2, 2, 2, 427, 425, 3, 2, 2, 2, 427, 428, 3, 2, 2, 2, 428,
	11, 3, 2, 2, 2, 429, 427, 3, 2, 2, 2, 430, 431, 7, 62, 2, 2, 431, 435,
	5, 318, 160, 2, 432, 433, 7, 9, 2, 2, 433, 436, 7, 17, 2, 2, 434, 436,
	5, 14, 8, 2, 435, 432, 3, 2, 2, 2, 435, 434, 3, 2, 2, 2, 435, 436, 3, 2,
	2, 2, 436, 438, 3, 2, 2, 2, 437, 439, 5, 330, 166, 2, 438, 437, 3, 2, 2,
	2, 438, 439, 3, 2, 2, 2, 439, 13, 3, 2, 2, 2, 440, 441, 7, 91, 2, 2, 441,
	442, 5, 316, 159, 2, 442, 15, 3, 2, 2, 2, 443, 445, 5, 126, 64, 2, 444,
	446, 5, 332, 167, 2, 445, 444, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 17,
	3, 2, 2, 2, 447, 449, 5, 280, 141, 2, 448, 447, 3, 2, 2, 2, 448, 449, 3,
	2, 2, 2, 449, 450, 3, 2, 2, 2, 450, 454, 9, 2, 2, 2, 451, 453, 7, 7, 2,
	2, 452, 451, 3, 2, 2, 2, 453, 456, 3, 2, 2, 2, 454, 452, 3, 2, 2, 2, 454,
	455, 3, 2, 2, 2, 455, 457, 3, 2, 2, 2, 456, 454, 3, 2, 2, 2, 457, 465,
	5, 316, 159, 2, 458, 460, 7, 7, 2, 2, 459, 458, 3, 2, 2, 2, 460, 463, 3,
	2, 2, 2, 461, 459, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 462, 464, 3, 2, 2,
	2, 463, 461, 3, 2, 2, 2, 464, 466, 5, 84, 43, 2, 465, 461, 3, 2, 2, 2,
	465, 466, 3, 2, 2, 2, 466, 474, 3, 2, 2, 2, 467, 469, 7, 7, 2, 2, 468,
	467, 3, 2, 2, 2, 469, 472, 3, 2, 2, 2, 470, 468, 3, 2, 2, 2, 470, 471,
	3, 2, 2, 2, 471, 473, 3, 2, 2, 2, 472, 470, 3, 2, 2, 2, 473, 475, 5, 20,
	11, 2, 474, 470, 3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 490, 3, 2, 2, 2,
	476, 478, 7, 7, 2, 2, 477, 476, 3, 2, 2, 2, 478, 481, 3, 2, 2, 2, 479,
	477, 3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 482, 3, 2, 2, 2, 481, 479,
	3, 2, 2, 2, 482, 486, 7, 28, 2, 2, 483, 485, 7, 7, 2, 2, 484, 483, 3, 2,
	2, 2, 485, 488, 3, 2, 2, 2, 486, 484, 3, 2, 2, 2, 486, 487, 3, 2, 2, 2,
	487, 489, 3, 2, 2, 2, 488, 486, 3, 2, 2, 2, 489, 491, 5, 26, 14, 2, 490,
	479, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491, 499, 3, 2, 2, 2, 492, 494,
	7, 7, 2, 2, 493, 492, 3, 2, 2, 2, 494, 497, 3, 2, 2, 2, 495, 493, 3, 2,
	2, 2, 495, 496, 3, 2, 2, 2, 496, 498, 3, 2, 2, 2, 497, 495, 3, 2, 2, 2,
	498, 500, 5, 116, 59, 2, 499, 495, 3, 2, 2, 2, 499, 500, 3, 2, 2, 2, 500,
	515, 3, 2, 2, 2, 501, 503, 7, 7, 2, 2, 502, 501, 3, 2, 2, 2, 503, 506,
	3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 504, 505, 3, 2, 2, 2, 505, 507, 3, 2,
	2, 2, 506, 504, 3, 2, 2, 2, 507, 516, 5, 36, 19, 2, 508, 510, 7, 7, 2,
	2, 509, 508, 3, 2, 2, 2, 510, 513, 3, 2, 2, 2, 511, 509, 3, 2, 2, 2, 511,
	512, 3, 2, 2, 2, 512, 514, 3, 2, 2, 2, 513, 511, 3, 2, 2, 2, 514, 516,
	5, 48, 25, 2, 515, 504, 3, 2, 2, 2, 515, 511, 3, 2, 2, 2, 515, 516, 3,
	2, 2, 2, 516, 19, 3, 2, 2, 2, 517, 519, 5, 280, 141, 2, 518, 517, 3, 2,
	2, 2, 518, 519, 3, 2, 2, 2, 519, 520, 3, 2, 2, 2, 520, 524, 7, 70, 2, 2,
	521, 523, 7, 7, 2, 2, 522, 521, 3, 2, 2, 2, 523, 526, 3, 2, 2, 2, 524,
	522, 3, 2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 528, 3, 2, 2, 2, 526, 524,
	3, 2, 2, 2, 527, 518, 3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528, 529, 3, 2,
	2, 2, 529, 530, 5, 22, 12, 2, 530, 21, 3, 2, 2, 2, 531, 535, 7, 11, 2,
	2, 532, 534, 7, 7, 2, 2, 533, 532, 3, 2, 2, 2, 534, 537, 3, 2, 2, 2, 535,
	533, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 558, 3, 2, 2, 2, 537, 535,
	3, 2, 2, 2, 538, 555, 5, 24, 13, 2, 539, 541, 7, 7, 2, 2, 540, 539, 3,
	2, 2, 2, 541, 544, 3, 2, 2, 2, 542, 540, 3, 2, 2, 2, 542, 543, 3, 2, 2,
	2, 543, 545, 3, 2, 2, 2, 544, 542, 3, 2, 2, 2, 545, 549, 7, 10, 2, 2, 546,
	548, 7, 7, 2, 2, 547, 546, 3, 2, 2, 2, 548, 551, 3, 2, 2, 2, 549, 547,
	3, 2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 552, 3, 2, 2, 2, 551, 549, 3, 2,
	2, 2, 552, 554, 5, 24, 13, 2, 553, 542, 3, 2, 2, 2, 554, 557, 3, 2, 2,
	2, 555, 553, 3, 2, 2, 2, 555, 556, 3, 2, 2, 2, 556, 559, 3, 2, 2, 2, 557,
	555, 3, 2, 2, 2, 558, 538, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 563,
	3, 2, 2, 2, 560, 562, 7, 7, 2, 2, 561, 560, 3, 2, 2, 2, 562, 565, 3, 2,
	2, 2, 563, 561, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 567, 3, 2, 2, 2,
	565, 563, 3, 2, 2, 2, 566, 568, 7, 10, 2, 2, 567, 566, 3, 2, 2, 2, 567,
	568, 3, 2, 2, 2, 568, 569, 3, 2, 2, 2, 569, 570, 7, 12, 2, 2, 570, 23,
	3, 2, 2, 2, 571, 573, 5, 280, 141, 2, 572, 571, 3, 2, 2, 2, 572, 573, 3,
	2, 2, 2, 573, 575, 3, 2, 2, 2, 574, 576, 9, 3, 2, 2, 575, 574, 3, 2, 2,
	2, 575, 576, 3, 2, 2, 2, 576, 580, 3, 2, 2, 2, 577, 579, 7, 7, 2, 2, 578,
	577, 3, 2, 2, 2, 579, 582, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 580, 581,
	3, 2, 2, 2, 581, 583, 3, 2, 2, 2, 582, 580, 3, 2, 2, 2, 583, 584, 5, 316,
	159, 2, 584, 588, 7, 28, 2, 2, 585, 587, 7, 7, 2, 2, 586, 585, 3, 2, 2,
	2, 587, 590, 3, 2, 2, 2, 588, 586, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589,
	591, 3, 2, 2, 2, 590, 588, 3, 2, 2, 2, 591, 606, 5, 92, 47, 2, 592, 594,
	7, 7, 2, 2, 593, 592, 3, 2, 2, 2, 594, 597, 3, 2, 2, 2, 595, 593, 3, 2,
	2, 2, 595, 596, 3, 2, 2, 2, 596, 598, 3, 2, 2, 2, 597, 595, 3, 2, 2, 2,
	598, 602, 7, 30, 2, 2, 599, 601, 7, 7, 2, 2, 600, 599, 3, 2, 2, 2, 601,
	604, 3, 2, 2, 2, 602, 600, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 605,
	3, 2, 2, 2, 604, 602, 3, 2, 2, 2, 605, 607, 5, 130, 66, 2, 606, 595, 3,
	2, 2, 2, 606, 607, 3, 2, 2, 2, 607, 25, 3, 2, 2, 2, 608, 625, 5, 28, 15,
	2, 609, 611, 7, 7, 2, 2, 610, 609, 3, 2, 2, 2, 611, 614, 3, 2, 2, 2, 612,
	610, 3, 2, 2, 2, 612, 613, 3, 2, 2, 2, 613, 615, 3, 2, 2, 2, 614, 612,
	3, 2, 2, 2, 615, 619, 7, 10, 2, 2, 616, 618, 7, 7, 2, 2, 617, 616, 3, 2,
	2, 2, 618, 621, 3, 2, 2, 2, 619, 617, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2,
	620, 622, 3, 2, 2, 2, 621, 619, 3, 2, 2, 2, 622, 624, 5, 28, 15, 2, 623,
	612, 3, 2, 2, 2, 624, 627, 3, 2, 2, 2, 625, 623, 3, 2, 2, 2, 625, 626,
	3, 2, 2, 2, 626, 27, 3, 2, 2, 2, 627, 625, 3, 2, 2, 2, 628, 630, 5, 306,
	154, 2, 629, 628, 3, 2, 2, 2, 630, 633, 3, 2, 2, 2, 631, 629, 3, 2, 2,
	2, 631, 632, 3, 2, 2, 2, 632, 637, 3, 2, 2, 2, 633, 631, 3, 2, 2, 2, 634,
	636, 7, 7, 2, 2, 635, 634, 3, 2, 2, 2, 636, 639, 3, 2, 2, 2, 637, 635,
	3, 2, 2, 2, 637, 638, 3, 2, 2, 2, 638, 640, 3, 2, 2, 2, 639, 637, 3, 2,
	2, 2, 640, 641, 5, 30, 16, 2, 641, 29, 3, 2, 2, 2, 642, 647, 5, 32, 17,
	2, 643, 647, 5, 34, 18, 2, 644, 647, 5, 108, 55, 2, 645, 647, 5, 104, 53,
	2, 646, 642, 3, 2, 2, 2, 646, 643, 3, 2, 2, 2, 646, 644, 3, 2, 2, 2, 646,
	645, 3, 2, 2, 2, 647, 31, 3, 2, 2, 2, 648, 649, 5, 108, 55, 2, 649, 650,
	5, 176, 89, 2, 650, 33, 3, 2, 2, 2, 651, 654, 5, 108, 55, 2, 652, 654,
	5, 104, 53, 2, 653, 651, 3, 2, 2, 2, 653, 652, 3, 2, 2, 2, 654, 658, 3,
	2, 2, 2, 655, 657, 7, 7, 2, 2, 656, 655, 3, 2, 2, 2, 657, 660, 3, 2, 2,
	2, 658, 656, 3, 2, 2, 2, 658, 659, 3, 2, 2, 2, 659, 661, 3, 2, 2, 2, 660,
	658, 3, 2, 2, 2, 661, 665, 7, 71, 2, 2, 662, 664, 7, 7, 2, 2, 663, 662,
	3, 2, 2, 2, 664, 667, 3, 2, 2, 2, 665, 663, 3, 2, 2, 2, 665, 666, 3, 2,
	2, 2, 666, 668, 3, 2, 2, 2, 667, 665, 3, 2, 2, 2, 668, 669, 5, 130, 66,
	2, 669, 35, 3, 2, 2, 2, 670, 674, 7, 15, 2, 2, 671, 673, 7, 7, 2, 2, 672,
	671, 3, 2, 2, 2, 673, 676, 3, 2, 2, 2, 674, 672, 3, 2, 2, 2, 674, 675,
	3, 2, 2, 2, 675, 677, 3, 2, 2, 2, 676, 674, 3, 2, 2, 2, 677, 681, 5, 38,
	20, 2, 678, 680, 7, 7, 2, 2, 679, 678, 3, 2, 2, 2, 680, 683, 3, 2, 2, 2,
	681, 679, 3, 2, 2, 2, 681, 682, 3, 2, 2, 2, 682, 684, 3, 2, 2, 2, 683,
	681, 3, 2, 2, 2, 684, 685, 7, 16, 2, 2, 685, 37, 3, 2, 2, 2, 686, 688,
	5, 40, 21, 2, 687, 689, 5, 332, 167, 2, 688, 687, 3, 2, 2, 2, 688, 689,
	3, 2, 2, 2, 689, 691, 3, 2, 2, 2, 690, 686, 3, 2, 2, 2, 691, 694, 3, 2,
	2, 2, 692, 690, 3, 2, 2, 2, 692, 693, 3, 2, 2, 2, 693, 39, 3, 2, 2, 2,
	694, 692, 3, 2, 2, 2, 695, 700, 5, 126, 64, 2, 696, 700, 5, 68, 35, 2,
	697, 700, 5, 42, 22, 2, 698, 700, 5, 44, 23, 2, 699, 695, 3, 2, 2, 2, 699,
	696, 3, 2, 2, 2, 699, 697, 3, 2, 2, 2, 699, 698, 3, 2, 2, 2, 700, 41, 3,
	2, 2, 2, 701, 705, 7, 73, 2, 2, 702, 704, 7, 7, 2, 2, 703, 702, 3, 2, 2,
	2, 704, 707, 3, 2, 2, 2, 705, 703, 3, 2, 2, 2, 705, 706, 3, 2, 2, 2, 706,
	708, 3, 2, 2, 2, 707, 705, 3, 2, 2, 2, 708, 709, 5, 120, 61, 2, 709, 43,
	3, 2, 2, 2, 710, 712, 5, 280, 141, 2, 711, 710, 3, 2, 2, 2, 711, 712, 3,
	2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 717, 7, 70, 2, 2, 714, 716, 7, 7, 2,
	2, 715, 714, 3, 2, 2, 2, 716, 719, 3, 2, 2, 2, 717, 715, 3, 2, 2, 2, 717,
	718, 3, 2, 2, 2, 718, 720, 3, 2, 2, 2, 719, 717, 3, 2, 2, 2, 720, 735,
	5, 56, 29, 2, 721, 723, 7, 7, 2, 2, 722, 721, 3, 2, 2, 2, 723, 726, 3,
	2, 2, 2, 724, 722, 3, 2, 2, 2, 724, 725, 3, 2, 2, 2, 725, 727, 3, 2, 2,
	2, 726, 724, 3, 2, 2, 2, 727, 731, 7, 28, 2, 2, 728, 730, 7, 7, 2, 2, 729,
	728, 3, 2, 2, 2, 730, 733, 3, 2, 2, 2, 731, 729, 3, 2, 2, 2, 731, 732,
	3, 2, 2, 2, 732, 734, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 734, 736, 5, 46,
	24, 2, 735, 724, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 740, 3, 2, 2, 2,
	737, 739, 7, 7, 2, 2, 738, 737, 3, 2, 2, 2, 739, 742, 3, 2, 2, 2, 740,
	738, 3, 2, 2, 2, 740, 741, 3, 2, 2, 2, 741, 744, 3, 2, 2, 2, 742, 740,
	3, 2, 2, 2, 743, 745, 5, 120, 61, 2, 744, 743, 3, 2, 2, 2, 744, 745, 3,
	2, 2, 2, 745, 45, 3, 2, 2, 2, 746, 750, 7, 74, 2, 2, 747, 749, 7, 7, 2,
	2, 748, 747, 3, 2, 2, 2, 749, 752, 3, 2, 2, 2, 750, 748, 3, 2, 2, 2, 750,
	751, 3, 2, 2, 2, 751, 753, 3, 2, 2, 2, 752, 750, 3, 2, 2, 2, 753, 763,
	5, 176, 89, 2, 754, 758, 7, 75, 2, 2, 755, 757, 7, 7, 2, 2, 756, 755, 3,
	2, 2, 2, 757, 760, 3, 2, 2, 2, 758, 756, 3, 2, 2, 2, 758, 759, 3, 2, 2,
	2, 759, 761, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2, 761, 763, 5, 176, 89, 2,
	762, 746, 3, 2, 2, 2, 762, 754, 3, 2, 2, 2, 763, 47, 3, 2, 2, 2, 764, 768,
	7, 15, 2, 2, 765, 767, 7, 7, 2, 2, 766, 765, 3, 2, 2, 2, 767, 770, 3, 2,
	2, 2, 768, 766, 3, 2, 2, 2, 768, 769, 3, 2, 2, 2, 769, 772, 3, 2, 2, 2,
	770, 768, 3, 2, 2, 2, 771, 773, 5, 50, 26, 2, 772, 771, 3, 2, 2, 2, 772,
	773, 3, 2, 2, 2, 773, 788, 3, 2, 2, 2, 774, 776, 7, 7, 2, 2, 775, 774,
	3, 2, 2, 2, 776, 779, 3, 2, 2, 2, 777, 775, 3, 2, 2, 2, 777, 778, 3, 2,
	2, 2, 778, 780, 3, 2, 2, 2, 779, 777, 3, 2, 2, 2, 780, 784, 7, 29, 2, 2,
	781, 783, 7, 7, 2, 2, 782, 781, 3, 2, 2, 2, 783, 786, 3, 2, 2, 2, 784,
	782, 3, 2, 2, 2, 784, 785, 3, 2, 2, 2, 785, 787, 3, 2, 2, 2, 786, 784,
	3, 2, 2, 2, 787, 789, 5, 38, 20, 2, 788, 777, 3, 2, 2, 2, 788, 789, 3,
	2, 2, 2, 789, 793, 3, 2, 2, 2, 790, 792, 7, 7, 2, 2, 791, 790, 3, 2, 2,
	2, 792, 795, 3, 2, 2, 2, 793, 791, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794,
	796, 3, 2, 2, 2, 795, 793, 3, 2, 2, 2, 796, 797, 7, 16, 2, 2, 797, 49,
	3, 2, 2, 2, 798, 815, 5, 52, 27, 2, 799, 801, 7, 7, 2, 2, 800, 799, 3,
	2, 2, 2, 801, 804, 3, 2, 2, 2, 802, 800, 3, 2, 2, 2, 802, 803, 3, 2, 2,
	2, 803, 805, 3, 2, 2, 2, 804, 802, 3, 2, 2, 2, 805, 809, 7, 10, 2, 2, 806,
	808, 7, 7, 2, 2, 807, 806, 3, 2, 2, 2, 808, 811, 3, 2, 2, 2, 809, 807,
	3, 2, 2, 2, 809, 810, 3, 2, 2, 2, 810, 812, 3, 2, 2, 2, 811, 809, 3, 2,
	2, 2, 812, 814, 5, 52, 27, 2, 813, 802, 3, 2, 2, 2, 814, 817, 3, 2, 2,
	2, 815, 813, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 821, 3, 2, 2, 2, 817,
	815, 3, 2, 2, 2, 818, 820, 7, 7, 2, 2, 819, 818, 3, 2, 2, 2, 820, 823,
	3, 2, 2, 2, 821, 819, 3, 2, 2, 2, 821, 822, 3, 2, 2, 2, 822, 825, 3, 2,
	2, 2, 823, 821, 3, 2, 2, 2, 824, 826, 7, 10, 2, 2, 825, 824, 3, 2, 2, 2,
	825, 826, 3, 2, 2, 2, 826, 51, 3, 2, 2, 2, 827, 831, 5, 280, 141, 2, 828,
	830, 7, 7, 2, 2, 829, 828, 3, 2, 2, 2, 830, 833, 3, 2, 2, 2, 831, 829,
	3, 2, 2, 2, 831, 832, 3, 2, 2, 2, 832, 835, 3, 2, 2, 2, 833, 831, 3, 2,
	2, 2, 834, 827, 3, 2, 2, 2, 834, 835, 3, 2, 2, 2, 835, 836, 3, 2, 2, 2,
	836, 844, 5, 316, 159, 2, 837, 839, 7, 7, 2, 2, 838, 837, 3, 2, 2, 2, 839,
	842, 3, 2, 2, 2, 840, 838, 3, 2, 2, 2, 840, 841, 3, 2, 2, 2, 841, 843,
	3, 2, 2, 2, 842, 840, 3, 2, 2, 2, 843, 845, 5, 176, 89, 2, 844, 840, 3,
	2, 2, 2, 844, 845, 3, 2, 2, 2, 845, 853, 3, 2, 2, 2, 846, 848, 7, 7, 2,
	2, 847, 846, 3, 2, 2, 2, 848, 851, 3, 2, 2, 2, 849, 847, 3, 2, 2, 2, 849,
	850, 3, 2, 2, 2, 850, 852, 3, 2, 2, 2, 851, 849, 3, 2, 2, 2, 852, 854,
	5, 36, 19, 2, 853, 849, 3, 2, 2, 2, 853, 854, 3, 2, 2, 2, 854, 53, 3, 2,
	2, 2, 855, 857, 5, 280, 141, 2, 856, 855, 3, 2, 2, 2, 856, 857, 3, 2, 2,
	2, 857, 858, 3, 2, 2, 2, 858, 866, 7, 65, 2, 2, 859, 861, 7, 7, 2, 2, 860,
	859, 3, 2, 2, 2, 861, 864, 3, 2, 2, 2, 862, 860, 3, 2, 2, 2, 862, 863,
	3, 2, 2, 2, 863, 865, 3, 2, 2, 2, 864, 862, 3, 2, 2, 2, 865, 867, 5, 84,
	43, 2, 866, 862, 3, 2, 2, 2, 866, 867, 3, 2, 2, 2, 867, 883, 3, 2, 2, 2,
	868, 870, 7, 7, 2, 2, 869, 868, 3, 2, 2, 2, 870, 873, 3, 2, 2, 2, 871,
	869, 3, 2, 2, 2, 871, 872, 3, 2, 2, 2, 872, 874, 3, 2, 2, 2, 873, 871,
	3, 2, 2, 2, 874, 878, 5, 106, 54, 2, 875, 877, 7, 7, 2, 2, 876, 875, 3,
	2, 2, 2, 877, 880, 3, 2, 2, 2, 878, 876, 3, 2, 2, 2, 878, 879, 3, 2, 2,
	2, 879, 881, 3, 2, 2, 2, 880, 878, 3, 2, 2, 2, 881, 882, 7, 9, 2, 2, 882,
	884, 3, 2, 2, 2, 883, 871, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 888,
	3, 2, 2, 2, 885, 887, 7, 7, 2, 2, 886, 885, 3, 2, 2, 2, 887, 890, 3, 2,
	2, 2, 888, 886, 3, 2, 2, 2, 888, 889, 3, 2, 2, 2, 889, 891, 3, 2, 2, 2,
	890, 888, 3, 2, 2, 2, 891, 895, 5, 316, 159, 2, 892, 894, 7, 7, 2, 2, 893,
	892, 3, 2, 2, 2, 894, 897, 3, 2, 2, 2, 895, 893, 3, 2, 2, 2, 895, 896,
	3, 2, 2, 2, 896, 898, 3, 2, 2, 2, 897, 895, 3, 2, 2, 2, 898, 913, 5, 56,
	29, 2, 899, 901, 7, 7, 2, 2, 900, 899, 3, 2, 2, 2, 901, 904, 3, 2, 2, 2,
	902, 900, 3, 2, 2, 2, 902, 903, 3, 2, 2, 2, 903, 905, 3, 2, 2, 2, 904,
	902, 3, 2, 2, 2, 905, 909, 7, 28, 2, 2, 906, 908, 7, 7, 2, 2, 907, 906,
	3, 2, 2, 2, 908, 911, 3, 2, 2, 2, 909, 907, 3, 2, 2, 2, 909, 910, 3, 2,
	2, 2, 910, 912, 3, 2, 2, 2, 911, 909, 3, 2, 2, 2, 912, 914, 5, 92, 47,
	2, 913, 902, 3, 2, 2, 2, 913, 914, 3, 2, 2, 2, 914, 922, 3, 2, 2, 2, 915,
	917, 7, 7, 2, 2, 916, 915, 3, 2, 2, 2, 917, 920, 3, 2, 2, 2, 918, 916,
	3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 921, 3, 2, 2, 2, 920, 918, 3, 2,
	2, 2, 921, 923, 5, 116, 59, 2, 922, 918, 3, 2, 2, 2, 922, 923, 3, 2, 2,
	2, 923, 931, 3, 2, 2, 2, 924, 926, 7, 7, 2, 2, 925, 924, 3, 2, 2, 2, 926,
	929, 3, 2, 2, 2, 927, 925, 3, 2, 2, 2, 927, 928, 3, 2, 2, 2, 928, 930,
	3, 2, 2, 2, 929, 927, 3, 2, 2, 2, 930, 932, 5, 64, 33, 2, 931, 927, 3,
	2, 2, 2, 931, 932, 3, 2, 2, 2, 932, 55, 3, 2, 2, 2, 933, 937, 7, 11, 2,
	2, 934, 936, 7, 7, 2, 2, 935, 934, 3, 2, 2, 2, 936, 939, 3, 2, 2, 2, 937,
	935, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 960, 3, 2, 2, 2, 939, 937,
	3, 2, 2, 2, 940, 957, 5, 58, 30, 2, 941, 943, 7, 7, 2, 2, 942, 941, 3,
	2, 2, 2, 943, 946, 3, 2, 2, 2, 944, 942, 3, 2, 2, 2, 944, 945, 3, 2, 2,
	2, 945, 947, 3, 2, 2, 2, 946, 944, 3, 2, 2, 2, 947, 951, 7, 10, 2, 2, 948,
	950, 7, 7, 2, 2, 949, 948, 3, 2, 2, 2, 950, 953, 3, 2, 2, 2, 951, 949,
	3, 2, 2, 2, 951, 952, 3, 2, 2, 2, 952, 954, 3, 2, 2, 2, 953, 951, 3, 2,
	2, 2, 954, 956, 5, 58, 30, 2, 955, 944, 3, 2, 2, 2, 956, 959, 3, 2, 2,
	2, 957, 955, 3, 2, 2, 2, 957, 958, 3, 2, 2, 2, 958, 961, 3, 2, 2, 2, 959,
	957, 3, 2, 2, 2, 960, 940, 3, 2, 2, 2, 960, 961, 3, 2, 2, 2, 961, 965,
	3, 2, 2, 2, 962, 964, 7, 7, 2, 2, 963, 962, 3, 2, 2, 2, 964, 967, 3, 2,
	2, 2, 965, 963, 3, 2, 2, 2, 965, 966, 3, 2, 2, 2, 966, 969, 3, 2, 2, 2,
	967, 965, 3, 2, 2, 2, 968, 970, 7, 10, 2, 2, 969, 968, 3, 2, 2, 2, 969,
	970, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 972, 7, 12, 2, 2, 972, 57,
	3, 2, 2, 2, 973, 975, 5, 280, 141, 2, 974, 973, 3, 2, 2, 2, 974, 975, 3,
	2, 2, 2, 975, 976, 3, 2, 2, 2, 976, 991, 5, 60, 31, 2, 977, 979, 7, 7,
	2, 2, 978, 977, 3, 2, 2, 2, 979, 982, 3, 2, 2, 2, 980, 978, 3, 2, 2, 2,
	980, 981, 3, 2, 2, 2, 981, 983, 3, 2, 2, 2, 982, 980, 3, 2, 2, 2, 983,
	987, 7, 30, 2, 2, 984, 986, 7, 7, 2, 2, 985, 984, 3, 2, 2, 2, 986, 989,
	3, 2, 2, 2, 987, 985, 3, 2, 2, 2, 987, 988, 3, 2, 2, 2, 988, 990, 3, 2,
	2, 2, 989, 987, 3, 2, 2, 2, 990, 992, 5, 130, 66, 2, 991, 980, 3, 2, 2,
	2, 991, 992, 3, 2, 2, 2, 992, 59, 3, 2, 2, 2, 993, 997, 5, 316, 159, 2,
	994, 996, 7, 7, 2, 2, 995, 994, 3, 2, 2, 2, 996, 999, 3, 2, 2, 2, 997,
	995, 3, 2, 2, 2, 997, 998, 3, 2, 2, 2, 998, 1000, 3, 2, 2, 2, 999, 997,
	3, 2, 2, 2, 1000, 1004, 7, 28, 2, 2, 1001, 1003, 7, 7, 2, 2, 1002, 1001,
	3, 2, 2, 2, 1003, 1006, 3, 2, 2, 2, 1004, 1002, 3, 2, 2, 2, 1004, 1005,
	3, 2, 2, 2, 1005, 1007, 3, 2, 2, 2, 1006, 1004, 3, 2, 2, 2, 1007, 1008,
	5, 92, 47, 2, 1008, 61, 3, 2, 2, 2, 1009, 1013, 5, 316, 159, 2, 1010, 1012,
	7, 7, 2, 2, 1011, 1010, 3, 2, 2, 2, 1012, 1015, 3, 2, 2, 2, 1013, 1011,
	3, 2, 2, 2, 1013, 1014, 3, 2, 2, 2, 1014, 1024, 3, 2, 2, 2, 1015, 1013,
	3, 2, 2, 2, 1016, 1020, 7, 28, 2, 2, 1017, 1019, 7, 7, 2, 2, 1018, 1017,
	3, 2, 2, 2, 1019, 1022, 3, 2, 2, 2, 1020, 1018, 3, 2, 2, 2, 1020, 1021,
	3, 2, 2, 2, 1021, 1023, 3, 2, 2, 2, 1022, 1020, 3, 2, 2, 2, 1023, 1025,
	5, 92, 47, 2, 1024, 1016, 3, 2, 2, 2, 1024, 1025, 3, 2, 2, 2, 1025, 63,
	3, 2, 2, 2, 1026, 1036, 5, 120, 61, 2, 1027, 1031, 7, 30, 2, 2, 1028, 1030,
	7, 7, 2, 2, 1029, 1028, 3, 2, 2, 2, 1030, 1033, 3, 2, 2, 2, 1031, 1029,
	3, 2, 2, 2, 1031, 1032, 3, 2, 2, 2, 1032, 1034, 3, 2, 2, 2, 1033, 1031,
	3, 2, 2, 2, 1034, 1036, 5, 130, 66, 2, 1035, 1026, 3, 2, 2, 2, 1035, 1027,
	3, 2, 2, 2, 1036, 65, 3, 2, 2, 2, 1037, 1039, 5, 280, 141, 2, 1038, 1037,
	3, 2, 2, 2, 1038, 1039, 3, 2, 2, 2, 1039, 1040, 3, 2, 2, 2, 1040, 1044,
	7, 66, 2, 2, 1041, 1043, 7, 7, 2, 2, 1042, 1041, 3, 2, 2, 2, 1043, 1046,
	3, 2, 2, 2, 1044, 1042, 3, 2, 2, 2, 1044, 1045, 3, 2, 2, 2, 1045, 1047,
	3, 2, 2, 2, 1046, 1044, 3, 2, 2, 2, 1047, 1062, 5, 316, 159, 2, 1048, 1050,
	7, 7, 2, 2, 1049, 1048, 3, 2, 2, 2, 1050, 1053, 3, 2, 2, 2, 1051, 1049,
	3, 2, 2, 2, 1051, 1052, 3, 2, 2, 2, 1052, 1054, 3, 2, 2, 2, 1053, 1051,
	3, 2, 2, 2, 1054, 1058, 7, 28, 2, 2, 1055, 1057, 7, 7, 2, 2, 1056, 1055,
	3, 2, 2, 2, 1057, 1060, 3, 2, 2, 2, 1058, 1056, 3, 2, 2, 2, 1058, 1059,
	3, 2, 2, 2, 1059, 1061, 3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1061, 1063,
	5, 26, 14, 2, 1062, 1051, 3, 2, 2, 2, 1062, 1063, 3, 2, 2, 2, 1063, 1071,
	3, 2, 2, 2, 1064, 1066, 7, 7, 2, 2, 1065, 1064, 3, 2, 2, 2, 1066, 1069,
	3, 2, 2, 2, 1067, 1065, 3, 2, 2, 2, 1067, 1068, 3, 2, 2, 2, 1068, 1070,
	3, 2, 2, 2, 1069, 1067, 3, 2, 2, 2, 1070, 1072, 5, 36, 19, 2, 1071, 1067,
	3, 2, 2, 2, 1071, 1072, 3, 2, 2, 2, 1072, 67, 3, 2, 2, 2, 1073, 1075, 5,
	280, 141, 2, 1074, 1073, 3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1076,
	3, 2, 2, 2, 1076, 1080, 7, 72, 2, 2, 1077, 1079, 7, 7, 2, 2, 1078, 1077,
	3, 2, 2, 2, 1079, 1082, 3, 2, 2, 2, 1080, 1078, 3, 2, 2, 2, 1080, 1081,
	3, 2, 2, 2, 1081, 1083, 3, 2, 2, 2, 1082, 1080, 3, 2, 2, 2, 1083, 1091,
	7, 66, 2, 2, 1084, 1086, 7, 7, 2, 2, 1085, 1084, 3, 2, 2, 2, 1086, 1089,
	3, 2, 2, 2, 1087, 1085, 3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088, 1090,
	3, 2, 2, 2, 1089, 1087, 3, 2, 2, 2, 1090, 1092, 5, 316, 159, 2, 1091, 1087,
	3, 2, 2, 2, 1091, 1092, 3, 2, 2, 2, 1092, 1107, 3, 2, 2, 2, 1093, 1095,
	7, 7, 2, 2, 1094, 1093, 3, 2, 2, 2, 1095, 1098, 3, 2, 2, 2, 1096, 1094,
	3, 2, 2, 2, 1096, 1097, 3, 2, 2, 2, 1097, 1099, 3, 2, 2, 2, 1098, 1096,
	3, 2, 2, 2, 1099, 1103, 7, 28, 2, 2, 1100, 1102, 7, 7, 2, 2, 1101, 1100,
	3, 2, 2, 2, 1102, 1105, 3, 2, 2, 2, 1103, 1101, 3, 2, 2, 2, 1103, 1104,
	3, 2, 2, 2, 1104, 1106, 3, 2, 2, 2, 1105, 1103, 3, 2, 2, 2, 1106, 1108,
	5, 26, 14, 2, 1107, 1096, 3, 2, 2, 2, 1107, 1108, 3, 2, 2, 2, 1108, 1116,
	3, 2, 2, 2, 1109, 1111, 7, 7, 2, 2, 1110, 1109, 3, 2, 2, 2, 1111, 1114,
	3, 2, 2, 2, 1112, 1110, 3, 2, 2, 2, 1112, 1113, 3, 2, 2, 2, 1113, 1115,
	3, 2, 2, 2, 1114, 1112, 3, 2, 2, 2, 1115, 1117, 5, 36, 19, 2, 1116, 1112,
	3, 2, 2, 2, 1116, 1117, 3, 2, 2, 2, 1117, 69, 3, 2, 2, 2, 1118, 1120, 5,
	280, 141, 2, 1119, 1118, 3, 2, 2, 2, 1119, 1120, 3, 2, 2, 2, 1120, 1121,
	3, 2, 2, 2, 1121, 1129, 9, 3, 2, 2, 1122, 1124, 7, 7, 2, 2, 1123, 1122,
	3, 2, 2, 2, 1124, 1127, 3, 2, 2, 2, 1125, 1123, 3, 2, 2, 2, 1125, 1126,
	3, 2, 2, 2, 1126, 1128, 3, 2, 2, 2, 1127, 1125, 3, 2, 2, 2, 1128, 1130,
	5, 84, 43, 2, 1129, 1125, 3, 2, 2, 2, 1129, 1130, 3, 2, 2, 2, 1130, 1146,
	3, 2, 2, 2, 1131, 1133, 7, 7, 2, 2, 1132, 1131, 3, 2, 2, 2, 1133, 1136,
	3, 2, 2, 2, 1134, 1132, 3, 2, 2, 2, 1134, 1135, 3, 2, 2, 2, 1135, 1137,
	3, 2, 2, 2, 1136, 1134, 3, 2, 2, 2, 1137, 1141, 5, 106, 54, 2, 1138, 1140,
	7, 7, 2, 2, 1139, 1138, 3, 2, 2, 2, 1140, 1143, 3, 2, 2, 2, 1141, 1139,
	3, 2, 2, 2, 1141, 1142, 3, 2, 2, 2, 1142, 1144, 3, 2, 2, 2, 1143, 1141,
	3, 2, 2, 2, 1144, 1145, 7, 9, 2, 2, 1145, 1147, 3, 2, 2, 2, 1146, 1134,
	3, 2, 2, 2, 1146, 1147, 3, 2, 2, 2, 1147, 1151, 3, 2, 2, 2, 1148, 1150,
	7, 7, 2, 2, 1149, 1148, 3, 2, 2, 2, 1150, 1153, 3, 2, 2, 2, 1151, 1149,
	3, 2, 2, 2, 1151, 1152, 3, 2, 2, 2, 1152, 1156, 3, 2, 2, 2, 1153, 1151,
	3, 2, 2, 2, 1154, 1157, 5, 72, 37, 2, 1155, 1157, 5, 74, 38, 2, 1156, 1154,
	3, 2, 2, 2, 1156, 1155, 3, 2, 2, 2, 1157, 1165, 3, 2, 2, 2, 1158, 1160,
	7, 7, 2, 2, 1159, 1158, 3, 2, 2, 2, 1160, 1163, 3, 2, 2, 2, 1161, 1159,
	3, 2, 2, 2, 1161, 1162, 3, 2, 2, 2, 1162, 1164, 3, 2, 2, 2, 1163, 1161,
	3, 2, 2, 2, 1164, 1166, 5, 116, 59, 2, 1165, 1161, 3, 2, 2, 2, 1165, 1166,
	3, 2, 2, 2, 1166, 1184, 3, 2, 2, 2, 1167, 1169, 7, 7, 2, 2, 1168, 1167,
	3, 2, 2, 2, 1169, 1172, 3, 2, 2, 2, 1170, 1168, 3, 2, 2, 2, 1170, 1171,
	3, 2, 2, 2, 1171, 1182, 3, 2, 2, 2, 1172, 1170, 3, 2, 2, 2, 1173, 1177,
	7, 30, 2, 2, 1174, 1176, 7, 7, 2, 2, 1175, 1174, 3, 2, 2, 2, 1176, 1179,
	3, 2, 2, 2, 1177, 1175, 3, 2, 2, 2, 1177, 1178, 3, 2, 2, 2, 1178, 1180,
	3, 2, 2, 2, 1179, 1177, 3, 2, 2, 2, 1180, 1183, 5, 130, 66, 2, 1181, 1183,
	5, 76, 39, 2, 1182, 1173, 3, 2, 2, 2, 1182, 1181, 3, 2, 2, 2, 1183, 1185,
	3, 2, 2, 2, 1184, 1170, 3, 2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185, 1192,
	3, 2, 2, 2, 1186, 1188, 7, 7, 2, 2, 1187, 1186, 3, 2, 2, 2, 1188, 1189,
	3, 2, 2, 2, 1189, 1187, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1191,
	3, 2, 2, 2, 1191, 1193, 7, 29, 2, 2, 1192, 1187, 3, 2, 2, 2, 1192, 1193,
	3, 2, 2, 2, 1193, 1197, 3, 2, 2, 2, 1194, 1196, 7, 7, 2, 2, 1195, 1194,
	3, 2, 2, 2, 1196, 1199, 3, 2, 2, 2, 1197, 1195, 3, 2, 2, 2, 1197, 1198,
	3, 2, 2, 2, 1198, 1230, 3, 2, 2, 2, 1199, 1197, 3, 2, 2, 2, 1200, 1202,
	5, 78, 40, 2, 1201, 1200, 3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2, 1202, 1213,
	3, 2, 2, 2, 1203, 1205, 7, 7, 2, 2, 1204, 1203, 3, 2, 2, 2, 1205, 1208,
	3, 2, 2, 2, 1206, 1204, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207, 1210,
	3, 2, 2, 2, 1208, 1206, 3, 2, 2, 2, 1209, 1211, 5, 330, 166, 2, 1210, 1209,
	3, 2, 2, 2, 1210, 1211, 3, 2, 2, 2, 1211, 1212, 3, 2, 2, 2, 1212, 1214,
	5, 80, 41, 2, 1213, 1206, 3, 2, 2, 2, 1213, 1214, 3, 2, 2, 2, 1214, 1231,
	3, 2, 2, 2, 1215, 1217, 5, 80, 41, 2, 1216, 1215, 3, 2, 2, 2, 1216, 1217,
	3, 2, 2, 2, 1217, 1228, 3, 2, 2, 2, 1218, 1220, 7, 7, 2, 2, 1219, 1218,
	3, 2, 2, 2, 1220, 1223, 3, 2, 2, 2, 1221, 1219, 3, 2, 2, 2, 1221, 1222,
	3, 2, 2, 2, 1222, 1225, 3, 2, 2, 2, 1223, 1221, 3, 2, 2, 2, 1224, 1226,
	5, 330, 166, 2, 1225, 1224, 3, 2, 2, 2, 1225, 1226, 3, 2, 2, 2, 1226, 1227,
	3, 2, 2, 2, 1227, 1229, 5, 78, 40, 2, 1228, 1221, 3, 2, 2, 2, 1228, 1229,
	3, 2, 2, 2, 1229, 1231, 3, 2, 2, 2, 1230, 1201, 3, 2, 2, 2, 1230, 1216,
	3, 2, 2, 2, 1231, 71, 3, 2, 2, 2, 1232, 1236, 7, 11, 2, 2, 1233, 1235,
	7, 7, 2, 2, 1234, 1233, 3, 2, 2, 2, 1235, 1238, 3, 2, 2, 2, 1236, 1234,
	3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237, 1239, 3, 2, 2, 2, 1238, 1236,
	3, 2, 2, 2, 1239, 1256, 5, 74, 38, 2, 1240, 1242, 7, 7, 2, 2, 1241, 1240,
	3, 2, 2, 2, 1242, 1245, 3, 2, 2, 2, 1243, 1241, 3, 2, 2, 2, 1243, 1244,
	3, 2, 2, 2, 1244, 1246, 3, 2, 2, 2, 1245, 1243, 3, 2, 2, 2, 1246, 1250,
	7, 10, 2, 2, 1247, 1249, 7, 7, 2, 2, 1248, 1247, 3, 2, 2, 2, 1249, 1252,
	3, 2, 2, 2, 1250, 1248, 3, 2, 2, 2, 1250, 1251, 3, 2, 2, 2, 1251, 1253,
	3, 2, 2, 2, 1252, 1250, 3, 2, 2, 2, 1253, 1255, 5, 74, 38, 2, 1254, 1243,
	3, 2, 2, 2, 1255, 1258, 3, 2, 2, 2, 1256, 1254, 3, 2, 2, 2, 1256, 1257,
	3, 2, 2, 2, 1257, 1262, 3, 2, 2, 2, 1258, 1256, 3, 2, 2, 2, 1259, 1261,
	7, 7, 2, 2, 1260, 1259, 3, 2, 2, 2, 1261, 1264, 3, 2, 2, 2, 1262, 1260,
	3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263, 1265, 3, 2, 2, 2, 1264, 1262,
	3, 2, 2, 2, 1265, 1266, 7, 12, 2, 2, 1266, 73, 3, 2, 2, 2, 1267, 1269,
	5, 306, 154, 2, 1268, 1267, 3, 2, 2, 2, 1269, 1272, 3, 2, 2, 2, 1270, 1268,
	3, 2, 2, 2, 1270, 1271, 3, 2, 2, 2, 1271, 1276, 3, 2, 2, 2, 1272, 1270,
	3, 2, 2, 2, 1273, 1275, 7, 7, 2, 2, 1274, 1273, 3, 2, 2, 2, 1275, 1278,
	3, 2, 2, 2, 1276, 1274, 3, 2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 1279,
	3, 2, 2, 2, 1278, 1276, 3, 2, 2, 2, 1279, 1294, 5, 316, 159, 2, 1280, 1282,
	7, 7, 2, 2, 1281, 1280, 3, 2, 2, 2, 1282, 1285, 3, 2, 2, 2, 1283, 1281,
	3, 2, 2, 2, 1283, 1284, 3, 2, 2, 2, 1284, 1286, 3, 2, 2, 2, 1285, 1283,
	3, 2, 2, 2, 1286, 1290, 7, 28, 2, 2, 1287, 1289, 7, 7, 2, 2, 1288, 1287,
	3, 2, 2, 2, 1289, 1292, 3, 2, 2, 2, 1290, 1288, 3, 2, 2, 2, 1290, 1291,
	3, 2, 2, 2, 1291, 1293, 3, 2, 2, 2, 1292, 1290, 3, 2, 2, 2, 1293, 1295,
	5, 92, 47, 2, 1294, 1283, 3, 2, 2, 2, 1294, 1295, 3, 2, 2, 2, 1295, 75,
	3, 2, 2, 2, 1296, 1300, 7, 71, 2, 2, 1297, 1299, 7, 7, 2, 2, 1298, 1297,
	3, 2, 2, 2, 1299, 1302, 3, 2, 2, 2, 1300, 1298, 3, 2, 2, 2, 1300, 1301,
	3, 2, 2, 2, 1301, 1303, 3, 2, 2, 2, 1302, 1300, 3, 2, 2, 2, 1303, 1304,
	5, 130, 66, 2, 1304, 77, 3, 2, 2, 2, 1305, 1307, 5, 280, 141, 2, 1306,
	1305, 3, 2, 2, 2, 1306, 1307, 3, 2, 2, 2, 1307, 1308, 3, 2, 2, 2, 1308,
	1351, 7, 97, 2, 2, 1309, 1311, 5, 280, 141, 2, 1310, 1309, 3, 2, 2, 2,
	1310, 1311, 3, 2, 2, 2, 1311, 1312, 3, 2, 2, 2, 1312, 1316, 7, 97, 2, 2,
	1313, 1315, 7, 7, 2, 2, 1314, 1313, 3, 2, 2, 2, 1315, 1318, 3, 2, 2, 2,
	1316, 1314, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 1319, 3, 2, 2, 2,
	1318, 1316, 3, 2, 2, 2, 1319, 1323, 7, 11, 2, 2, 1320, 1322, 7, 7, 2, 2,
	1321, 1320, 3, 2, 2, 2, 1322, 1325, 3, 2, 2, 2, 1323, 1321, 3, 2, 2, 2,
	1323, 1324, 3, 2, 2, 2, 1324, 1326, 3, 2, 2, 2, 1325, 1323, 3, 2, 2, 2,
	1326, 1341, 7, 12, 2, 2, 1327, 1329, 7, 7, 2, 2, 1328, 1327, 3, 2, 2, 2,
	1329, 1332, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2, 1330, 1331, 3, 2, 2, 2,
	1331, 1333, 3, 2, 2, 2, 1332, 1330, 3, 2, 2, 2, 1333, 1337, 7, 28, 2, 2,
	1334, 1336, 7, 7, 2, 2, 1335, 1334, 3, 2, 2, 2, 1336, 1339, 3, 2, 2, 2,
	1337, 1335, 3, 2, 2, 2, 1337, 1338, 3, 2, 2, 2, 1338, 1340, 3, 2, 2, 2,
	1339, 1337, 3, 2, 2, 2, 1340, 1342, 5, 92, 47, 2, 1341, 1330, 3, 2, 2,
	2, 1341, 1342, 3, 2, 2, 2, 1342, 1346, 3, 2, 2, 2, 1343, 1345, 7, 7, 2,
	2, 1344, 1343, 3, 2, 2, 2, 1345, 1348, 3, 2, 2, 2, 1346, 1344, 3, 2, 2,
	2, 1346, 1347, 3, 2, 2, 2, 1347, 1349, 3, 2, 2, 2, 1348, 1346, 3, 2, 2,
	2, 1349, 1351, 5, 64, 33, 2, 1350, 1306, 3, 2, 2, 2, 1350, 1310, 3, 2,
	2, 2, 1351, 79, 3, 2, 2, 2, 1352, 1354, 5, 280, 141, 2, 1353, 1352, 3,
	2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354, 1355, 3, 2, 2, 2, 1355, 1401, 7,
	98, 2, 2, 1356, 1358, 5, 280, 141, 2, 1357, 1356, 3, 2, 2, 2, 1357, 1358,
	3, 2, 2, 2, 1358, 1359, 3, 2, 2, 2, 1359, 1363, 7, 98, 2, 2, 1360, 1362,
	7, 7, 2, 2, 1361, 1360, 3, 2, 2, 2, 1362, 1365, 3, 2, 2, 2, 1363, 1361,
	3, 2, 2, 2, 1363, 1364, 3, 2, 2, 2, 1364, 1366, 3, 2, 2, 2, 1365, 1363,
	3, 2, 2, 2, 1366, 1371, 7, 11, 2, 2, 1367, 1370, 5, 306, 154, 2, 1368,
	1370, 5, 298, 150, 2, 1369, 1367, 3, 2, 2, 2, 1369, 1368, 3, 2, 2, 2, 1370,
	1373, 3, 2, 2, 2, 1371, 1369, 3, 2, 2, 2, 1371, 1372, 3, 2, 2, 2, 1372,
	1374, 3, 2, 2, 2, 1373, 1371, 3, 2, 2, 2, 1374, 1375, 5, 62, 32, 2, 1375,
	1390, 7, 12, 2, 2, 1376, 1378, 7, 7, 2, 2, 1377, 1376, 3, 2, 2, 2, 1378,
	1381, 3, 2, 2, 2, 1379, 1377, 3, 2, 2, 2, 1379, 1380, 3, 2, 2, 2, 1380,
	1382, 3, 2, 2, 2, 1381, 1379, 3, 2, 2, 2, 1382, 1386, 7, 28, 2, 2, 1383,
	1385, 7, 7, 2, 2, 1384, 1383, 3, 2, 2, 2, 1385, 1388, 3, 2, 2, 2, 1386,
	1384, 3, 2, 2, 2, 1386, 1387, 3, 2, 2, 2, 1387, 1389, 3, 2, 2, 2, 1388,
	1386, 3, 2, 2, 2, 1389, 1391, 5, 92, 47, 2, 1390, 1379, 3, 2, 2, 2, 1390,
	1391, 3, 2, 2, 2, 1391, 1395, 3, 2, 2, 2, 1392, 1394, 7, 7, 2, 2, 1393,
	1392, 3, 2, 2, 2, 1394, 1397, 3, 2, 2, 2, 1395, 1393, 3, 2, 2, 2, 1395,
	1396, 3, 2, 2, 2, 1396, 1398, 3, 2, 2, 2, 1397, 1395, 3, 2, 2, 2, 1398,
	1399, 5, 64, 33, 2, 1399, 1401, 3, 2, 2, 2, 1400, 1353, 3, 2, 2, 2, 1400,
	1357, 3, 2, 2, 2, 1401, 81, 3, 2, 2, 2, 1402, 1404, 5, 280, 141, 2, 1403,
	1402, 3, 2, 2, 2, 1403, 1404, 3, 2, 2, 2, 1404, 1405, 3, 2, 2, 2, 1405,
	1409, 7, 69, 2, 2, 1406, 1408, 7, 7, 2, 2, 1407, 1406, 3, 2, 2, 2, 1408,
	1411, 3, 2, 2, 2, 1409, 1407, 3, 2, 2, 2, 1409, 1410, 3, 2, 2, 2, 1410,
	1412, 3, 2, 2, 2, 1411, 1409, 3, 2, 2, 2, 1412, 1420, 5, 316, 159, 2, 1413,
	1415, 7, 7, 2, 2, 1414, 1413, 3, 2, 2, 2, 1415, 1418, 3, 2, 2, 2, 1416,
	1414, 3, 2, 2, 2, 1416, 1417, 3, 2, 2, 2, 1417, 1419, 3, 2, 2, 2, 1418,
	1416, 3, 2, 2, 2, 1419, 1421, 5, 84, 43, 2, 1420, 1416, 3, 2, 2, 2, 1420,
	1421, 3, 2, 2, 2, 1421, 1425, 3, 2, 2, 2, 1422, 1424, 7, 7, 2, 2, 1423,
	1422, 3, 2, 2, 2, 1424, 1427, 3, 2, 2, 2, 1425, 1423, 3, 2, 2, 2, 1425,
	1426, 3, 2, 2, 2, 1426, 1428, 3, 2, 2, 2, 1427, 1425, 3, 2, 2, 2, 1428,
	1432, 7, 30, 2, 2, 1429, 1431, 7, 7, 2, 2, 1430, 1429, 3, 2, 2, 2, 1431,
	1434, 3, 2, 2, 2, 1432, 1430, 3, 2, 2, 2, 1432, 1433, 3, 2, 2, 2, 1433,
	1435, 3, 2, 2, 2, 1434, 1432, 3, 2, 2, 2, 1435, 1436, 5, 92, 47, 2, 1436,
	83, 3, 2, 2, 2, 1437, 1441, 7, 46, 2, 2, 1438, 1440, 7, 7, 2, 2, 1439,
	1438, 3, 2, 2, 2, 1440, 1443, 3, 2, 2, 2, 1441, 1439, 3, 2, 2, 2, 1441,
	1442, 3, 2, 2, 2, 1442, 1444, 3, 2, 2, 2, 1443, 1441, 3, 2, 2, 2, 1444,
	1461, 5, 86, 44, 2, 1445, 1447, 7, 7, 2, 2, 1446, 1445, 3, 2, 2, 2, 1447,
	1450, 3, 2, 2, 2, 1448, 1446, 3, 2, 2, 2, 1448, 1449, 3, 2, 2, 2, 1449,
	1451, 3, 2, 2, 2, 1450, 1448, 3, 2, 2, 2, 1451, 1455, 7, 10, 2, 2, 1452,
	1454, 7, 7, 2, 2, 1453, 1452, 3, 2, 2, 2, 1454, 1457, 3, 2, 2, 2, 1455,
	1453, 3, 2, 2, 2, 1455, 1456, 3, 2, 2, 2, 1456, 1458, 3, 2, 2, 2, 1457,
	1455, 3, 2, 2, 2, 1458, 1460, 5, 86, 44, 2, 1459, 1448, 3, 2, 2, 2, 1460,
	1463, 3, 2, 2, 2, 1461, 1459, 3, 2, 2, 2, 1461, 1462, 3, 2, 2, 2, 1462,
	1467, 3, 2, 2, 2, 1463, 1461, 3, 2, 2, 2, 1464, 1466, 7, 7, 2, 2, 1465,
	1464, 3, 2, 2, 2, 1466, 1469, 3, 2, 2, 2, 1467, 1465, 3, 2, 2, 2, 1467,
	1468, 3, 2, 2, 2, 1468, 1471, 3, 2, 2, 2, 1469, 1467, 3, 2, 2, 2, 1470,
	1472, 7, 10, 2, 2, 1471, 1470, 3, 2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472,
	1473, 3, 2, 2, 2, 1473, 1474, 7, 47, 2, 2, 1474, 85, 3, 2, 2, 2, 1475,
	1477, 5, 88, 45, 2, 1476, 1475, 3, 2, 2, 2, 1476, 1477, 3, 2, 2, 2, 1477,
	1481, 3, 2, 2, 2, 1478, 1480, 7, 7, 2, 2, 1479, 1478, 3, 2, 2, 2, 1480,
	1483, 3, 2, 2, 2, 1481, 1479, 3, 2, 2, 2, 1481, 1482, 3, 2, 2, 2, 1482,
	1484, 3, 2, 2, 2, 1483, 1481, 3, 2, 2, 2, 1484, 1499, 5, 316, 159, 2, 1485,
	1487, 7, 7, 2, 2, 1486, 1485, 3, 2, 2, 2, 1487, 1490, 3, 2, 2, 2, 1488,
	1486, 3, 2, 2, 2, 1488, 1489, 3, 2, 2, 2, 1489, 1491, 3, 2, 2, 2, 1490,
	1488, 3, 2, 2, 2, 1491, 1495, 7, 28, 2, 2, 1492, 1494, 7, 7, 2, 2, 1493,
	1492, 3, 2, 2, 2, 1494, 1497, 3, 2, 2, 2, 1495, 1493, 3, 2, 2, 2, 1495,
	1496, 3, 2, 2, 2, 1496, 1498, 3, 2, 2, 2, 1497, 1495, 3, 2, 2, 2, 1498,
	1500, 5, 92, 47, 2, 1499, 1488, 3, 2, 2, 2, 1499, 1500, 3, 2, 2, 2, 1500,
	87, 3, 2, 2, 2, 1501, 1503, 5, 90, 46, 2, 1502, 1501, 3, 2, 2, 2, 1503,
	1504, 3, 2, 2, 2, 1504, 1502, 3, 2, 2, 2, 1504, 1505, 3, 2, 2, 2, 1505,
	89, 3, 2, 2, 2, 1506, 1510, 5, 300, 151, 2, 1507, 1509, 7, 7, 2, 2, 1508,
	1507, 3, 2, 2, 2, 1509, 1512, 3, 2, 2, 2, 1510, 1508, 3, 2, 2, 2, 1510,
	1511, 3, 2, 2, 2, 1511, 1522, 3, 2, 2, 2, 1512, 1510, 3, 2, 2, 2, 1513,
	1517, 5, 290, 146, 2, 1514, 1516, 7, 7, 2, 2, 1515, 1514, 3, 2, 2, 2, 1516,
	1519, 3, 2, 2, 2, 1517, 1515, 3, 2, 2, 2, 1517, 1518, 3, 2, 2, 2, 1518,
	1522, 3, 2, 2, 2, 1519, 1517, 3, 2, 2, 2, 1520, 1522, 5, 306, 154, 2, 1521,
	1506, 3, 2, 2, 2, 1521, 1513, 3, 2, 2, 2, 1521, 1520, 3, 2, 2, 2, 1522,
	91, 3, 2, 2, 2, 1523, 1525, 5, 94, 48, 2, 1524, 1523, 3, 2, 2, 2, 1524,
	1525, 3, 2, 2, 2, 1525, 1530, 3, 2, 2, 2, 1526, 1531, 5, 98, 50, 2, 1527,
	1531, 5, 100, 51, 2, 1528, 1531, 5, 102, 52, 2, 1529, 1531, 5, 104, 53,
	2, 1530, 1526, 3, 2, 2, 2, 1530, 1527, 3, 2, 2, 2, 1530, 1528, 3, 2, 2,
	2, 1530, 1529, 3, 2, 2, 2, 1531, 93, 3, 2, 2, 2, 1532, 1534, 5, 96, 49,
	2, 1533, 1532, 3, 2, 2, 2, 1534, 1535, 3, 2, 2, 2, 1535, 1533, 3, 2, 2,
	2, 1535, 1536, 3, 2, 2, 2, 1536, 95, 3, 2, 2, 2, 1537, 1546, 5, 306, 154,
	2, 1538, 1542, 7, 123, 2, 2, 1539, 1541, 7, 7, 2, 2, 1540, 1539, 3, 2,
	2, 2, 1541, 1544, 3, 2, 2, 2, 1542, 1540, 3, 2, 2, 2, 1542, 1543, 3, 2,
	2, 2, 1543, 1546, 3, 2, 2, 2, 1544, 1542, 3, 2, 2, 2, 1545, 1537, 3, 2,
	2, 2, 1545, 1538, 3, 2, 2, 2, 1546, 97, 3, 2, 2, 2, 1547, 1551, 7, 11,
	2, 2, 1548, 1550, 7, 7, 2, 2, 1549, 1548, 3, 2, 2, 2, 1550, 1553, 3, 2,
	2, 2, 1551, 1549, 3, 2, 2, 2, 1551, 1552, 3, 2, 2, 2, 1552, 1554, 3, 2,
	2, 2, 1553, 1551, 3, 2, 2, 2, 1554, 1558, 5, 92, 47, 2, 1555, 1557, 7,
	7, 2, 2, 1556, 1555, 3, 2, 2, 2, 1557, 1560, 3, 2, 2, 2, 1558, 1556, 3,
	2, 2, 2, 1558, 1559, 3, 2, 2, 2, 1559, 1561, 3, 2, 2, 2, 1560, 1558, 3,
	2, 2, 2, 1561, 1562, 7, 12, 2, 2, 1562, 99, 3, 2, 2, 2, 1563, 1566, 5,
	102, 52, 2, 1564, 1566, 5, 98, 50, 2, 1565, 1563, 3, 2, 2, 2, 1565, 1564,
	3, 2, 2, 2, 1566, 1570, 3, 2, 2, 2, 1567, 1569, 7, 7, 2, 2, 1568, 1567,
	3, 2, 2, 2, 1569, 1572, 3, 2, 2, 2, 1570, 1568, 3, 2, 2, 2, 1570, 1571,
	3, 2, 2, 2, 1571, 1574, 3, 2, 2, 2, 1572, 1570, 3, 2, 2, 2, 1573, 1575,
	5, 322, 162, 2, 1574, 1573, 3, 2, 2, 2, 1575, 1576, 3, 2, 2, 2, 1576, 1574,
	3, 2, 2, 2, 1576, 1577, 3, 2, 2, 2, 1577, 101, 3, 2, 2, 2, 1578, 1581,
	5, 108, 55, 2, 1579, 1581, 7, 99, 2, 2, 1580, 1578, 3, 2, 2, 2, 1580, 1579,
	3, 2, 2, 2, 1581, 103, 3, 2, 2, 2, 1582, 1586, 5, 106, 54, 2, 1583, 1585,
	7, 7, 2, 2, 1584, 1583, 3, 2, 2, 2, 1585, 1588, 3, 2, 2, 2, 1586, 1584,
	3, 2, 2, 2, 1586, 1587, 3, 2, 2, 2, 1587, 1589, 3, 2, 2, 2, 1588, 1586,
	3, 2, 2, 2, 1589, 1593, 7, 9, 2, 2, 1590, 1592, 7, 7, 2, 2, 1591, 1590,
	3, 2, 2, 2, 1592, 1595, 3, 2, 2, 2, 1593, 1591, 3, 2, 2, 2, 1593, 1594,
	3, 2, 2, 2, 1594, 1597, 3, 2, 2, 2, 1595, 1593, 3, 2, 2, 2, 1596, 1582,
	3, 2, 2, 2, 1596, 1597, 3, 2, 2, 2, 1597, 1598, 3, 2, 2, 2, 1598, 1602,
	5, 114, 58, 2, 1599, 1601, 7, 7, 2, 2, 1600, 1599, 3, 2, 2, 2, 1601, 1604,
	3, 2, 2, 2, 1602, 1600, 3, 2, 2, 2, 1602, 1603, 3, 2, 2, 2, 1603, 1605,
	3, 2, 2, 2, 1604, 1602, 3, 2, 2, 2, 1605, 1609, 7, 36, 2, 2, 1606, 1608,
	7, 7, 2, 2, 1607, 1606, 3, 2, 2, 2, 1608, 1611, 3, 2, 2, 2, 1609, 1607,
	3, 2, 2, 2, 1609, 1610, 3, 2, 2, 2, 1610, 1612, 3, 2, 2, 2, 1611, 1609,
	3, 2, 2, 2, 1612, 1613, 5, 92, 47, 2, 1613, 105, 3, 2, 2, 2, 1614, 1616,
	5, 94, 48, 2, 1615, 1614, 3, 2, 2, 2, 1615, 1616, 3, 2, 2, 2, 1616, 1620,
	3, 2, 2, 2, 1617, 1621, 5, 98, 50, 2, 1618, 1621, 5, 100, 51, 2, 1619,
	1621, 5, 102, 52, 2, 1620, 1617, 3, 2, 2, 2, 1620, 1618, 3, 2, 2, 2, 1620,
	1619, 3, 2, 2, 2, 1621, 107, 3, 2, 2, 2, 1622, 1639, 5, 112, 57, 2, 1623,
	1625, 7, 7, 2, 2, 1624, 1623, 3, 2, 2, 2, 1625, 1628, 3, 2, 2, 2, 1626,
	1624, 3, 2, 2, 2, 1626, 1627, 3, 2, 2, 2, 1627, 1629, 3, 2, 2, 2, 1628,
	1626, 3, 2, 2, 2, 1629, 1633, 7, 9, 2, 2, 1630, 1632, 7, 7, 2, 2, 1631,
	1630, 3, 2, 2, 2, 1632, 1635, 3, 2, 2, 2, 1633, 1631, 3, 2, 2, 2, 1633,
	1634, 3, 2, 2, 2, 1634, 1636, 3, 2, 2, 2, 1635, 1633, 3, 2, 2, 2, 1636,
	1638, 5, 112, 57, 2, 1637, 1626, 3, 2, 2, 2, 1638, 1641, 3, 2, 2, 2, 1639,
	1637, 3, 2, 2, 2, 1639, 1640, 3, 2, 2, 2, 1640, 109, 3, 2, 2, 2, 1641,
	1639, 3, 2, 2, 2, 1642, 1646, 7, 11, 2, 2, 1643, 1645, 7, 7, 2, 2, 1644,
	1643, 3, 2, 2, 2, 1645, 1648, 3, 2, 2, 2, 1646, 1644, 3, 2, 2, 2, 1646,
	1647, 3, 2, 2, 2, 1647, 1649, 3, 2, 2, 2, 1648, 1646, 3, 2, 2, 2, 1649,
	1653, 5, 108, 55, 2, 1650, 1652, 7, 7, 2, 2, 1651, 1650, 3, 2, 2, 2, 1652,
	1655, 3, 2, 2, 2, 1653, 1651, 3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654,
	1656, 3, 2, 2, 2, 1655, 1653, 3, 2, 2, 2, 1656, 1657, 7, 12, 2, 2, 1657,
	1675, 3, 2, 2, 2, 1658, 1662, 7, 11, 2, 2, 1659, 1661, 7, 7, 2, 2, 1660,
	1659, 3, 2, 2, 2, 1661, 1664, 3, 2, 2, 2, 1662, 1660, 3, 2, 2, 2, 1662,
	1663, 3, 2, 2, 2, 1663, 1665, 3, 2, 2, 2, 1664, 1662, 3, 2, 2, 2, 1665,
	1669, 5, 110, 56, 2, 1666, 1668, 7, 7, 2, 2, 1667, 1666, 3, 2, 2, 2, 1668,
	1671, 3, 2, 2, 2, 1669, 1667, 3, 2, 2, 2, 1669, 1670, 3, 2, 2, 2, 1670,
	1672, 3, 2, 2, 2, 1671, 1669, 3, 2, 2, 2, 1672, 1673, 7, 12, 2, 2, 1673,
	1675, 3, 2, 2, 2, 1674, 1642, 3, 2, 2, 2, 1674, 1658, 3, 2, 2, 2, 1675,
	111, 3, 2, 2, 2, 1676, 1684, 5, 316, 159, 2, 1677, 1679, 7, 7, 2, 2, 1678,
	1677, 3, 2, 2, 2, 1679, 1682, 3, 2, 2, 2, 1680, 1678, 3, 2, 2, 2, 1680,
	1681, 3, 2, 2, 2, 1681, 1683, 3, 2, 2, 2, 1682, 1680, 3, 2, 2, 2, 1683,
	1685, 5, 178, 90, 2, 1684, 1680, 3, 2, 2, 2, 1684, 1685, 3, 2, 2, 2, 1685,
	113, 3, 2, 2, 2, 1686, 1690, 7, 11, 2, 2, 1687, 1689, 7, 7, 2, 2, 1688,
	1687, 3, 2, 2, 2, 1689, 1692, 3, 2, 2, 2, 1690, 1688, 3, 2, 2, 2, 1690,
	1691, 3, 2, 2, 2, 1691, 1695, 3, 2, 2, 2, 1692, 1690, 3, 2, 2, 2, 1693,
	1696, 5, 60, 31, 2, 1694, 1696, 5, 92, 47, 2, 1695, 1693, 3, 2, 2, 2, 1695,
	1694, 3, 2, 2, 2, 1695, 1696, 3, 2, 2, 2, 1696, 1716, 3, 2, 2, 2, 1697,
	1699, 7, 7, 2, 2, 1698, 1697, 3, 2, 2, 2, 1699, 1702, 3, 2, 2, 2, 1700,
	1698, 3, 2, 2, 2, 1700, 1701, 3, 2, 2, 2, 1701, 1703, 3, 2, 2, 2, 1702,
	1700, 3, 2, 2, 2, 1703, 1707, 7, 10, 2, 2, 1704, 1706, 7, 7, 2, 2, 1705,
	1704, 3, 2, 2, 2, 1706, 1709, 3, 2, 2, 2, 1707, 1705, 3, 2, 2, 2, 1707,
	1708, 3, 2, 2, 2, 1708, 1712, 3, 2, 2, 2, 1709, 1707, 3, 2, 2, 2, 1710,
	1713, 5, 60, 31, 2, 1711, 1713, 5, 92, 47, 2, 1712, 1710, 3, 2, 2, 2, 1712,
	1711, 3, 2, 2, 2, 1713, 1715, 3, 2, 2, 2, 1714, 1700, 3, 2, 2, 2, 1715,
	1718, 3, 2, 2, 2, 1716, 1714, 3, 2, 2, 2, 1716, 1717, 3, 2, 2, 2, 1717,
	1722, 3, 2, 2, 2, 1718, 1716, 3, 2, 2, 2, 1719, 1721, 7, 7, 2, 2, 1720,
	1719, 3, 2, 2, 2, 1721, 1724, 3, 2, 2, 2, 1722, 1720, 3, 2, 2, 2, 1722,
	1723, 3, 2, 2, 2, 1723, 1725, 3, 2, 2, 2, 1724, 1722, 3, 2, 2, 2, 1725,
	1726, 7, 12, 2, 2, 1726, 115, 3, 2, 2, 2, 1727, 1731, 7, 77, 2, 2, 1728,
	1730, 7, 7, 2, 2, 1729, 1728, 3, 2, 2, 2, 1730, 1733, 3, 2, 2, 2, 1731,
	1729, 3, 2, 2, 2, 1731, 1732, 3, 2, 2, 2, 1732, 1734, 3, 2, 2, 2, 1733,
	1731, 3, 2, 2, 2, 1734, 1751, 5, 118, 60, 2, 1735, 1737, 7, 7, 2, 2, 1736,
	1735, 3, 2, 2, 2, 1737, 1740, 3, 2, 2, 2, 1738, 1736, 3, 2, 2, 2, 1738,
	1739, 3, 2, 2, 2, 1739, 1741, 3, 2, 2, 2, 1740, 1738, 3, 2, 2, 2, 1741,
	1745, 7, 10, 2, 2, 1742, 1744, 7, 7, 2, 2, 1743, 1742, 3, 2, 2, 2, 1744,
	1747, 3, 2, 2, 2, 1745, 1743, 3, 2, 2, 2, 1745, 1746, 3, 2, 2, 2, 1746,
	1748, 3, 2, 2, 2, 1747, 1745, 3, 2, 2, 2, 1748, 1750, 5, 118, 60, 2, 1749,
	1738, 3, 2, 2, 2, 1750, 1753, 3, 2, 2, 2, 1751, 1749, 3, 2, 2, 2, 1751,
	1752, 3, 2, 2, 2, 1752, 117, 3, 2, 2, 2, 1753, 1751, 3, 2, 2, 2, 1754,
	1756, 5, 306, 154, 2, 1755, 1754, 3, 2, 2, 2, 1756, 1759, 3, 2, 2, 2, 1757,
	1755, 3, 2, 2, 2, 1757, 1758, 3, 2, 2, 2, 1758, 1760, 3, 2, 2, 2, 1759,
	1757, 3, 2, 2, 2, 1760, 1764, 5, 316, 159, 2, 1761, 1763, 7, 7, 2, 2, 1762,
	1761, 3, 2, 2, 2, 1763, 1766, 3, 2, 2, 2, 1764, 1762, 3, 2, 2, 2, 1764,
	1765, 3, 2, 2, 2, 1765, 1767, 3, 2, 2, 2, 1766, 1764, 3, 2, 2, 2, 1767,
	1771, 7, 28, 2, 2, 1768, 1770, 7, 7, 2, 2, 1769, 1768, 3, 2, 2, 2, 1770,
	1773, 3, 2, 2, 2, 1771, 1769, 3, 2, 2, 2, 1771, 1772, 3, 2, 2, 2, 1772,
	1774, 3, 2, 2, 2, 1773, 1771, 3, 2, 2, 2, 1774, 1775, 5, 92, 47, 2, 1775,
	119, 3, 2, 2, 2, 1776, 1780, 7, 15, 2, 2, 1777, 1779, 7, 7, 2, 2, 1778,
	1777, 3, 2, 2, 2, 1779, 1782, 3, 2, 2, 2, 1780, 1778, 3, 2, 2, 2, 1780,
	1781, 3, 2, 2, 2, 1781, 1783, 3, 2, 2, 2, 1782, 1780, 3, 2, 2, 2, 1783,
	1787, 5, 122, 62, 2, 1784, 1786, 7, 7, 2, 2, 1785, 1784, 3, 2, 2, 2, 1786,
	1789, 3, 2, 2, 2, 1787, 1785, 3, 2, 2, 2, 1787, 1788, 3, 2, 2, 2, 1788,
	1790, 3, 2, 2, 2, 1789, 1787, 3, 2, 2, 2, 1790, 1791, 7, 16, 2, 2, 1791,
	121, 3, 2, 2, 2, 1792, 1798, 5, 124, 63, 2, 1793, 1794, 5, 332, 167, 2,
	1794, 1795, 5, 124, 63, 2, 1795, 1797, 3, 2, 2, 2, 1796, 1793, 3, 2, 2,
	2, 1797, 1800, 3, 2, 2, 2, 1798, 1796, 3, 2, 2, 2, 1798, 1799, 3, 2, 2,
	2, 1799, 1802, 3, 2, 2, 2, 1800, 1798, 3, 2, 2, 2, 1801, 1803, 5, 332,
	167, 2, 1802, 1801, 3, 2, 2, 2, 1802, 1803, 3, 2, 2, 2, 1803, 1805, 3,
	2, 2, 2, 1804, 1792, 3, 2, 2, 2, 1804, 1805, 3, 2, 2, 2, 1805, 123, 3,
	2, 2, 2, 1806, 1809, 5, 304, 153, 2, 1807, 1809, 5, 306, 154, 2, 1808,
	1806, 3, 2, 2, 2, 1808, 1807, 3, 2, 2, 2, 1809, 1812, 3, 2, 2, 2, 1810,
	1808, 3, 2, 2, 2, 1810, 1811, 3, 2, 2, 2, 1811, 1817, 3, 2, 2, 2, 1812,
	1810, 3, 2, 2, 2, 1813, 1818, 5, 126, 64, 2, 1814, 1818, 5, 128, 65, 2,
	1815, 1818, 5, 246, 124, 2, 1816, 1818, 5, 130, 66, 2, 1817, 1813, 3, 2,
	2, 2, 1817, 1814, 3, 2, 2, 2, 1817, 1815, 3, 2, 2, 2, 1817, 1816, 3, 2,
	2, 2, 1818, 125, 3, 2, 2, 2, 1819, 1825, 5, 18, 10, 2, 1820, 1825, 5, 66,
	34, 2, 1821, 1825, 5, 54, 28, 2, 1822, 1825, 5, 70, 36, 2, 1823, 1825,
	5, 82, 42, 2, 1824, 1819, 3, 2, 2, 2, 1824, 1820, 3, 2, 2, 2, 1824, 1821,
	3, 2, 2, 2, 1824, 1822, 3, 2, 2, 2, 1824, 1823, 3, 2, 2, 2, 1825, 127,
	3, 2, 2, 2, 1826, 1827, 5, 162, 82, 2, 1827, 1831, 7, 30, 2, 2, 1828, 1830,
	7, 7, 2, 2, 1829, 1828, 3, 2, 2, 2, 1830, 1833, 3, 2, 2, 2, 1831, 1829,
	3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832, 1834, 3, 2, 2, 2, 1833, 1831,
	3, 2, 2, 2, 1834, 1835, 5, 130, 66, 2, 1835, 1847, 3, 2, 2, 2, 1836, 1837,
	5, 164, 83, 2, 1837, 1841, 5, 258, 130, 2, 1838, 1840, 7, 7, 2, 2, 1839,
	1838, 3, 2, 2, 2, 1840, 1843, 3, 2, 2, 2, 1841, 1839, 3, 2, 2, 2, 1841,
	1842, 3, 2, 2, 2, 1842, 1844, 3, 2, 2, 2, 1843, 1841, 3, 2, 2, 2, 1844,
	1845, 5, 130, 66, 2, 1845, 1847, 3, 2, 2, 2, 1846, 1826, 3, 2, 2, 2, 1846,
	1836, 3, 2, 2, 2, 1847, 129, 3, 2, 2, 2, 1848, 1849, 5, 132, 67, 2, 1849,
	131, 3, 2, 2, 2, 1850, 1867, 5, 134, 68, 2, 1851, 1853, 7, 7, 2, 2, 1852,
	1851, 3, 2, 2, 2, 1853, 1856, 3, 2, 2, 2, 1854, 1852, 3, 2, 2, 2, 1854,
	1855, 3, 2, 2, 2, 1855, 1857, 3, 2, 2, 2, 1856, 1854, 3, 2, 2, 2, 1857,
	1861, 7, 25, 2, 2, 1858, 1860, 7, 7, 2, 2, 1859, 1858, 3, 2, 2, 2, 1860,
	1863, 3, 2, 2, 2, 1861, 1859, 3, 2, 2, 2, 1861, 1862, 3, 2, 2, 2, 1862,
	1864, 3, 2, 2, 2, 1863, 1861, 3, 2, 2, 2, 1864, 1866, 5, 134, 68, 2, 1865,
	1854, 3, 2, 2, 2, 1866, 1869, 3, 2, 2, 2, 1867, 1865, 3, 2, 2, 2, 1867,
	1868, 3, 2, 2, 2, 1868, 133, 3, 2, 2, 2, 1869, 1867, 3, 2, 2, 2, 1870,
	1887, 5, 136, 69, 2, 1871, 1873, 7, 7, 2, 2, 1872, 1871, 3, 2, 2, 2, 1873,
	1876, 3, 2, 2, 2, 1874, 1872, 3, 2, 2, 2, 1874, 1875, 3, 2, 2, 2, 1875,
	1877, 3, 2, 2, 2, 1876, 1874, 3, 2, 2, 2, 1877, 1881, 7, 24, 2, 2, 1878,
	1880, 7, 7, 2, 2, 1879, 1878, 3, 2, 2, 2, 1880, 1883, 3, 2, 2, 2, 1881,
	1879, 3, 2, 2, 2, 1881, 1882, 3, 2, 2, 2, 1882, 1884, 3, 2, 2, 2, 1883,
	1881, 3, 2, 2, 2, 1884, 1886, 5, 136, 69, 2, 1885, 1874, 3, 2, 2, 2, 1886,
	1889, 3, 2, 2, 2, 1887, 1885, 3, 2, 2, 2, 1887, 1888, 3, 2, 2, 2, 1888,
	135, 3, 2, 2, 2, 1889, 1887, 3, 2, 2, 2, 1890, 1902, 5, 138, 70, 2, 1891,
	1895, 5, 260, 131, 2, 1892, 1894, 7, 7, 2, 2, 1893, 1892, 3, 2, 2, 2, 1894,
	1897, 3, 2, 2, 2, 1895, 1893, 3, 2, 2, 2, 1895, 1896, 3, 2, 2, 2, 1896,
	1898, 3, 2, 2, 2, 1897, 1895, 3, 2, 2, 2, 1898, 1899, 5, 138, 70, 2, 1899,
	1901, 3, 2, 2, 2, 1900, 1891, 3, 2, 2, 2, 1901, 1904, 3, 2, 2, 2, 1902,
	1900, 3, 2, 2, 2, 1902, 1903, 3, 2, 2, 2, 1903, 137, 3, 2, 2, 2, 1904,
	1902, 3, 2, 2, 2, 1905, 1915, 5, 140, 71, 2, 1906, 1910, 5, 262, 132, 2,
	1907, 1909, 7, 7, 2, 2, 1908, 1907, 3, 2, 2, 2, 1909, 1912, 3, 2, 2, 2,
	1910, 1908, 3, 2, 2, 2, 1910, 1911, 3, 2, 2, 2, 1911, 1913, 3, 2, 2, 2,
	1912, 1910, 3, 2, 2, 2, 1913, 1914, 5, 140, 71, 2, 1914, 1916, 3, 2, 2,
	2, 1915, 1906, 3, 2, 2, 2, 1915, 1916, 3, 2, 2, 2, 1916, 139, 3, 2, 2,
	2, 1917, 1938, 5, 142, 72, 2, 1918, 1922, 5, 264, 133, 2, 1919, 1921, 7,
	7, 2, 2, 1920, 1919, 3, 2, 2, 2, 1921, 1924, 3, 2, 2, 2, 1922, 1920, 3,
	2, 2, 2, 1922, 1923, 3, 2, 2, 2, 1923, 1925, 3, 2, 2, 2, 1924, 1922, 3,
	2, 2, 2, 1925, 1926, 5, 142, 72, 2, 1926, 1937, 3, 2, 2, 2, 1927, 1931,
	5, 266, 134, 2, 1928, 1930, 7, 7, 2, 2, 1929, 1928, 3, 2, 2, 2, 1930, 1933,
	3, 2, 2, 2, 1931, 1929, 3, 2, 2, 2, 1931, 1932, 3, 2, 2, 2, 1932, 1934,
	3, 2, 2, 2, 1933, 1931, 3, 2, 2, 2, 1934, 1935, 5, 92, 47, 2, 1935, 1937,
	3, 2, 2, 2, 1936, 1918, 3, 2, 2, 2, 1936, 1927, 3, 2, 2, 2, 1937, 1940,
	3, 2, 2, 2, 1938, 1936, 3, 2, 2, 2, 1938, 1939, 3, 2, 2, 2, 1939, 141,
	3, 2, 2, 2, 1940, 1938, 3, 2, 2, 2, 1941, 1959, 5, 144, 73, 2, 1942, 1944,
	7, 7, 2, 2, 1943, 1942, 3, 2, 2, 2, 1944, 1947, 3, 2, 2, 2, 1945, 1943,
	3, 2, 2, 2, 1945, 1946, 3, 2, 2, 2, 1946, 1948, 3, 2, 2, 2, 1947, 1945,
	3, 2, 2, 2, 1948, 1952, 5, 324, 163, 2, 1949, 1951, 7, 7, 2, 2, 1950, 1949,
	3, 2, 2, 2, 1951, 1954, 3, 2, 2, 2, 1952, 1950, 3, 2, 2, 2, 1952, 1953,
	3, 2, 2, 2, 1953, 1955, 3, 2, 2, 2, 1954, 1952, 3, 2, 2, 2, 1955, 1956,
	5, 144, 73, 2, 1956, 1958, 3, 2, 2, 2, 1957, 1945, 3, 2, 2, 2, 1958, 1961,
	3, 2, 2, 2, 1959, 1957, 3, 2, 2, 2, 1959, 1960, 3, 2, 2, 2, 1960, 143,
	3, 2, 2, 2, 1961, 1959, 3, 2, 2, 2, 1962, 1974, 5, 146, 74, 2, 1963, 1967,
	5, 316, 159, 2, 1964, 1966, 7, 7, 2, 2, 1965, 1964, 3, 2, 2, 2, 1966, 1969,
	3, 2, 2, 2, 1967, 1965, 3, 2, 2, 2, 1967, 1968, 3, 2, 2, 2, 1968, 1970,
	3, 2, 2, 2, 1969, 1967, 3, 2, 2, 2, 1970, 1971, 5, 146, 74, 2, 1971, 1973,
	3, 2, 2, 2, 1972, 1963, 3, 2, 2, 2, 1973, 1976, 3, 2, 2, 2, 1974, 1972,
	3, 2, 2, 2, 1974, 1975, 3, 2, 2, 2, 1975, 145, 3, 2, 2, 2, 1976, 1974,
	3, 2, 2, 2, 1977, 1988, 5, 148, 75, 2, 1978, 1982, 7, 38, 2, 2, 1979, 1981,
	7, 7, 2, 2, 1980, 1979, 3, 2, 2, 2, 1981, 1984, 3, 2, 2, 2, 1982, 1980,
	3, 2, 2, 2, 1982, 1983, 3, 2, 2, 2, 1983, 1985, 3, 2, 2, 2, 1984, 1982,
	3, 2, 2, 2, 1985, 1987, 5, 148, 75, 2, 1986, 1978, 3, 2, 2, 2, 1987, 1990,
	3, 2, 2, 2, 1988, 1986, 3, 2, 2, 2, 1988, 1989, 3, 2, 2, 2, 1989, 147,
	3, 2, 2, 2, 1990, 1988, 3, 2, 2, 2, 1991, 2003, 5, 150, 76, 2, 1992, 1996,
	5, 268, 135, 2, 1993, 1995, 7, 7, 2, 2, 1994, 1993, 3, 2, 2, 2, 1995, 1998,
	3, 2, 2, 2, 1996, 1994, 3, 2, 2, 2, 1996, 1997, 3, 2, 2, 2, 1997, 1999,
	3, 2, 2, 2, 1998, 1996, 3, 2, 2, 2, 1999, 2000, 5, 150, 76, 2, 2000, 2002,
	3, 2, 2, 2, 2001, 1992, 3, 2, 2, 2, 2002, 2005, 3, 2, 2, 2, 2003, 2001,
	3, 2, 2, 2, 2003, 2004, 3, 2, 2, 2, 2004, 149, 3, 2, 2, 2, 2005, 2003,
	3, 2, 2, 2, 2006, 2018, 5, 152, 77, 2, 2007, 2011, 5, 270, 136, 2, 2008,
	2010, 7, 7, 2, 2, 2009, 2008, 3, 2, 2, 2, 2010, 2013, 3, 2, 2, 2, 2011,
	2009, 3, 2, 2, 2, 2011, 2012, 3, 2, 2, 2, 2012, 2014, 3, 2, 2, 2, 2013,
	2011, 3, 2, 2, 2, 2014, 2015, 5, 152, 77, 2, 2015, 2017, 3, 2, 2, 2, 2016,
	2007, 3, 2, 2, 2, 2017, 2020, 3, 2, 2, 2, 2018, 2016, 3, 2, 2, 2, 2018,
	2019, 3, 2, 2, 2, 2019, 151, 3, 2, 2, 2, 2020, 2018, 3, 2, 2, 2, 2021,
	2037, 5, 154, 78, 2, 2022, 2024, 7, 7, 2, 2, 2023, 2022, 3, 2, 2, 2, 2024,
	2027, 3, 2, 2, 2, 2025, 2023, 3, 2, 2, 2, 2025, 2026, 3, 2, 2, 2, 2026,
	2028, 3, 2, 2, 2, 2027, 2025, 3, 2, 2, 2, 2028, 2032, 5, 272, 137, 2, 2029,
	2031, 7, 7, 2, 2, 2030, 2029, 3, 2, 2, 2, 2031, 2034, 3, 2, 2, 2, 2032,
	2030, 3, 2, 2, 2, 2032, 2033, 3, 2, 2, 2, 2033, 2035, 3, 2, 2, 2, 2034,
	2032, 3, 2, 2, 2, 2035, 2036, 5, 92, 47, 2, 2036, 2038, 3, 2, 2, 2, 2037,
	2025, 3, 2, 2, 2, 2037, 2038, 3, 2, 2, 2, 2038, 153, 3, 2, 2, 2, 2039,
	2041, 5, 156, 79, 2, 2040, 2039, 3, 2, 2, 2, 2041, 2044, 3, 2, 2, 2, 2042,
	2040, 3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043, 2045, 3, 2, 2, 2, 2044,
	2042, 3, 2, 2, 2, 2045, 2046, 5, 158, 80, 2, 2046, 155, 3, 2, 2, 2, 2047,
	2057, 5, 306, 154, 2, 2048, 2057, 5, 304, 153, 2, 2049, 2053, 5, 274, 138,
	2, 2050, 2052, 7, 7, 2, 2, 2051, 2050, 3, 2, 2, 2, 2052, 2055, 3, 2, 2,
	2, 2053, 2051, 3, 2, 2, 2, 2053, 2054, 3, 2, 2, 2, 2054, 2057, 3, 2, 2,
	2, 2055, 2053, 3, 2, 2, 2, 2056, 2047, 3, 2, 2, 2, 2056, 2048, 3, 2, 2,
	2, 2056, 2049, 3, 2, 2, 2, 2057, 157, 3, 2, 2, 2, 2058, 2066, 5, 188, 95,
	2, 2059, 2061, 5, 188, 95, 2, 2060, 2062, 5, 160, 81, 2, 2061, 2060, 3,
	2, 2, 2, 2062, 2063, 3, 2, 2, 2, 2063, 2061, 3, 2, 2, 2, 2063, 2064, 3,
	2, 2, 2, 2064, 2066, 3, 2, 2, 2, 2065, 2058, 3, 2, 2, 2, 2065, 2059, 3,
	2, 2, 2, 2066, 159, 3, 2, 2, 2, 2067, 2073, 5, 276, 139, 2, 2068, 2073,
	5, 178, 90, 2, 2069, 2073, 5, 172, 87, 2, 2070, 2073, 5, 168, 85, 2, 2071,
	2073, 5, 170, 86, 2, 2072, 2067, 3, 2, 2, 2, 2072, 2068, 3, 2, 2, 2, 2072,
	2069, 3, 2, 2, 2, 2072, 2070, 3, 2, 2, 2, 2072, 2071, 3, 2, 2, 2, 2073,
	161, 3, 2, 2, 2, 2074, 2075, 5, 158, 80, 2, 2075, 2076, 5, 166, 84, 2,
	2076, 2079, 3, 2, 2, 2, 2077, 2079, 5, 316, 159, 2, 2078, 2074, 3, 2, 2,
	2, 2078, 2077, 3, 2, 2, 2, 2079, 163, 3, 2, 2, 2, 2080, 2081, 5, 154, 78,
	2, 2081, 165, 3, 2, 2, 2, 2082, 2086, 5, 178, 90, 2, 2083, 2086, 5, 168,
	85, 2, 2084, 2086, 5, 170, 86, 2, 2085, 2082, 3, 2, 2, 2, 2085, 2083, 3,
	2, 2, 2, 2085, 2084, 3, 2, 2, 2, 2086, 167, 3, 2, 2, 2, 2087, 2091, 7,
	13, 2, 2, 2088, 2090, 7, 7, 2, 2, 2089, 2088, 3, 2, 2, 2, 2090, 2093, 3,
	2, 2, 2, 2091, 2089, 3, 2, 2, 2, 2091, 2092, 3, 2, 2, 2, 2092, 2094, 3,
	2, 2, 2, 2093, 2091, 3, 2, 2, 2, 2094, 2111, 5, 130, 66, 2, 2095, 2097,
	7, 7, 2, 2, 2096, 2095, 3, 2, 2, 2, 2097, 2100, 3, 2, 2, 2, 2098, 2096,
	3, 2, 2, 2, 2098, 2099, 3, 2, 2, 2, 2099, 2101, 3, 2, 2, 2, 2100, 2098,
	3, 2, 2, 2, 2101, 2105, 7, 10, 2, 2, 2102, 2104, 7, 7, 2, 2, 2103, 2102,
	3, 2, 2, 2, 2104, 2107, 3, 2, 2, 2, 2105, 2103, 3, 2, 2, 2, 2105, 2106,
	3, 2, 2, 2, 2106, 2108, 3, 2, 2, 2, 2107, 2105, 3, 2, 2, 2, 2108, 2110,
	5, 130, 66, 2, 2109, 2098, 3, 2, 2, 2, 2110, 2113, 3, 2, 2, 2, 2111, 2109,
	3, 2, 2, 2, 2111, 2112, 3, 2, 2, 2, 2112, 2117, 3, 2, 2, 2, 2113, 2111,
	3, 2, 2, 2, 2114, 2116, 7, 7, 2, 2, 2115, 2114, 3, 2, 2, 2, 2116, 2119,
	3, 2, 2, 2, 2117, 2115, 3, 2, 2, 2, 2117, 2118, 3, 2, 2, 2, 2118, 2120,
	3, 2, 2, 2, 2119, 2117, 3, 2, 2, 2, 2120, 2121, 7, 14, 2, 2, 2121, 169,
	3, 2, 2, 2, 2122, 2124, 7, 7, 2, 2, 2123, 2122, 3, 2, 2, 2, 2124, 2127,
	3, 2, 2, 2, 2125, 2123, 3, 2, 2, 2, 2125, 2126, 3, 2, 2, 2, 2126, 2128,
	3, 2, 2, 2, 2127, 2125, 3, 2, 2, 2, 2128, 2132, 5, 278, 140, 2, 2129, 2131,
	7, 7, 2, 2, 2130, 2129, 3, 2, 2, 2, 2131, 2134, 3, 2, 2, 2, 2132, 2130,
	3, 2, 2, 2, 2132, 2133, 3, 2, 2, 2, 2133, 2138, 3, 2, 2, 2, 2134, 2132,
	3, 2, 2, 2, 2135, 2139, 5, 316, 159, 2, 2136, 2139, 5, 190, 96, 2, 2137,
	2139, 7, 63, 2, 2, 2138, 2135, 3, 2, 2, 2, 2138, 2136, 3, 2, 2, 2, 2138,
	2137, 3, 2, 2, 2, 2139, 171, 3, 2, 2, 2, 2140, 2142, 5, 178, 90, 2, 2141,
	2140, 3, 2, 2, 2, 2141, 2142, 3, 2, 2, 2, 2142, 2144, 3, 2, 2, 2, 2143,
	2145, 5, 176, 89, 2, 2144, 2143, 3, 2, 2, 2, 2144, 2145, 3, 2, 2, 2, 2145,
	2146, 3, 2, 2, 2, 2146, 2152, 5, 174, 88, 2, 2147, 2149, 5, 178, 90, 2,
	2148, 2147, 3, 2, 2, 2, 2148, 2149, 3, 2, 2, 2, 2149, 2150, 3, 2, 2, 2,
	2150, 2152, 5, 176, 89, 2, 2151, 2141, 3, 2, 2, 2, 2151, 2148, 3, 2, 2,
	2, 2152, 173, 3, 2, 2, 2, 2153, 2155, 5, 306, 154, 2, 2154, 2153, 3, 2,
	2, 2, 2155, 2158, 3, 2, 2, 2, 2156, 2154, 3, 2, 2, 2, 2156, 2157, 3, 2,
	2, 2, 2157, 2160, 3, 2, 2, 2, 2158, 2156, 3, 2, 2, 2, 2159, 2161, 5, 304,
	153, 2, 2160, 2159, 3, 2, 2, 2, 2160, 2161, 3, 2, 2, 2, 2161, 2165, 3,
	2, 2, 2, 2162, 2164, 7, 7, 2, 2, 2163, 2162, 3, 2, 2, 2, 2164, 2167, 3,
	2, 2, 2, 2165, 2163, 3, 2, 2, 2, 2165, 2166, 3, 2, 2, 2, 2166, 2168, 3,
	2, 2, 2, 2167, 2165, 3, 2, 2, 2, 2168, 2169, 5, 210, 106, 2, 2169, 175,
	3, 2, 2, 2, 2170, 2174, 7, 11, 2, 2, 2171, 2173, 7, 7, 2, 2, 2172, 2171,
	3, 2, 2, 2, 2173, 2176, 3, 2, 2, 2, 2174, 2172, 3, 2, 2, 2, 2174, 2175,
	3, 2, 2, 2, 2175, 2177, 3, 2, 2, 2, 2176, 2174, 3, 2, 2, 2, 2177, 2217,
	7, 12, 2, 2, 2178, 2182, 7, 11, 2, 2, 2179, 2181, 7, 7, 2, 2, 2180, 2179,
	3, 2, 2, 2, 2181, 2184, 3, 2, 2, 2, 2182, 2180, 3, 2, 2, 2, 2182, 2183,
	3, 2, 2, 2, 2183, 2185, 3, 2, 2, 2, 2184, 2182, 3, 2, 2, 2, 2185, 2202,
	5, 186, 94, 2, 2186, 2188, 7, 7, 2, 2, 2187, 2186, 3, 2, 2, 2, 2188, 2191,
	3, 2, 2, 2, 2189, 2187, 3, 2, 2, 2, 2189, 2190, 3, 2, 2, 2, 2190, 2192,
	3, 2, 2, 2, 2191, 2189, 3, 2, 2, 2, 2192, 2196, 7, 10, 2, 2, 2193, 2195,
	7, 7, 2, 2, 2194, 2193, 3, 2, 2, 2, 2195, 2198, 3, 2, 2, 2, 2196, 2194,
	3, 2, 2, 2, 2196, 2197, 3, 2, 2, 2, 2197, 2199, 3, 2, 2, 2, 2198, 2196,
	3, 2, 2, 2, 2199, 2201, 5, 186, 94, 2, 2200, 2189, 3, 2, 2, 2, 2201, 2204,
	3, 2, 2, 2, 2202, 2200, 3, 2, 2, 2, 2202, 2203, 3, 2, 2, 2, 2203, 2208,
	3, 2, 2, 2, 2204, 2202, 3, 2, 2, 2, 2205, 2207, 7, 7, 2, 2, 2206, 2205,
	3, 2, 2, 2, 2207, 2210, 3, 2, 2, 2, 2208, 2206, 3, 2, 2, 2, 2208, 2209,
	3, 2, 2, 2, 2209, 2212, 3, 2, 2, 2, 2210, 2208, 3, 2, 2, 2, 2211, 2213,
	7, 10, 2, 2, 2212, 2211, 3, 2, 2, 2, 2212, 2213, 3, 2, 2, 2, 2213, 2214,
	3, 2, 2, 2, 2214, 2215, 7, 12, 2, 2, 2215, 2217, 3, 2, 2, 2, 2216, 2170,
	3, 2, 2, 2, 2216, 2178, 3, 2, 2, 2, 2217, 177, 3, 2, 2, 2, 2218, 2222,
	7, 46, 2, 2, 2219, 2221, 7, 7, 2, 2, 2220, 2219, 3, 2, 2, 2, 2221, 2224,
	3, 2, 2, 2, 2222, 2220, 3, 2, 2, 2, 2222, 2223, 3, 2, 2, 2, 2223, 2225,
	3, 2, 2, 2, 2224, 2222, 3, 2, 2, 2, 2225, 2242, 5, 180, 91, 2, 2226, 2228,
	7, 7, 2, 2, 2227, 2226, 3, 2, 2, 2, 2228, 2231, 3, 2, 2, 2, 2229, 2227,
	3, 2, 2, 2, 2229, 2230, 3, 2, 2, 2, 2230, 2232, 3, 2, 2, 2, 2231, 2229,
	3, 2, 2, 2, 2232, 2236, 7, 10, 2, 2, 2233, 2235, 7, 7, 2, 2, 2234, 2233,
	3, 2, 2, 2, 2235, 2238, 3, 2, 2, 2, 2236, 2234, 3, 2, 2, 2, 2236, 2237,
	3, 2, 2, 2, 2237, 2239, 3, 2, 2, 2, 2238, 2236, 3, 2, 2, 2, 2239, 2241,
	5, 180, 91, 2, 2240, 2229, 3, 2, 2, 2, 2241, 2244, 3, 2, 2, 2, 2242, 2240,
	3, 2, 2, 2, 2242, 2243, 3, 2, 2, 2, 2243, 2248, 3, 2, 2, 2, 2244, 2242,
	3, 2, 2, 2, 2245, 2247, 7, 7, 2, 2, 2246, 2245, 3, 2, 2, 2, 2247, 2250,
	3, 2, 2, 2, 2248, 2246, 3, 2, 2, 2, 2248, 2249, 3, 2, 2, 2, 2249, 2252,
	3, 2, 2, 2, 2250, 2248, 3, 2, 2, 2, 2251, 2253, 7, 10, 2, 2, 2252, 2251,
	3, 2, 2, 2, 2252, 2253, 3, 2, 2, 2, 2253, 2254, 3, 2, 2, 2, 2254, 2255,
	7, 47, 2, 2, 2255, 179, 3, 2, 2, 2, 2256, 2258, 5, 182, 92, 2, 2257, 2256,
	3, 2, 2, 2, 2257, 2258, 3, 2, 2, 2, 2258, 2259, 3, 2, 2, 2, 2259, 2262,
	5, 92, 47, 2, 2260, 2262, 7, 17, 2, 2, 2261, 2257, 3, 2, 2, 2, 2261, 2260,
	3, 2, 2, 2, 2262, 181, 3, 2, 2, 2, 2263, 2265, 5, 184, 93, 2, 2264, 2263,
	3, 2, 2, 2, 2265, 2266, 3, 2, 2, 2, 2266, 2264, 3, 2, 2, 2, 2266, 2267,
	3, 2, 2, 2, 2267, 183, 3, 2, 2, 2, 2268, 2272, 5, 290, 146, 2, 2269, 2271,
	7, 7, 2, 2, 2270, 2269, 3, 2, 2, 2, 2271, 2274, 3, 2, 2, 2, 2272, 2270,
	3, 2, 2, 2, 2272, 2273, 3, 2, 2, 2, 2273, 2277, 3, 2, 2, 2, 2274, 2272,
	3, 2, 2, 2, 2275, 2277, 5, 306, 154, 2, 2276, 2268, 3, 2, 2, 2, 2276, 2275,
	3, 2, 2, 2, 2277, 185, 3, 2, 2, 2, 2278, 2280, 5, 306, 154, 2, 2279, 2278,
	3, 2, 2, 2, 2279, 2280, 3, 2, 2, 2, 2280, 2284, 3, 2, 2, 2, 2281, 2283,
	7, 7, 2, 2, 2282, 2281, 3, 2, 2, 2, 2283, 2286, 3, 2, 2, 2, 2284, 2282,
	3, 2, 2, 2, 2284, 2285, 3, 2, 2, 2, 2285, 2301, 3, 2, 2, 2, 2286, 2284,
	3, 2, 2, 2, 2287, 2291, 5, 316, 159, 2, 2288, 2290, 7, 7, 2, 2, 2289, 2288,
	3, 2, 2, 2, 2290, 2293, 3, 2, 2, 2, 2291, 2289, 3, 2, 2, 2, 2291, 2292,
	3, 2, 2, 2, 2292, 2294, 3, 2, 2, 2, 2293, 2291, 3, 2, 2, 2, 2294, 2298,
	7, 30, 2, 2, 2295, 2297, 7, 7, 2, 2, 2296, 2295, 3, 2, 2, 2, 2297, 2300,
	3, 2, 2, 2, 2298, 2296, 3, 2, 2, 2, 2298, 2299, 3, 2, 2, 2, 2299, 2302,
	3, 2, 2, 2, 2300, 2298, 3, 2, 2, 2, 2301, 2287, 3, 2, 2, 2, 2301, 2302,
	3, 2, 2, 2, 2302, 2304, 3, 2, 2, 2, 2303, 2305, 7, 17, 2, 2, 2304, 2303,
	3, 2, 2, 2, 2304, 2305, 3, 2, 2, 2, 2305, 2309, 3, 2, 2, 2, 2306, 2308,
	7, 7, 2, 2, 2307, 2306, 3, 2, 2, 2, 2308, 2311, 3, 2, 2, 2, 2309, 2307,
	3, 2, 2, 2, 2309, 2310, 3, 2, 2, 2, 2310, 2312, 3, 2, 2, 2, 2311, 2309,
	3, 2, 2, 2, 2312, 2313, 5, 130, 66, 2, 2313, 187, 3, 2, 2, 2, 2314, 2329,
	5, 190, 96, 2, 2315, 2329, 5, 194, 98, 2, 2316, 2329, 5, 196, 99, 2, 2317,
	2329, 5, 316, 159, 2, 2318, 2329, 5, 256, 129, 2, 2319, 2329, 5, 218, 110,
	2, 2320, 2329, 5, 220, 111, 2, 2321, 2329, 5, 192, 97, 2, 2322, 2329, 5,
	222, 112, 2, 2323, 2329, 5, 224, 113, 2, 2324, 2329, 5, 228, 115, 2, 2325,
	2329, 5, 230, 116, 2, 2326, 2329, 5, 240, 121, 2, 2327, 2329, 5, 254, 128,
	2, 2328, 2314, 3, 2, 2, 2, 2328, 2315, 3, 2, 2, 2, 2328, 2316, 3, 2, 2,
	2, 2328, 2317, 3, 2, 2, 2, 2328, 2318, 3, 2, 2, 2, 2328, 2319, 3, 2, 2,
	2, 2328, 2320, 3, 2, 2, 2, 2328, 2321, 3, 2, 2, 2, 2328, 2322, 3, 2, 2,
	2, 2328, 2323, 3, 2, 2, 2, 2328, 2324, 3, 2, 2, 2, 2328, 2325, 3, 2, 2,
	2, 2328, 2326, 3, 2, 2, 2, 2328, 2327, 3, 2, 2, 2, 2329, 189, 3, 2, 2,
	2, 2330, 2334, 7, 11, 2, 2, 2331, 2333, 7, 7, 2, 2, 2332, 2331, 3, 2, 2,
	2, 2333, 2336, 3, 2, 2, 2, 2334, 2332, 3, 2, 2, 2, 2334, 2335, 3, 2, 2,
	2, 2335, 2337, 3, 2, 2, 2, 2336, 2334, 3, 2, 2, 2, 2337, 2341, 5, 130,
	66, 2, 2338, 2340, 7, 7, 2, 2, 2339, 2338, 3, 2, 2, 2, 2340, 2343, 3, 2,
	2, 2, 2341, 2339, 3, 2, 2, 2, 2341, 2342, 3, 2, 2, 2, 2342, 2344, 3, 2,
	2, 2, 2343, 2341, 3, 2, 2, 2, 2344, 2345, 7, 12, 2, 2, 2345, 191, 3, 2,
	2, 2, 2346, 2350, 7, 13, 2, 2, 2347, 2349, 7, 7, 2, 2, 2348, 2347, 3, 2,
	2, 2, 2349, 2352, 3, 2, 2, 2, 2350, 2348, 3, 2, 2, 2, 2350, 2351, 3, 2,
	2, 2, 2351, 2353, 3, 2, 2, 2, 2352, 2350, 3, 2, 2, 2, 2353, 2370, 5, 130,
	66, 2, 2354, 2356, 7, 7, 2, 2, 2355, 2354, 3, 2, 2, 2, 2356, 2359, 3, 2,
	2, 2, 2357, 2355, 3, 2, 2, 2, 2357, 2358, 3, 2, 2, 2, 2358, 2360, 3, 2,
	2, 2, 2359, 2357, 3, 2, 2, 2, 2360, 2364, 7, 10, 2, 2, 2361, 2363, 7, 7,
	2, 2, 2362, 2361, 3, 2, 2, 2, 2363, 2366, 3, 2, 2, 2, 2364, 2362, 3, 2,
	2, 2, 2364, 2365, 3, 2, 2, 2, 2365, 2367, 3, 2, 2, 2, 2366, 2364, 3, 2,
	2, 2, 2367, 2369, 5, 130, 66, 2, 2368, 2357, 3, 2, 2, 2, 2369, 2372, 3,
	2, 2, 2, 2370, 2368, 3, 2, 2, 2, 2370, 2371, 3, 2, 2, 2, 2371, 2376, 3,
	2, 2, 2, 2372, 2370, 3, 2, 2, 2, 2373, 2375, 7, 7, 2, 2, 2374, 2373, 3,
	2, 2, 2, 2375, 2378, 3, 2, 2, 2, 2376, 2374, 3, 2, 2, 2, 2376, 2377, 3,
	2, 2, 2, 2377, 2380, 3, 2, 2, 2, 2378, 2376, 3, 2, 2, 2, 2379, 2381, 7,
	10, 2, 2, 2380, 2379, 3, 2, 2, 2, 2380, 2381, 3, 2, 2, 2, 2381, 2382, 3,
	2, 2, 2, 2382, 2383, 7, 14, 2, 2, 2383, 2393, 3, 2, 2, 2, 2384, 2388, 7,
	13, 2, 2, 2385, 2387, 7, 7, 2, 2, 2386, 2385, 3, 2, 2, 2, 2387, 2390, 3,
	2, 2, 2, 2388, 2386, 3, 2, 2, 2, 2388, 2389, 3, 2, 2, 2, 2389, 2391, 3,
	2, 2, 2, 2390, 2388, 3, 2, 2, 2, 2391, 2393, 7, 14, 2, 2, 2392, 2346, 3,
	2, 2, 2, 2392, 2384, 3, 2, 2, 2, 2393, 193, 3, 2, 2, 2, 2394, 2395, 9,
	4, 2, 2, 2395, 195, 3, 2, 2, 2, 2396, 2399, 5, 198, 100, 2, 2397, 2399,
	5, 200, 101, 2, 2398, 2396, 3, 2, 2, 2, 2398, 2397, 3, 2, 2, 2, 2399, 197,
	3, 2, 2, 2, 2400, 2405, 7, 136, 2, 2, 2401, 2404, 5, 202, 102, 2, 2402,
	2404, 5, 204, 103, 2, 2403, 2401, 3, 2, 2, 2, 2403, 2402, 3, 2, 2, 2, 2404,
	2407, 3, 2, 2, 2, 2405, 2403, 3, 2, 2, 2, 2405, 2406, 3, 2, 2, 2, 2406,
	2408, 3, 2, 2, 2, 2407, 2405, 3, 2, 2, 2, 2408, 2409, 7, 162, 2, 2, 2409,
	199, 3, 2, 2, 2, 2410, 2416, 7, 137, 2, 2, 2411, 2415, 5, 206, 104, 2,
	2412, 2415, 5, 208, 105, 2, 2413, 2415, 7, 168, 2, 2, 2414, 2411, 3, 2,
	2, 2, 2414, 2412, 3, 2, 2, 2, 2414, 2413, 3, 2, 2, 2, 2415, 2418, 3, 2,
	2, 2, 2416, 2414, 3, 2, 2, 2, 2416, 2417, 3, 2, 2, 2, 2417, 2419, 3, 2,
	2, 2, 2418, 2416, 3, 2, 2, 2, 2419, 2420, 7, 167, 2, 2, 2420, 201, 3, 2,
	2, 2, 2421, 2422, 9, 5, 2, 2, 2422, 203, 3, 2, 2, 2, 2423, 2424, 7, 166,
	2, 2, 2424, 2425, 5, 130, 66, 2, 2425, 2426, 7, 16, 2, 2, 2426, 205, 3,
	2, 2, 2, 2427, 2428, 9, 6, 2, 2, 2428, 207, 3, 2, 2, 2, 2429, 2433, 7,
	171, 2, 2, 2430, 2432, 7, 7, 2, 2, 2431, 2430, 3, 2, 2, 2, 2432, 2435,
	3, 2, 2, 2, 2433, 2431, 3, 2, 2, 2, 2433, 2434, 3, 2, 2, 2, 2434, 2436,
	3, 2, 2, 2, 2435, 2433, 3, 2, 2, 2, 2436, 2440, 5, 130, 66, 2, 2437, 2439,
	7, 7, 2, 2, 2438, 2437, 3, 2, 2, 2, 2439, 2442, 3, 2, 2, 2, 2440, 2438,
	3, 2, 2, 2, 2440, 2441, 3, 2, 2, 2, 2441, 2443, 3, 2, 2, 2, 2442, 2440,
	3, 2, 2, 2, 2443, 2444, 7, 16, 2, 2, 2444, 209, 3, 2, 2, 2, 2445, 2449,
	7, 15, 2, 2, 2446, 2448, 7, 7, 2, 2, 2447, 2446, 3, 2, 2, 2, 2448, 2451,
	3, 2, 2, 2, 2449, 2447, 3, 2, 2, 2, 2449, 2450, 3, 2, 2, 2, 2450, 2452,
	3, 2, 2, 2, 2451, 2449, 3, 2, 2, 2, 2452, 2456, 5, 122, 62, 2, 2453, 2455,
	7, 7, 2, 2, 2454, 2453, 3, 2, 2, 2, 2455, 2458, 3, 2, 2, 2, 2456, 2454,
	3, 2, 2, 2, 2456, 2457, 3, 2, 2, 2, 2457, 2459, 3, 2, 2, 2, 2458, 2456,
	3, 2, 2, 2, 2459, 2460, 7, 16, 2, 2, 2460, 2494, 3, 2, 2, 2, 2461, 2465,
	7, 15, 2, 2, 2462, 2464, 7, 7, 2, 2, 2463, 2462, 3, 2, 2, 2, 2464, 2467,
	3, 2, 2, 2, 2465, 2463, 3, 2, 2, 2, 2465, 2466, 3, 2, 2, 2, 2466, 2469,
	3, 2, 2, 2, 2467, 2465, 3, 2, 2, 2, 2468, 2470, 5, 212, 107, 2, 2469, 2468,
	3, 2, 2, 2, 2469, 2470, 3, 2, 2, 2, 2470, 2474, 3, 2, 2, 2, 2471, 2473,
	7, 7, 2, 2, 2472, 2471, 3, 2, 2, 2, 2473, 2476, 3, 2, 2, 2, 2474, 2472,
	3, 2, 2, 2, 2474, 2475, 3, 2, 2, 2, 2475, 2477, 3, 2, 2, 2, 2476, 2474,
	3, 2, 2, 2, 2477, 2481, 7, 36, 2, 2, 2478, 2480, 7, 7, 2, 2, 2479, 2478,
	3, 2, 2, 2, 2480, 2483, 3, 2, 2, 2, 2481, 2479, 3, 2, 2, 2, 2481, 2482,
	3, 2, 2, 2, 2482, 2484, 3, 2, 2, 2, 2483, 2481, 3, 2, 2, 2, 2484, 2488,
	5, 122, 62, 2, 2485, 2487, 7, 7, 2, 2, 2486, 2485, 3, 2, 2, 2, 2487, 2490,
	3, 2, 2, 2, 2488, 2486, 3, 2, 2, 2, 2488, 2489, 3, 2, 2, 2, 2489, 2491,
	3, 2, 2, 2, 2490, 2488, 3, 2, 2, 2, 2491, 2492, 7, 16, 2, 2, 2492, 2494,
	3, 2, 2, 2, 2493, 2445, 3, 2, 2, 2, 2493, 2461, 3, 2, 2, 2, 2494, 211,
	3, 2, 2, 2, 2495, 2512, 5, 214, 108, 2, 2496, 2498, 7, 7, 2, 2, 2497, 2496,
	3, 2, 2, 2, 2498, 2501, 3, 2, 2, 2, 2499, 2497, 3, 2, 2, 2, 2499, 2500,
	3, 2, 2, 2, 2500, 2502, 3, 2, 2, 2, 2501, 2499, 3, 2, 2, 2, 2502, 2506,
	7, 10, 2, 2, 2503, 2505, 7, 7, 2, 2, 2504, 2503, 3, 2, 2, 2, 2505, 2508,
	3, 2, 2, 2, 2506, 2504, 3, 2, 2, 2, 2506, 2507, 3, 2, 2, 2, 2507, 2509,
	3, 2, 2, 2, 2508, 2506, 3, 2, 2, 2, 2509, 2511, 5, 214, 108, 2, 2510, 2499,
	3, 2, 2, 2, 2511, 2514, 3, 2, 2, 2, 2512, 2510, 3, 2, 2, 2, 2512, 2513,
	3, 2, 2, 2, 2513, 2516, 3, 2, 2, 2, 2514, 2512, 3, 2, 2, 2, 2515, 2517,
	7, 10, 2, 2, 2516, 2515, 3, 2, 2, 2, 2516, 2517, 3, 2, 2, 2, 2517, 213,
	3, 2, 2, 2, 2518, 2537, 5, 74, 38, 2, 2519, 2534, 5, 72, 37, 2, 2520, 2522,
	7, 7, 2, 2, 2521, 2520, 3, 2, 2, 2, 2522, 2525, 3, 2, 2, 2, 2523, 2521,
	3, 2, 2, 2, 2523, 2524, 3, 2, 2, 2, 2524, 2526, 3, 2, 2, 2, 2525, 2523,
	3, 2, 2, 2, 2526, 2530, 7, 28, 2, 2, 2527, 2529, 7, 7, 2, 2, 2528, 2527,
	3, 2, 2, 2, 2529, 2532, 3, 2, 2, 2, 2530, 2528, 3, 2, 2, 2, 2530, 2531,
	3, 2, 2, 2, 2531, 2533, 3, 2, 2, 2, 2532, 2530, 3, 2, 2, 2, 2533, 2535,
	5, 92, 47, 2, 2534, 2523, 3, 2, 2, 2, 2534, 2535, 3, 2, 2, 2, 2535, 2537,
	3, 2, 2, 2, 2536, 2518, 3, 2, 2, 2, 2536, 2519, 3, 2, 2, 2, 2537, 215,
	3, 2, 2, 2, 2538, 2554, 7, 65, 2, 2, 2539, 2541, 7, 7, 2, 2, 2540, 2539,
	3, 2, 2, 2, 2541, 2544, 3, 2, 2, 2, 2542, 2540, 3, 2, 2, 2, 2542, 2543,
	3, 2, 2, 2, 2543, 2545, 3, 2, 2, 2, 2544, 2542, 3, 2, 2, 2, 2545, 2549,
	5, 92, 47, 2, 2546, 2548, 7, 7, 2, 2, 2547, 2546, 3, 2, 2, 2, 2548, 2551,
	3, 2, 2, 2, 2549, 2547, 3, 2, 2, 2, 2549, 2550, 3, 2, 2, 2, 2550, 2552,
	3, 2, 2, 2, 2551, 2549, 3, 2, 2, 2, 2552, 2553, 7, 9, 2, 2, 2553, 2555,
	3, 2, 2, 2, 2554, 2542, 3, 2, 2, 2, 2554, 2555, 3, 2, 2, 2, 2555, 2559,
	3, 2, 2, 2, 2556, 2558, 7, 7, 2, 2, 2557, 2556, 3, 2, 2, 2, 2558, 2561,
	3, 2, 2, 2, 2559, 2557, 3, 2, 2, 2, 2559, 2560, 3, 2, 2, 2, 2560, 2562,
	3, 2, 2, 2, 2561, 2559, 3, 2, 2, 2, 2562, 2577, 5, 56, 29, 2, 2563, 2565,
	7, 7, 2, 2, 2564, 2563, 3, 2, 2, 2, 2565, 2568, 3, 2, 2, 2, 2566, 2564,
	3, 2, 2, 2, 2566, 2567, 3, 2, 2, 2, 2567, 2569, 3, 2, 2, 2, 2568, 2566,
	3, 2, 2, 2, 2569, 2573, 7, 28, 2, 2, 2570, 2572, 7, 7, 2, 2, 2571, 2570,
	3, 2, 2, 2, 2572, 2575, 3, 2, 2, 2, 2573, 2571, 3, 2, 2, 2, 2573, 2574,
	3, 2, 2, 2, 2574, 2576, 3, 2, 2, 2, 2575, 2573, 3, 2, 2, 2, 2576, 2578,
	5, 92, 47, 2, 2577, 2566, 3, 2, 2, 2, 2577, 2578, 3, 2, 2, 2, 2578, 2586,
	3, 2, 2, 2, 2579, 2581, 7, 7, 2, 2, 2580, 2579, 3, 2, 2, 2, 2581, 2584,
	3, 2, 2, 2, 2582, 2580, 3, 2, 2, 2, 2582, 2583, 3, 2, 2, 2, 2583, 2585,
	3, 2, 2, 2, 2584, 2582, 3, 2, 2, 2, 2585, 2587, 5, 116, 59, 2, 2586, 2582,
	3, 2, 2, 2, 2586, 2587, 3, 2, 2, 2, 2587, 2595, 3, 2, 2, 2, 2588, 2590,
	7, 7, 2, 2, 2589, 2588, 3, 2, 2, 2, 2590, 2593, 3, 2, 2, 2, 2591, 2589,
	3, 2, 2, 2, 2591, 2592, 3, 2, 2, 2, 2592, 2594, 3, 2, 2, 2, 2593, 2591,
	3, 2, 2, 2, 2594, 2596, 5, 64, 33, 2, 2595, 2591, 3, 2, 2, 2, 2595, 2596,
	3, 2, 2, 2, 2596, 217, 3, 2, 2, 2, 2597, 2600, 5, 210, 106, 2, 2598, 2600,
	5, 216, 109, 2, 2599, 2597, 3, 2, 2, 2, 2599, 2598, 3, 2, 2, 2, 2600, 219,
	3, 2, 2, 2, 2601, 2605, 7, 66, 2, 2, 2602, 2604, 7, 7, 2, 2, 2603, 2602,
	3, 2, 2, 2, 2604, 2607, 3, 2, 2, 2, 2605, 2603, 3, 2, 2, 2, 2605, 2606,
	3, 2, 2, 2, 2606, 2608, 3, 2, 2, 2, 2607, 2605, 3, 2, 2, 2, 2608, 2612,
	7, 28, 2, 2, 2609, 2611, 7, 7, 2, 2, 2610, 2609, 3, 2, 2, 2, 2611, 2614,
	3, 2, 2, 2, 2612, 2610, 3, 2, 2, 2, 2612, 2613, 3, 2, 2, 2, 2613, 2615,
	3, 2, 2, 2, 2614, 2612, 3, 2, 2, 2, 2615, 2623, 5, 26, 14, 2, 2616, 2618,
	7, 7, 2, 2, 2617, 2616, 3, 2, 2, 2, 2618, 2621, 3, 2, 2, 2, 2619, 2617,
	3, 2, 2, 2, 2619, 2620, 3, 2, 2, 2, 2620, 2622, 3, 2, 2, 2, 2621, 2619,
	3, 2, 2, 2, 2622, 2624, 5, 36, 19, 2, 2623, 2619, 3, 2, 2, 2, 2623, 2624,
	3, 2, 2, 2, 2624, 2634, 3, 2, 2, 2, 2625, 2629, 7, 66, 2, 2, 2626, 2628,
	7, 7, 2, 2, 2627, 2626, 3, 2, 2, 2, 2628, 2631, 3, 2, 2, 2, 2629, 2627,
	3, 2, 2, 2, 2629, 2630, 3, 2, 2, 2, 2630, 2632, 3, 2, 2, 2, 2631, 2629,
	3, 2, 2, 2, 2632, 2634, 5, 36, 19, 2, 2633, 2601, 3, 2, 2, 2, 2633, 2625,
	3, 2, 2, 2, 2634, 221, 3, 2, 2, 2, 2635, 2636, 9, 7, 2, 2, 2636, 223, 3,
	2, 2, 2, 2637, 2654, 7, 75, 2, 2, 2638, 2642, 7, 46, 2, 2, 2639, 2641,
	7, 7, 2, 2, 2640, 2639, 3, 2, 2, 2, 2641, 2644, 3, 2, 2, 2, 2642, 2640,
	3, 2, 2, 2, 2642, 2643, 3, 2, 2, 2, 2643, 2645, 3, 2, 2, 2, 2644, 2642,
	3, 2, 2, 2, 2645, 2649, 5, 92, 47, 2, 2646, 2648, 7, 7, 2, 2, 2647, 2646,
	3, 2, 2, 2, 2648, 2651, 3, 2, 2, 2, 2649, 2647, 3, 2, 2, 2, 2649, 2650,
	3, 2, 2, 2, 2650, 2652, 3, 2, 2, 2, 2651, 2649, 3, 2, 2, 2, 2652, 2653,
	7, 47, 2, 2, 2653, 2655, 3, 2, 2, 2, 2654, 2638, 3, 2, 2, 2, 2654, 2655,
	3, 2, 2, 2, 2655, 2658, 3, 2, 2, 2, 2656, 2657, 7, 42, 2, 2, 2657, 2659,
	5, 316, 159, 2, 2658, 2656, 3, 2, 2, 2, 2658, 2659, 3, 2, 2, 2, 2659, 2662,
	3, 2, 2, 2, 2660, 2662, 7, 60, 2, 2, 2661, 2637, 3, 2, 2, 2, 2661, 2660,
	3, 2, 2, 2, 2662, 225, 3, 2, 2, 2, 2663, 2666, 5, 120, 61, 2, 2664, 2666,
	5, 124, 63, 2, 2665, 2663, 3, 2, 2, 2, 2665, 2664, 3, 2, 2, 2, 2666, 227,
	3, 2, 2, 2, 2667, 2671, 7, 78, 2, 2, 2668, 2670, 7, 7, 2, 2, 2669, 2668,
	3, 2, 2, 2, 2670, 2673, 3, 2, 2, 2, 2671, 2669, 3, 2, 2, 2, 2671, 2672,
	3, 2, 2, 2, 2672, 2674, 3, 2, 2, 2, 2673, 2671, 3, 2, 2, 2, 2674, 2678,
	7, 11, 2, 2, 2675, 2677, 7, 7, 2, 2, 2676, 2675, 3, 2, 2, 2, 2677, 2680,
	3, 2, 2, 2, 2678, 2676, 3, 2, 2, 2, 2678, 2679, 3, 2, 2, 2, 2679, 2681,
	3, 2, 2, 2, 2680, 2678, 3, 2, 2, 2, 2681, 2685, 5, 130, 66, 2, 2682, 2684,
	7, 7, 2, 2, 2683, 2682, 3, 2, 2, 2, 2684, 2687, 3, 2, 2, 2, 2685, 2683,
	3, 2, 2, 2, 2685, 2686, 3, 2, 2, 2, 2686, 2688, 3, 2, 2, 2, 2687, 2685,
	3, 2, 2, 2, 2688, 2692, 7, 12, 2, 2, 2689, 2691, 7, 7, 2, 2, 2690, 2689,
	3, 2, 2, 2, 2691, 2694, 3, 2, 2, 2, 2692, 2690, 3, 2, 2, 2, 2692, 2693,
	3, 2, 2, 2, 2693, 2695, 3, 2, 2, 2, 2694, 2692, 3, 2, 2, 2, 2695, 2713,
	5, 226, 114, 2, 2696, 2698, 7, 29, 2, 2, 2697, 2696, 3, 2, 2, 2, 2697,
	2698, 3, 2, 2, 2, 2698, 2702, 3, 2, 2, 2, 2699, 2701, 7, 7, 2, 2, 2700,
	2699, 3, 2, 2, 2, 2701, 2704, 3, 2, 2, 2, 2702, 2700, 3, 2, 2, 2, 2702,
	2703, 3, 2, 2, 2, 2703, 2705, 3, 2, 2, 2, 2704, 2702, 3, 2, 2, 2, 2705,
	2709, 7, 79, 2, 2, 2706, 2708, 7, 7, 2, 2, 2707, 2706, 3, 2, 2, 2, 2708,
	2711, 3, 2, 2, 2, 2709, 2707, 3, 2, 2, 2, 2709, 2710, 3, 2, 2, 2, 2710,
	2712, 3, 2, 2, 2, 2711, 2709, 3, 2, 2, 2, 2712, 2714, 5, 226, 114, 2, 2713,
	2697, 3, 2, 2, 2, 2713, 2714, 3, 2, 2, 2, 2714, 2762, 3, 2, 2, 2, 2715,
	2719, 7, 78, 2, 2, 2716, 2718, 7, 7, 2, 2, 2717, 2716, 3, 2, 2, 2, 2718,
	2721, 3, 2, 2, 2, 2719, 2717, 3, 2, 2, 2, 2719, 2720, 3, 2, 2, 2, 2720,
	2722, 3, 2, 2, 2, 2721, 2719, 3, 2, 2, 2, 2722, 2726, 7, 11, 2, 2, 2723,
	2725, 7, 7, 2, 2, 2724, 2723, 3, 2, 2, 2, 2725, 2728, 3, 2, 2, 2, 2726,
	2724, 3, 2, 2, 2, 2726, 2727, 3, 2, 2, 2, 2727, 2729, 3, 2, 2, 2, 2728,
	2726, 3, 2, 2, 2, 2729, 2733, 5, 130, 66, 2, 2730, 2732, 7, 7, 2, 2, 2731,
	2730, 3, 2, 2, 2, 2732, 2735, 3, 2, 2, 2, 2733, 2731, 3, 2, 2, 2, 2733,
	2734, 3, 2, 2, 2, 2734, 2736, 3, 2, 2, 2, 2735, 2733, 3, 2, 2, 2, 2736,
	2740, 7, 12, 2, 2, 2737, 2739, 7, 7, 2, 2, 2738, 2737, 3, 2, 2, 2, 2739,
	2742, 3, 2, 2, 2, 2740, 2738, 3, 2, 2, 2, 2740, 2741, 3, 2, 2, 2, 2741,
	2750, 3, 2, 2, 2, 2742, 2740, 3, 2, 2, 2, 2743, 2747, 7, 29, 2, 2, 2744,
	2746, 7, 7, 2, 2, 2745, 2744, 3, 2, 2, 2, 2746, 2749, 3, 2, 2, 2, 2747,
	2745, 3, 2, 2, 2, 2747, 2748, 3, 2, 2, 2, 2748, 2751, 3, 2, 2, 2, 2749,
	2747, 3, 2, 2, 2, 2750, 2743, 3, 2, 2, 2, 2750, 2751, 3, 2, 2, 2, 2751,
	2752, 3, 2, 2, 2, 2752, 2756, 7, 79, 2, 2, 2753, 2755, 7, 7, 2, 2, 2754,
	2753, 3, 2, 2, 2, 2755, 2758, 3, 2, 2, 2, 2756, 2754, 3, 2, 2, 2, 2756,
	2757, 3, 2, 2, 2, 2757, 2759, 3, 2, 2, 2, 2758, 2756, 3, 2, 2, 2, 2759,
	2760, 5, 226, 114, 2, 2760, 2762, 3, 2, 2, 2, 2761, 2667, 3, 2, 2, 2, 2761,
	2715, 3, 2, 2, 2, 2762, 229, 3, 2, 2, 2, 2763, 2767, 7, 80, 2, 2, 2764,
	2766, 7, 7, 2, 2, 2765, 2764, 3, 2, 2, 2, 2766, 2769, 3, 2, 2, 2, 2767,
	2765, 3, 2, 2, 2, 2767, 2768, 3, 2, 2, 2, 2768, 2774, 3, 2, 2, 2, 2769,
	2767, 3, 2, 2, 2, 2770, 2771, 7, 11, 2, 2, 2771, 2772, 5, 130, 66, 2, 2772,
	2773, 7, 12, 2, 2, 2773, 2775, 3, 2, 2, 2, 2774, 2770, 3, 2, 2, 2, 2774,
	2775, 3, 2, 2, 2, 2775, 2779, 3, 2, 2, 2, 2776, 2778, 7, 7, 2, 2, 2777,
	2776, 3, 2, 2, 2, 2778, 2781, 3, 2, 2, 2, 2779, 2777, 3, 2, 2, 2, 2779,
	2780, 3, 2, 2, 2, 2780, 2782, 3, 2, 2, 2, 2781, 2779, 3, 2, 2, 2, 2782,
	2786, 7, 15, 2, 2, 2783, 2785, 7, 7, 2, 2, 2784, 2783, 3, 2, 2, 2, 2785,
	2788, 3, 2, 2, 2, 2786, 2784, 3, 2, 2, 2, 2786, 2787, 3, 2, 2, 2, 2787,
	2798, 3, 2, 2, 2, 2788, 2786, 3, 2, 2, 2, 2789, 2793, 5, 232, 117, 2, 2790,
	2792, 7, 7, 2, 2, 2791, 2790, 3, 2, 2, 2, 2792, 2795, 3, 2, 2, 2, 2793,
	2791, 3, 2, 2, 2, 2793, 2794, 3, 2, 2, 2, 2794, 2797, 3, 2, 2, 2, 2795,
	2793, 3, 2, 2, 2, 2796, 2789, 3, 2, 2, 2, 2797, 2800, 3, 2, 2, 2, 2798,
	2796, 3, 2, 2, 2, 2798, 2799, 3, 2, 2, 2, 2799, 2804, 3, 2, 2, 2, 2800,
	2798, 3, 2, 2, 2, 2801, 2803, 7, 7, 2, 2, 2802, 2801, 3, 2, 2, 2, 2803,
	2806, 3, 2, 2, 2, 2804, 2802, 3, 2, 2, 2, 2804, 2805, 3, 2, 2, 2, 2805,
	2807, 3, 2, 2, 2, 2806, 2804, 3, 2, 2, 2, 2807, 2808, 7, 16, 2, 2, 2808,
	231, 3, 2, 2, 2, 2809, 2826, 5, 234, 118, 2, 2810, 2812, 7, 7, 2, 2, 2811,
	2810, 3, 2, 2, 2, 2812, 2815, 3, 2, 2, 2, 2813, 2811, 3, 2, 2, 2, 2813,
	2814, 3, 2, 2, 2, 2814, 2816, 3, 2, 2, 2, 2815, 2813, 3, 2, 2, 2, 2816,
	2820, 7, 10, 2, 2, 2817, 2819, 7, 7, 2, 2, 2818, 2817, 3, 2, 2, 2, 2819,
	2822, 3, 2, 2, 2, 2820, 2818, 3, 2, 2, 2, 2820, 2821, 3, 2, 2, 2, 2821,
	2823, 3, 2, 2, 2, 2822, 2820, 3, 2, 2, 2, 2823, 2825, 5, 234, 118, 2, 2824,
	2813, 3, 2, 2, 2, 2825, 2828, 3, 2, 2, 2, 2826, 2824, 3, 2, 2, 2, 2826,
	2827, 3, 2, 2, 2, 2827, 2832, 3, 2, 2, 2, 2828, 2826, 3, 2, 2, 2, 2829,
	2831, 7, 7, 2, 2, 2830, 2829, 3, 2, 2, 2, 2831, 2834, 3, 2, 2, 2, 2832,
	2830, 3, 2, 2, 2, 2832, 2833, 3, 2, 2, 2, 2833, 2835, 3, 2, 2, 2, 2834,
	2832, 3, 2, 2, 2, 2835, 2839, 7, 36, 2, 2, 2836, 2838, 7, 7, 2, 2, 2837,
	2836, 3, 2, 2, 2, 2838, 2841, 3, 2, 2, 2, 2839, 2837, 3, 2, 2, 2, 2839,
	2840, 3, 2, 2, 2, 2840, 2842, 3, 2, 2, 2, 2841, 2839, 3, 2, 2, 2, 2842,
	2844, 5, 226, 114, 2, 2843, 2845, 5, 330, 166, 2, 2844, 2843, 3, 2, 2,
	2, 2844, 2845, 3, 2, 2, 2, 2845, 2865, 3, 2, 2, 2, 2846, 2850, 7, 79, 2,
	2, 2847, 2849, 7, 7, 2, 2, 2848, 2847, 3, 2, 2, 2, 2849, 2852, 3, 2, 2,
	2, 2850, 2848, 3, 2, 2, 2, 2850, 2851, 3, 2, 2, 2, 2851, 2853, 3, 2, 2,
	2, 2852, 2850, 3, 2, 2, 2, 2853, 2857, 7, 36, 2, 2, 2854, 2856, 7, 7, 2,
	2, 2855, 2854, 3, 2, 2, 2, 2856, 2859, 3, 2, 2, 2, 2857, 2855, 3, 2, 2,
	2, 2857, 2858, 3, 2, 2, 2, 2858, 2860, 3, 2, 2, 2, 2859, 2857, 3, 2, 2,
	2, 2860, 2862, 5, 226, 114, 2, 2861, 2863, 5, 330, 166, 2, 2862, 2861,
	3, 2, 2, 2, 2862, 2863, 3, 2, 2, 2, 2863, 2865, 3, 2, 2, 2, 2864, 2809,
	3, 2, 2, 2, 2864, 2846, 3, 2, 2, 2, 2865, 233, 3, 2, 2, 2, 2866, 2870,
	5, 130, 66, 2, 2867, 2870, 5, 236, 119, 2, 2868, 2870, 5, 238, 120, 2,
	2869, 2866, 3, 2, 2, 2, 2869, 2867, 3, 2, 2, 2, 2869, 2868, 3, 2, 2, 2,
	2870, 235, 3, 2, 2, 2, 2871, 2875, 5, 264, 133, 2, 2872, 2874, 7, 7, 2,
	2, 2873, 2872, 3, 2, 2, 2, 2874, 2877, 3, 2, 2, 2, 2875, 2873, 3, 2, 2,
	2, 2875, 2876, 3, 2, 2, 2, 2876, 2878, 3, 2, 2, 2, 2877, 2875, 3, 2, 2,
	2, 2878, 2879, 5, 130, 66, 2, 2879, 237, 3, 2, 2, 2, 2880, 2884, 5, 266,
	134, 2, 2881, 2883, 7, 7, 2, 2, 2882, 2881, 3, 2, 2, 2, 2883, 2886, 3,
	2, 2, 2, 2884, 2882, 3, 2, 2, 2, 2884, 2885, 3, 2, 2, 2, 2885, 2887, 3,
	2, 2, 2, 2886, 2884, 3, 2, 2, 2, 2887, 2888, 5, 92, 47, 2, 2888, 239, 3,
	2, 2, 2, 2889, 2893, 7, 81, 2, 2, 2890, 2892, 7, 7, 2, 2, 2891, 2890, 3,
	2, 2, 2, 2892, 2895, 3, 2, 2, 2, 2893, 2891, 3, 2, 2, 2, 2893, 2894, 3,
	2, 2, 2, 2894, 2896, 3, 2, 2, 2, 2895, 2893, 3, 2, 2, 2, 2896, 2924, 5,
	120, 61, 2, 2897, 2899, 7, 7, 2, 2, 2898, 2897, 3, 2, 2, 2, 2899, 2902,
	3, 2, 2, 2, 2900, 2898, 3, 2, 2, 2, 2900, 2901, 3, 2, 2, 2, 2901, 2903,
	3, 2, 2, 2, 2902, 2900, 3, 2, 2, 2, 2903, 2905, 5, 242, 122, 2, 2904, 2900,
	3, 2, 2, 2, 2905, 2906, 3, 2, 2, 2, 2906, 2904, 3, 2, 2, 2, 2906, 2907,
	3, 2, 2, 2, 2907, 2915, 3, 2, 2, 2, 2908, 2910, 7, 7, 2, 2, 2909, 2908,
	3, 2, 2, 2, 2910, 2913, 3, 2, 2, 2, 2911, 2909, 3, 2, 2, 2, 2911, 2912,
	3, 2, 2, 2, 2912, 2914, 3, 2, 2, 2, 2913, 2911, 3, 2, 2, 2, 2914, 2916,
	5, 244, 123, 2, 2915, 2911, 3, 2, 2, 2, 2915, 2916, 3, 2, 2, 2, 2916, 2925,
	3, 2, 2, 2, 2917, 2919, 7, 7, 2, 2, 2918, 2917, 3, 2, 2, 2, 2919, 2922,
	3, 2, 2, 2, 2920, 2918, 3, 2, 2, 2, 2920, 2921, 3, 2, 2, 2, 2921, 2923,
	3, 2, 2, 2, 2922, 2920, 3, 2, 2, 2, 2923, 2925, 5, 244, 123, 2, 2924, 2904,
	3, 2, 2, 2, 2924, 2920, 3, 2, 2, 2, 2925, 241, 3, 2, 2, 2, 2926, 2930,
	7, 82, 2, 2, 2927, 2929, 7, 7, 2, 2, 2928, 2927, 3, 2, 2, 2, 2929, 2932,
	3, 2, 2, 2, 2930, 2928, 3, 2, 2, 2, 2930, 2931, 3, 2, 2, 2, 2931, 2933,
	3, 2, 2, 2, 2932, 2930, 3, 2, 2, 2, 2933, 2937, 7, 11, 2, 2, 2934, 2936,
	5, 306, 154, 2, 2935, 2934, 3, 2, 2, 2, 2936, 2939, 3, 2, 2, 2, 2937, 2935,
	3, 2, 2, 2, 2937, 2938, 3, 2, 2, 2, 2938, 2940, 3, 2, 2, 2, 2939, 2937,
	3, 2, 2, 2, 2940, 2941, 5, 316, 159, 2, 2941, 2942, 7, 28, 2, 2, 2942,
	2943, 5, 108, 55, 2, 2943, 2947, 7, 12, 2, 2, 2944, 2946, 7, 7, 2, 2, 2945,
	2944, 3, 2, 2, 2, 2946, 2949, 3, 2, 2, 2, 2947, 2945, 3, 2, 2, 2, 2947,
	2948, 3, 2, 2, 2, 2948, 2950, 3, 2, 2, 2, 2949, 2947, 3, 2, 2, 2, 2950,
	2951, 5, 120, 61, 2, 2951, 243, 3, 2, 2, 2, 2952, 2956, 7, 83, 2, 2, 2953,
	2955, 7, 7, 2, 2, 2954, 2953, 3, 2, 2, 2, 2955, 2958, 3, 2, 2, 2, 2956,
	2954, 3, 2, 2, 2, 2956, 2957, 3, 2, 2, 2, 2957, 2959, 3, 2, 2, 2, 2958,
	2956, 3, 2, 2, 2, 2959, 2960, 5, 120, 61, 2, 2960, 245, 3, 2, 2, 2, 2961,
	2965, 5, 248, 125, 2, 2962, 2965, 5, 250, 126, 2, 2963, 2965, 5, 252, 127,
	2, 2964, 2961, 3, 2, 2, 2, 2964, 2962, 3, 2, 2, 2, 2964, 2963, 3, 2, 2,
	2, 2965, 247, 3, 2, 2, 2, 2966, 2970, 7, 84, 2, 2, 2967, 2969, 7, 7, 2,
	2, 2968, 2967, 3, 2, 2, 2, 2969, 2972, 3, 2, 2, 2, 2970, 2968, 3, 2, 2,
	2, 2970, 2971, 3, 2, 2, 2, 2971, 2973, 3, 2, 2, 2, 2972, 2970, 3, 2, 2,
	2, 2973, 2977, 7, 11, 2, 2, 2974, 2976, 5, 306, 154, 2, 2975, 2974, 3,
	2, 2, 2, 2976, 2979, 3, 2, 2, 2, 2977, 2975, 3, 2, 2, 2, 2977, 2978, 3,
	2, 2, 2, 2978, 2982, 3, 2, 2, 2, 2979, 2977, 3, 2, 2, 2, 2980, 2983, 5,
	74, 38, 2, 2981, 2983, 5, 72, 37, 2, 2982, 2980, 3, 2, 2, 2, 2982, 2981,
	3, 2, 2, 2, 2983, 2984, 3, 2, 2, 2, 2984, 2985, 7, 93, 2, 2, 2985, 2986,
	5, 130, 66, 2, 2986, 2990, 7, 12, 2, 2, 2987, 2989, 7, 7, 2, 2, 2988, 2987,
	3, 2, 2, 2, 2989, 2992, 3, 2, 2, 2, 2990, 2988, 3, 2, 2, 2, 2990, 2991,
	3, 2, 2, 2, 2991, 2994, 3, 2, 2, 2, 2992, 2990, 3, 2, 2, 2, 2993, 2995,
	5, 226, 114, 2, 2994, 2993, 3, 2, 2, 2, 2994, 2995, 3, 2, 2, 2, 2995, 249,
	3, 2, 2, 2, 2996, 3000, 7, 86, 2, 2, 2997, 2999, 7, 7, 2, 2, 2998, 2997,
	3, 2, 2, 2, 2999, 3002, 3, 2, 2, 2, 3000, 2998, 3, 2, 2, 2, 3000, 3001,
	3, 2, 2, 2, 3001, 3003, 3, 2, 2, 2, 3002, 3000, 3, 2, 2, 2, 3003, 3004,
	7, 11, 2, 2, 3004, 3005, 5, 130, 66, 2, 3005, 3009, 7, 12, 2, 2, 3006,
	3008, 7, 7, 2, 2, 3007, 3006, 3, 2, 2, 2, 3008, 3011, 3, 2, 2, 2, 3009,
	3007, 3, 2, 2, 2, 3009, 3010, 3, 2, 2, 2, 3010, 3012, 3, 2, 2, 2, 3011,
	3009, 3, 2, 2, 2, 3012, 3013, 5, 226, 114, 2, 3013, 3033, 3, 2, 2, 2, 3014,
	3018, 7, 86, 2, 2, 3015, 3017, 7, 7, 2, 2, 3016, 3015, 3, 2, 2, 2, 3017,
	3020, 3, 2, 2, 2, 3018, 3016, 3, 2, 2, 2, 3018, 3019, 3, 2, 2, 2, 3019,
	3021, 3, 2, 2, 2, 3020, 3018, 3, 2, 2, 2, 3021, 3022, 7, 11, 2, 2, 3022,
	3023, 5, 130, 66, 2, 3023, 3027, 7, 12, 2, 2, 3024, 3026, 7, 7, 2, 2, 3025,
	3024, 3, 2, 2, 2, 3026, 3029, 3, 2, 2, 2, 3027, 3025, 3, 2, 2, 2, 3027,
	3028, 3, 2, 2, 2, 3028, 3030, 3, 2, 2, 2, 3029, 3027, 3, 2, 2, 2, 3030,
	3031, 7, 29, 2, 2, 3031, 3033, 3, 2, 2, 2, 3032, 2996, 3, 2, 2, 2, 3032,
	3014, 3, 2, 2, 2, 3033, 251, 3, 2, 2, 2, 3034, 3038, 7, 85, 2, 2, 3035,
	3037, 7, 7, 2, 2, 3036, 3035, 3, 2, 2, 2, 3037, 3040, 3, 2, 2, 2, 3038,
	3036, 3, 2, 2, 2, 3038, 3039, 3, 2, 2, 2, 3039, 3042, 3, 2, 2, 2, 3040,
	3038, 3, 2, 2, 2, 3041, 3043, 5, 226, 114, 2, 3042, 3041, 3, 2, 2, 2, 3042,
	3043, 3, 2, 2, 2, 3043, 3047, 3, 2, 2, 2, 3044, 3046, 7, 7, 2, 2, 3045,
	3044, 3, 2, 2, 2, 3046, 3049, 3, 2, 2, 2, 3047, 3045, 3, 2, 2, 2, 3047,
	3048, 3, 2, 2, 2, 3048, 3050, 3, 2, 2, 2, 3049, 3047, 3, 2, 2, 2, 3050,
	3054, 7, 86, 2, 2, 3051, 3053, 7, 7, 2, 2, 3052, 3051, 3, 2, 2, 2, 3053,
	3056, 3, 2, 2, 2, 3054, 3052, 3, 2, 2, 2, 3054, 3055, 3, 2, 2, 2, 3055,
	3057, 3, 2, 2, 2, 3056, 3054, 3, 2, 2, 2, 3057, 3058, 7, 11, 2, 2, 3058,
	3059, 5, 130, 66, 2, 3059, 3060, 7, 12, 2, 2, 3060, 253, 3, 2, 2, 2, 3061,
	3065, 7, 87, 2, 2, 3062, 3064, 7, 7, 2, 2, 3063, 3062, 3, 2, 2, 2, 3064,
	3067, 3, 2, 2, 2, 3065, 3063, 3, 2, 2, 2, 3065, 3066, 3, 2, 2, 2, 3066,
	3068, 3, 2, 2, 2, 3067, 3065, 3, 2, 2, 2, 3068, 3078, 5, 130, 66, 2, 3069,
	3071, 9, 8, 2, 2, 3070, 3072, 5, 130, 66, 2, 3071, 3070, 3, 2, 2, 2, 3071,
	3072, 3, 2, 2, 2, 3072, 3078, 3, 2, 2, 2, 3073, 3078, 7, 89, 2, 2, 3074,
	3078, 7, 57, 2, 2, 3075, 3078, 7, 90, 2, 2, 3076, 3078, 7, 58, 2, 2, 3077,
	3061, 3, 2, 2, 2, 3077, 3069, 3, 2, 2, 2, 3077, 3073, 3, 2, 2, 2, 3077,
	3074, 3, 2, 2, 2, 3077, 3075, 3, 2, 2, 2, 3077, 3076, 3, 2, 2, 2, 3078,
	255, 3, 2, 2, 2, 3079, 3081, 5, 106, 54, 2, 3080, 3079, 3, 2, 2, 2, 3080,
	3081, 3, 2, 2, 2, 3081, 3085, 3, 2, 2, 2, 3082, 3084, 7, 7, 2, 2, 3083,
	3082, 3, 2, 2, 2, 3084, 3087, 3, 2, 2, 2, 3085, 3083, 3, 2, 2, 2, 3085,
	3086, 3, 2, 2, 2, 3086, 3088, 3, 2, 2, 2, 3087, 3085, 3, 2, 2, 2, 3088,
	3092, 7, 39, 2, 2, 3089, 3091, 7, 7, 2, 2, 3090, 3089, 3, 2, 2, 2, 3091,
	3094, 3, 2, 2, 2, 3092, 3090, 3, 2, 2, 2, 3092, 3093, 3, 2, 2, 2, 3093,
	3097, 3, 2, 2, 2, 3094, 3092, 3, 2, 2, 2, 3095, 3098, 5, 316, 159, 2, 3096,
	3098, 7, 63, 2, 2, 3097, 3095, 3, 2, 2, 2, 3097, 3096, 3, 2, 2, 2, 3098,
	257, 3, 2, 2, 2, 3099, 3100, 9, 9, 2, 2, 3100, 259, 3, 2, 2, 2, 3101, 3102,
	9, 10, 2, 2, 3102, 261, 3, 2, 2, 2, 3103, 3104, 9, 11, 2, 2, 3104, 263,
	3, 2, 2, 2, 3105, 3106, 9, 12, 2, 2, 3106, 265, 3, 2, 2, 2, 3107, 3108,
	9, 13, 2, 2, 3108, 267, 3, 2, 2, 2, 3109, 3110, 9, 14, 2, 2, 3110, 269,
	3, 2, 2, 2, 3111, 3112, 9, 15, 2, 2, 3112, 271, 3, 2, 2, 2, 3113, 3114,
	9, 16, 2, 2, 3114, 273, 3, 2, 2, 2, 3115, 3121, 7, 22, 2, 2, 3116, 3121,
	7, 23, 2, 2, 3117, 3121, 7, 21, 2, 2, 3118, 3121, 7, 20, 2, 2, 3119, 3121,
	5, 328, 165, 2, 3120, 3115, 3, 2, 2, 2, 3120, 3116, 3, 2, 2, 2, 3120, 3117,
	3, 2, 2, 2, 3120, 3118, 3, 2, 2, 2, 3120, 3119, 3, 2, 2, 2, 3121, 275,
	3, 2, 2, 2, 3122, 3127, 7, 22, 2, 2, 3123, 3127, 7, 23, 2, 2, 3124, 3125,
	7, 27, 2, 2, 3125, 3127, 5, 328, 165, 2, 3126, 3122, 3, 2, 2, 2, 3126,
	3123, 3, 2, 2, 2, 3126, 3124, 3, 2, 2, 2, 3127, 277, 3, 2, 2, 2, 3128,
	3132, 7, 9, 2, 2, 3129, 3132, 5, 326, 164, 2, 3130, 3132, 7, 39, 2, 2,
	3131, 3128, 3, 2, 2, 2, 3131, 3129, 3, 2, 2, 2, 3131, 3130, 3, 2, 2, 2,
	3132, 279, 3, 2, 2, 2, 3133, 3136, 5, 306, 154, 2, 3134, 3136, 5, 282,
	142, 2, 3135, 3133, 3, 2, 2, 2, 3135, 3134, 3, 2, 2, 2, 3136, 3137, 3,
	2, 2, 2, 3137, 3135, 3, 2, 2, 2, 3137, 3138, 3, 2, 2, 2, 3138, 281, 3,
	2, 2, 2, 3139, 3148, 5, 284, 143, 2, 3140, 3148, 5, 286, 144, 2, 3141,
	3148, 5, 288, 145, 2, 3142, 3148, 5, 292, 147, 2, 3143, 3148, 5, 294, 148,
	2, 3144, 3148, 5, 296, 149, 2, 3145, 3148, 5, 298, 150, 2, 3146, 3148,
	5, 302, 152, 2, 3147, 3139, 3, 2, 2, 2, 3147, 3140, 3, 2, 2, 2, 3147, 3141,
	3, 2, 2, 2, 3147, 3142, 3, 2, 2, 2, 3147, 3143, 3, 2, 2, 2, 3147, 3144,
	3, 2, 2, 2, 3147, 3145, 3, 2, 2, 2, 3147, 3146, 3, 2, 2, 2, 3148, 3152,
	3, 2, 2, 2, 3149, 3151, 7, 7, 2, 2, 3150, 3149, 3, 2, 2, 2, 3151, 3154,
	3, 2, 2, 2, 3152, 3150, 3, 2, 2, 2, 3152, 3153, 3, 2, 2, 2, 3153, 283,
	3, 2, 2, 2, 3154, 3152, 3, 2, 2, 2, 3155, 3156, 9, 17, 2, 2, 3156, 285,
	3, 2, 2, 2, 3157, 3158, 9, 18, 2, 2, 3158, 287, 3, 2, 2, 2, 3159, 3160,
	9, 19, 2, 2, 3160, 289, 3, 2, 2, 2, 3161, 3162, 9, 20, 2, 2, 3162, 291,
	3, 2, 2, 2, 3163, 3164, 9, 21, 2, 2, 3164, 293, 3, 2, 2, 2, 3165, 3166,
	7, 128, 2, 2, 3166, 295, 3, 2, 2, 2, 3167, 3168, 9, 22, 2, 2, 3168, 297,
	3, 2, 2, 2, 3169, 3170, 9, 23, 2, 2, 3170, 299, 3, 2, 2, 2, 3171, 3172,
	7, 133, 2, 2, 3172, 301, 3, 2, 2, 2, 3173, 3174, 9, 24, 2, 2, 3174, 303,
	3, 2, 2, 2, 3175, 3179, 7, 148, 2, 2, 3176, 3178, 7, 7, 2, 2, 3177, 3176,
	3, 2, 2, 2, 3178, 3181, 3, 2, 2, 2, 3179, 3177, 3, 2, 2, 2, 3179, 3180,
	3, 2, 2, 2, 3180, 305, 3, 2, 2, 2, 3181, 3179, 3, 2, 2, 2, 3182, 3185,
	5, 308, 155, 2, 3183, 3185, 5, 310, 156, 2, 3184, 3182, 3, 2, 2, 2, 3184,
	3183, 3, 2, 2, 2, 3185, 3189, 3, 2, 2, 2, 3186, 3188, 7, 7, 2, 2, 3187,
	3186, 3, 2, 2, 2, 3188, 3191, 3, 2, 2, 2, 3189, 3187, 3, 2, 2, 2, 3189,
	3190, 3, 2, 2, 2, 3190, 307, 3, 2, 2, 2, 3191, 3189, 3, 2, 2, 2, 3192,
	3196, 5, 312, 157, 2, 3193, 3195, 7, 7, 2, 2, 3194, 3193, 3, 2, 2, 2, 3195,
	3198, 3, 2, 2, 2, 3196, 3194, 3, 2, 2, 2, 3196, 3197, 3, 2, 2, 2, 3197,
	3199, 3, 2, 2, 2, 3198, 3196, 3, 2, 2, 2, 3199, 3203, 7, 28, 2, 2, 3200,
	3202, 7, 7, 2, 2, 3201, 3200, 3, 2, 2, 2, 3202, 3205, 3, 2, 2, 2, 3203,
	3201, 3, 2, 2, 2, 3203, 3204, 3, 2, 2, 2, 3204, 3206, 3, 2, 2, 2, 3205,
	3203, 3, 2, 2, 2, 3206, 3207, 5, 314, 158, 2, 3207, 3211, 3, 2, 2, 2, 3208,
	3209, 7, 42, 2, 2, 3209, 3211, 5, 314, 158, 2, 3210, 3192, 3, 2, 2, 2,
	3210, 3208, 3, 2, 2, 2, 3211, 309, 3, 2, 2, 2, 3212, 3216, 5, 312, 157,
	2, 3213, 3215, 7, 7, 2, 2, 3214, 3213, 3, 2, 2, 2, 3215, 3218, 3, 2, 2,
	2, 3216, 3214, 3, 2, 2, 2, 3216, 3217, 3, 2, 2, 2, 3217, 3219, 3, 2, 2,
	2, 3218, 3216, 3, 2, 2, 2, 3219, 3223, 7, 28, 2, 2, 3220, 3222, 7, 7, 2,
	2, 3221, 3220, 3, 2, 2, 2, 3222, 3225, 3, 2, 2, 2, 3223, 3221, 3, 2, 2,
	2, 3223, 3224, 3, 2, 2, 2, 3224, 3226, 3, 2, 2, 2, 3225, 3223, 3, 2, 2,
	2, 3226, 3228, 7, 13, 2, 2, 3227, 3229, 5, 314, 158, 2, 3228, 3227, 3,
	2, 2, 2, 3229, 3230, 3, 2, 2, 2, 3230, 3228, 3, 2, 2, 2, 3230, 3231, 3,
	2, 2, 2, 3231, 3232, 3, 2, 2, 2, 3232, 3233, 7, 14, 2, 2, 3233, 3244, 3,
	2, 2, 2, 3234, 3235, 7, 42, 2, 2, 3235, 3237, 7, 13, 2, 2, 3236, 3238,
	5, 314, 158, 2, 3237, 3236, 3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 3237,
	3, 2, 2, 2, 3239, 3240, 3, 2, 2, 2, 3240, 3241, 3, 2, 2, 2, 3241, 3242,
	7, 14, 2, 2, 3242, 3244, 3, 2, 2, 2, 3243, 3212, 3, 2, 2, 2, 3243, 3234,
	3, 2, 2, 2, 3244, 311, 3, 2, 2, 2, 3245, 3246, 9, 25, 2, 2, 3246, 313,
	3, 2, 2, 2, 3247, 3250, 5, 32, 17, 2, 3248, 3250, 5, 108, 55, 2, 3249,
	3247, 3, 2, 2, 2, 3249, 3248, 3, 2, 2, 2, 3250, 315, 3, 2, 2, 2, 3251,
	3252, 9, 26, 2, 2, 3252, 317, 3, 2, 2, 2, 3253, 3264, 5, 316, 159, 2, 3254,
	3256, 7, 7, 2, 2, 3255, 3254, 3, 2, 2, 2, 3256, 3259, 3, 2, 2, 2, 3257,
	3255, 3, 2, 2, 2, 3257, 3258, 3, 2, 2, 2, 3258, 3260, 3, 2, 2, 2, 3259,
	3257, 3, 2, 2, 2, 3260, 3261, 7, 9, 2, 2, 3261, 3263, 5, 316, 159, 2, 3262,
	3257, 3, 2, 2, 2, 3263, 3266, 3, 2, 2, 2, 3264, 3262, 3, 2, 2, 2, 3264,
	3265, 3, 2, 2, 2, 3265, 319, 3, 2, 2, 2, 3266, 3264, 3, 2, 2, 2, 3267,
	3269, 7, 3, 2, 2, 3268, 3270, 7, 7, 2, 2, 3269, 3268, 3, 2, 2, 2, 3270,
	3271, 3, 2, 2, 2, 3271, 3269, 3, 2, 2, 2, 3271, 3272, 3, 2, 2, 2, 3272,
	321, 3, 2, 2, 2, 3273, 3274, 9, 27, 2, 2, 3274, 323, 3, 2, 2, 2, 3275,
	3276, 7, 45, 2, 2, 3276, 3277, 7, 28, 2, 2, 3277, 325, 3, 2, 2, 2, 3278,
	3279, 7, 45, 2, 2, 3279, 3280, 7, 9, 2, 2, 3280, 327, 3, 2, 2, 2, 3281,
	3282, 9, 28, 2, 2, 3282, 329, 3, 2, 2, 2, 3283, 3287, 9, 29, 2, 2, 3284,
	3286, 7, 7, 2, 2, 3285, 3284, 3, 2, 2, 2, 3286, 3289, 3, 2, 2, 2, 3287,
	3285, 3, 2, 2, 2, 3287, 3288, 3, 2, 2, 2, 3288, 3292, 3, 2, 2, 2, 3289,
	3287, 3, 2, 2, 2, 3290, 3292, 7, 2, 2, 3, 3291, 3283, 3, 2, 2, 2, 3291,
	3290, 3, 2, 2, 2, 3292, 331, 3, 2, 2, 2, 3293, 3295, 9, 29, 2, 2, 3294,
	3293, 3, 2, 2, 2, 3295, 3296, 3, 2, 2, 2, 3296, 3294, 3, 2, 2, 2, 3296,
	3297, 3, 2, 2, 2, 3297, 3300, 3, 2, 2, 2, 3298, 3300, 7, 2, 2, 3, 3299,
	3294, 3, 2, 2, 2, 3299, 3298, 3, 2, 2, 2, 3300, 333, 3, 2, 2, 2, 504, 335,
	340, 346, 354, 360, 365, 371, 381, 390, 397, 404, 409, 414, 420, 422, 427,
	435, 438, 445, 448, 454, 461, 465, 470, 474, 479, 486, 490, 495, 499, 504,
	511, 515, 518, 524, 527, 535, 542, 549, 555, 558, 563, 567, 572, 575, 580,
	588, 595, 602, 606, 612, 619, 625, 631, 637, 646, 653, 658, 665, 674, 681,
	688, 692, 699, 705, 711, 717, 724, 731, 735, 740, 744, 750, 758, 762, 768,
	772, 777, 784, 788, 793, 802, 809, 815, 821, 825, 831, 834, 840, 844, 849,
	853, 856, 862, 866, 871, 878, 883, 888, 895, 902, 909, 913, 918, 922, 927,
	931, 937, 944, 951, 957, 960, 965, 969, 974, 980, 987, 991, 997, 1004,
	1013, 1020, 1024, 1031, 1035, 1038, 1044, 1051, 1058, 1062, 1067, 1071,
	1074, 1080, 1087, 1091, 1096, 1103, 1107, 1112, 1116, 1119, 1125, 1129,
	1134, 1141, 1146, 1151, 1156, 1161, 1165, 1170, 1177, 1182, 1184, 1189,
	1192, 1197, 1201, 1206, 1210, 1213, 1216, 1221, 1225, 1228, 1230, 1236,
	1243, 1250, 1256, 1262, 1270, 1276, 1283, 1290, 1294, 1300, 1306, 1310,
	1316, 1323, 1330, 1337, 1341, 1346, 1350, 1353, 1357, 1363, 1369, 1371,
	1379, 1386, 1390, 1395, 1400, 1403, 1409, 1416, 1420, 1425, 1432, 1441,
	1448, 1455, 1461, 1467, 1471, 1476, 1481, 1488, 1495, 1499, 1504, 1510,
	1517, 1521, 1524, 1530, 1535, 1542, 1545, 1551, 1558, 1565, 1570, 1576,
	1580, 1586, 1593, 1596, 1602, 1609, 1615, 1620, 1626, 1633, 1639, 1646,
	1653, 1662, 1669, 1674, 1680, 1684, 1690, 1695, 1700, 1707, 1712, 1716,
	1722, 1731, 1738, 1745, 1751, 1757, 1764, 1771, 1780, 1787, 1798, 1802,
	1804, 1808, 1810, 1817, 1824, 1831, 1841, 1846, 1854, 1861, 1867, 1874,
	1881, 1887, 1895, 1902, 1910, 1915, 1922, 1931, 1936, 1938, 1945, 1952,
	1959, 1967, 1974, 1982, 1988, 1996, 2003, 2011, 2018, 2025, 2032, 2037,
	2042, 2053, 2056, 2063, 2065, 2072, 2078, 2085, 2091, 2098, 2105, 2111,
	2117, 2125, 2132, 2138, 2141, 2144, 2148, 2151, 2156, 2160, 2165, 2174,
	2182, 2189, 2196, 2202, 2208, 2212, 2216, 2222, 2229, 2236, 2242, 2248,
	2252, 2257, 2261, 2266, 2272, 2276, 2279, 2284, 2291, 2298, 2301, 2304,
	2309, 2328, 2334, 2341, 2350, 2357, 2364, 2370, 2376, 2380, 2388, 2392,
	2398, 2403, 2405, 2414, 2416, 2433, 2440, 2449, 2456, 2465, 2469, 2474,
	2481, 2488, 2493, 2499, 2506, 2512, 2516, 2523, 2530, 2534, 2536, 2542,
	2549, 2554, 2559, 2566, 2573, 2577, 2582, 2586, 2591, 2595, 2599, 2605,
	2612, 2619, 2623, 2629, 2633, 2642, 2649, 2654, 2658, 2661, 2665, 2671,
	2678, 2685, 2692, 2697, 2702, 2709, 2713, 2719, 2726, 2733, 2740, 2747,
	2750, 2756, 2761, 2767, 2774, 2779, 2786, 2793, 2798, 2804, 2813, 2820,
	2826, 2832, 2839, 2844, 2850, 2857, 2862, 2864, 2869, 2875, 2884, 2893,
	2900, 2906, 2911, 2915, 2920, 2924, 2930, 2937, 2947, 2956, 2964, 2970,
	2977, 2982, 2990, 2994, 3000, 3009, 3018, 3027, 3032, 3038, 3042, 3047,
	3054, 3065, 3071, 3077, 3080, 3085, 3092, 3097, 3120, 3126, 3131, 3135,
	3137, 3147, 3152, 3179, 3184, 3189, 3196, 3203, 3210, 3216, 3223, 3230,
	3239, 3243, 3249, 3257, 3264, 3271, 3287, 3291, 3296, 3299,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "", "'...'", "'.'", "','", "'('", "')'", "'['", "']'",
	"'{'", "'}'", "'*'", "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'",
	"'||'", "", "'!'", "':'", "';'", "'='", "'+='", "'-='", "'*='", "'/='",
	"'%='", "'->'", "'=>'", "'..'", "'::'", "';;'", "'#'", "'@'", "", "", "'?'",
	"'<'", "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", "'==='",
	"'''", "", "", "", "", "", "'package'", "'import'", "'class'", "'interface'",
	"'fun'", "'object'", "'val'", "'var'", "'typealias'", "'constructor'",
	"'by'", "'companion'", "'init'", "'this'", "'super'", "'typeof'", "'where'",
	"'if'", "'else'", "'when'", "'try'", "'catch'", "'finally'", "'for'", "'do'",
	"'while'", "'throw'", "'return'", "'continue'", "'break'", "'as'", "'is'",
	"'in'", "", "", "'out'", "'get'", "'set'", "'dynamic'", "'@file'", "'@field'",
	"'@property'", "'@get'", "'@set'", "'@receiver'", "'@param'", "'@setparam'",
	"'@delegate'", "'public'", "'private'", "'protected'", "'internal'", "'enum'",
	"'sealed'", "'annotation'", "'data'", "'inner'", "'tailrec'", "'operator'",
	"'inline'", "'infix'", "'external'", "'suspend'", "'override'", "'abstract'",
	"'final'", "'open'", "'const'", "'lateinit'", "'vararg'", "'noinline'",
	"'crossinline'", "'reified'", "'expect'", "'actual'", "", "'\"\"\"'", "",
	"", "", "", "", "", "", "", "'null'",
}
var symbolicNames = []string{
	"", "ShebangLine", "DelimitedComment", "LineComment", "WS", "NL", "RESERVED",
	"DOT", "COMMA", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL",
	"MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", "CONJ", "DISJ", "EXCL_WS",
	"EXCL_NO_WS", "COLON", "SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT",
	"MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW",
	"RANGE", "COLONCOLON", "DOUBLE_SEMICOLON", "HASH", "AT", "AT_WS", "QUEST_WS",
	"QUEST_NO_WS", "LANGLE", "RANGLE", "LE", "GE", "EXCL_EQ", "EXCL_EQEQ",
	"AS_SAFE", "EQEQ", "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT",
	"BREAK_AT", "THIS_AT", "SUPER_AT", "PACKAGE", "IMPORT", "CLASS", "INTERFACE",
	"FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", "CONSTRUCTOR", "BY", "COMPANION",
	"INIT", "THIS", "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", "TRY",
	"CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", "RETURN", "CONTINUE",
	"BREAK", "AS", "IS", "IN", "NOT_IS", "NOT_IN", "OUT", "GETTER", "SETTER",
	"DYNAMIC", "AT_FILE", "AT_FIELD", "AT_PROPERTY", "AT_GET", "AT_SET", "AT_RECEIVER",
	"AT_PARAM", "AT_SETPARAM", "AT_DELEGATE", "PUBLIC", "PRIVATE", "PROTECTED",
	"INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", "INNER", "TAILREC",
	"OPERATOR", "INLINE", "INFIX", "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT",
	"FINAL", "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", "CROSSINLINE",
	"REIFIED", "EXPECT", "ACTUAL", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", "RealLiteral",
	"FloatLiteral", "DoubleLiteral", "LongLiteral", "IntegerLiteral", "HexLiteral",
	"BinLiteral", "BooleanLiteral", "NullLiteral", "Identifier", "IdentifierAt",
	"FieldIdentifier", "CharacterLiteral", "ErrorCharacter", "UNICODE_CLASS_LL",
	"UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", "UNICODE_CLASS_LU",
	"UNICODE_CLASS_ND", "UNICODE_CLASS_NL", "Inside_Comment", "Inside_WS",
	"Inside_NL", "QUOTE_CLOSE", "LineStrRef", "LineStrText", "LineStrEscapedChar",
	"LineStrExprStart", "TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote", "MultiLineStrRef",
	"MultiLineStrText", "MultiLineStrExprStart",
}

var ruleNames = []string{
	"kotlinFile", "script", "fileAnnotation", "packageHeader", "importList",
	"importHeader", "importAlias", "topLevelObject", "classDeclaration", "primaryConstructor",
	"classParameters", "classParameter", "delegationSpecifiers", "annotatedDelegationSpecifier",
	"delegationSpecifier", "constructorInvocation", "explicitDelegation", "classBody",
	"classMemberDeclarations", "classMemberDeclaration", "anonymousInitializer",
	"secondaryConstructor", "constructorDelegationCall", "enumClassBody", "enumEntries",
	"enumEntry", "functionDeclaration", "functionValueParameters", "functionValueParameter",
	"parameter", "setterParameter", "functionBody", "objectDeclaration", "companionObject",
	"propertyDeclaration", "multiVariableDeclaration", "variableDeclaration",
	"propertyDelegate", "getter", "setter", "typeAlias", "typeParameters",
	"typeParameter", "typeParameterModifiers", "typeParameterModifier", "type_",
	"typeModifiers", "typeModifier", "parenthesizedType", "nullableType", "typeReference",
	"functionType", "receiverType", "userType", "parenthesizedUserType", "simpleUserType",
	"functionTypeParameters", "typeConstraints", "typeConstraint", "block",
	"statements", "statement", "declaration", "assignment", "expression", "disjunction",
	"conjunction", "equality", "comparison", "infixOperation", "elvisExpression",
	"infixFunctionCall", "rangeExpression", "additiveExpression", "multiplicativeExpression",
	"asExpression", "prefixUnaryExpression", "unaryPrefix", "postfixUnaryExpression",
	"postfixUnarySuffix", "directlyAssignableExpression", "assignableExpression",
	"assignableSuffix", "indexingSuffix", "navigationSuffix", "callSuffix",
	"annotatedLambda", "valueArguments", "typeArguments", "typeProjection",
	"typeProjectionModifiers", "typeProjectionModifier", "valueArgument", "primaryExpression",
	"parenthesizedExpression", "collectionLiteral", "literalConstant", "stringLiteral",
	"lineStringLiteral", "multiLineStringLiteral", "lineStringContent", "lineStringExpression",
	"multiLineStringContent", "multiLineStringExpression", "lambdaLiteral",
	"lambdaParameters", "lambdaParameter", "anonymousFunction", "functionLiteral",
	"objectLiteral", "thisExpression", "superExpression", "controlStructureBody",
	"ifExpression", "whenExpression", "whenEntry", "whenCondition", "rangeTest",
	"typeTest", "tryExpression", "catchBlock", "finallyBlock", "loopStatement",
	"forStatement", "whileStatement", "doWhileStatement", "jumpExpression",
	"callableReference", "assignmentAndOperator", "equalityOperator", "comparisonOperator",
	"inOperator", "isOperator", "additiveOperator", "multiplicativeOperator",
	"asOperator", "prefixUnaryOperator", "postfixUnaryOperator", "memberAccessOperator",
	"modifiers", "modifier", "classModifier", "memberModifier", "visibilityModifier",
	"varianceModifier", "functionModifier", "propertyModifier", "inheritanceModifier",
	"parameterModifier", "reificationModifier", "platformModifier", "label",
	"annotation", "singleAnnotation", "multiAnnotation", "annotationUseSiteTarget",
	"unescapedAnnotation", "simpleIdentifier", "identifier", "shebangLine",
	"quest", "elvis", "safeNav", "excl", "semi", "semis",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type KotlinParser struct {
	*antlr.BaseParser
}

func NewKotlinParser(input antlr.TokenStream) *KotlinParser {
	this := new(KotlinParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "KotlinParser.g4"

	return this
}

// KotlinParser tokens.
const (
	KotlinParserEOF                   = antlr.TokenEOF
	KotlinParserShebangLine           = 1
	KotlinParserDelimitedComment      = 2
	KotlinParserLineComment           = 3
	KotlinParserWS                    = 4
	KotlinParserNL                    = 5
	KotlinParserRESERVED              = 6
	KotlinParserDOT                   = 7
	KotlinParserCOMMA                 = 8
	KotlinParserLPAREN                = 9
	KotlinParserRPAREN                = 10
	KotlinParserLSQUARE               = 11
	KotlinParserRSQUARE               = 12
	KotlinParserLCURL                 = 13
	KotlinParserRCURL                 = 14
	KotlinParserMULT                  = 15
	KotlinParserMOD                   = 16
	KotlinParserDIV                   = 17
	KotlinParserADD                   = 18
	KotlinParserSUB                   = 19
	KotlinParserINCR                  = 20
	KotlinParserDECR                  = 21
	KotlinParserCONJ                  = 22
	KotlinParserDISJ                  = 23
	KotlinParserEXCL_WS               = 24
	KotlinParserEXCL_NO_WS            = 25
	KotlinParserCOLON                 = 26
	KotlinParserSEMICOLON             = 27
	KotlinParserASSIGNMENT            = 28
	KotlinParserADD_ASSIGNMENT        = 29
	KotlinParserSUB_ASSIGNMENT        = 30
	KotlinParserMULT_ASSIGNMENT       = 31
	KotlinParserDIV_ASSIGNMENT        = 32
	KotlinParserMOD_ASSIGNMENT        = 33
	KotlinParserARROW                 = 34
	KotlinParserDOUBLE_ARROW          = 35
	KotlinParserRANGE                 = 36
	KotlinParserCOLONCOLON            = 37
	KotlinParserDOUBLE_SEMICOLON      = 38
	KotlinParserHASH                  = 39
	KotlinParserAT                    = 40
	KotlinParserAT_WS                 = 41
	KotlinParserQUEST_WS              = 42
	KotlinParserQUEST_NO_WS           = 43
	KotlinParserLANGLE                = 44
	KotlinParserRANGLE                = 45
	KotlinParserLE                    = 46
	KotlinParserGE                    = 47
	KotlinParserEXCL_EQ               = 48
	KotlinParserEXCL_EQEQ             = 49
	KotlinParserAS_SAFE               = 50
	KotlinParserEQEQ                  = 51
	KotlinParserEQEQEQ                = 52
	KotlinParserSINGLE_QUOTE          = 53
	KotlinParserRETURN_AT             = 54
	KotlinParserCONTINUE_AT           = 55
	KotlinParserBREAK_AT              = 56
	KotlinParserTHIS_AT               = 57
	KotlinParserSUPER_AT              = 58
	KotlinParserPACKAGE               = 59
	KotlinParserIMPORT                = 60
	KotlinParserCLASS                 = 61
	KotlinParserINTERFACE             = 62
	KotlinParserFUN                   = 63
	KotlinParserOBJECT                = 64
	KotlinParserVAL                   = 65
	KotlinParserVAR                   = 66
	KotlinParserTYPE_ALIAS            = 67
	KotlinParserCONSTRUCTOR           = 68
	KotlinParserBY                    = 69
	KotlinParserCOMPANION             = 70
	KotlinParserINIT                  = 71
	KotlinParserTHIS                  = 72
	KotlinParserSUPER                 = 73
	KotlinParserTYPEOF                = 74
	KotlinParserWHERE                 = 75
	KotlinParserIF                    = 76
	KotlinParserELSE                  = 77
	KotlinParserWHEN                  = 78
	KotlinParserTRY                   = 79
	KotlinParserCATCH                 = 80
	KotlinParserFINALLY               = 81
	KotlinParserFOR                   = 82
	KotlinParserDO                    = 83
	KotlinParserWHILE                 = 84
	KotlinParserTHROW                 = 85
	KotlinParserRETURN                = 86
	KotlinParserCONTINUE              = 87
	KotlinParserBREAK                 = 88
	KotlinParserAS                    = 89
	KotlinParserIS                    = 90
	KotlinParserIN                    = 91
	KotlinParserNOT_IS                = 92
	KotlinParserNOT_IN                = 93
	KotlinParserOUT                   = 94
	KotlinParserGETTER                = 95
	KotlinParserSETTER                = 96
	KotlinParserDYNAMIC               = 97
	KotlinParserAT_FILE               = 98
	KotlinParserAT_FIELD              = 99
	KotlinParserAT_PROPERTY           = 100
	KotlinParserAT_GET                = 101
	KotlinParserAT_SET                = 102
	KotlinParserAT_RECEIVER           = 103
	KotlinParserAT_PARAM              = 104
	KotlinParserAT_SETPARAM           = 105
	KotlinParserAT_DELEGATE           = 106
	KotlinParserPUBLIC                = 107
	KotlinParserPRIVATE               = 108
	KotlinParserPROTECTED             = 109
	KotlinParserINTERNAL              = 110
	KotlinParserENUM                  = 111
	KotlinParserSEALED                = 112
	KotlinParserANNOTATION            = 113
	KotlinParserDATA                  = 114
	KotlinParserINNER                 = 115
	KotlinParserTAILREC               = 116
	KotlinParserOPERATOR              = 117
	KotlinParserINLINE                = 118
	KotlinParserINFIX                 = 119
	KotlinParserEXTERNAL              = 120
	KotlinParserSUSPEND               = 121
	KotlinParserOVERRIDE              = 122
	KotlinParserABSTRACT              = 123
	KotlinParserFINAL                 = 124
	KotlinParserOPEN                  = 125
	KotlinParserCONST                 = 126
	KotlinParserLATEINIT              = 127
	KotlinParserVARARG                = 128
	KotlinParserNOINLINE              = 129
	KotlinParserCROSSINLINE           = 130
	KotlinParserREIFIED               = 131
	KotlinParserEXPECT                = 132
	KotlinParserACTUAL                = 133
	KotlinParserQUOTE_OPEN            = 134
	KotlinParserTRIPLE_QUOTE_OPEN     = 135
	KotlinParserRealLiteral           = 136
	KotlinParserFloatLiteral          = 137
	KotlinParserDoubleLiteral         = 138
	KotlinParserLongLiteral           = 139
	KotlinParserIntegerLiteral        = 140
	KotlinParserHexLiteral            = 141
	KotlinParserBinLiteral            = 142
	KotlinParserBooleanLiteral        = 143
	KotlinParserNullLiteral           = 144
	KotlinParserIdentifier            = 145
	KotlinParserIdentifierAt          = 146
	KotlinParserFieldIdentifier       = 147
	KotlinParserCharacterLiteral      = 148
	KotlinParserErrorCharacter        = 149
	KotlinParserUNICODE_CLASS_LL      = 150
	KotlinParserUNICODE_CLASS_LM      = 151
	KotlinParserUNICODE_CLASS_LO      = 152
	KotlinParserUNICODE_CLASS_LT      = 153
	KotlinParserUNICODE_CLASS_LU      = 154
	KotlinParserUNICODE_CLASS_ND      = 155
	KotlinParserUNICODE_CLASS_NL      = 156
	KotlinParserInside_Comment        = 157
	KotlinParserInside_WS             = 158
	KotlinParserInside_NL             = 159
	KotlinParserQUOTE_CLOSE           = 160
	KotlinParserLineStrRef            = 161
	KotlinParserLineStrText           = 162
	KotlinParserLineStrEscapedChar    = 163
	KotlinParserLineStrExprStart      = 164
	KotlinParserTRIPLE_QUOTE_CLOSE    = 165
	KotlinParserMultiLineStringQuote  = 166
	KotlinParserMultiLineStrRef       = 167
	KotlinParserMultiLineStrText      = 168
	KotlinParserMultiLineStrExprStart = 169
)

// KotlinParser rules.
const (
	KotlinParserRULE_kotlinFile                   = 0
	KotlinParserRULE_script                       = 1
	KotlinParserRULE_fileAnnotation               = 2
	KotlinParserRULE_packageHeader                = 3
	KotlinParserRULE_importList                   = 4
	KotlinParserRULE_importHeader                 = 5
	KotlinParserRULE_importAlias                  = 6
	KotlinParserRULE_topLevelObject               = 7
	KotlinParserRULE_classDeclaration             = 8
	KotlinParserRULE_primaryConstructor           = 9
	KotlinParserRULE_classParameters              = 10
	KotlinParserRULE_classParameter               = 11
	KotlinParserRULE_delegationSpecifiers         = 12
	KotlinParserRULE_annotatedDelegationSpecifier = 13
	KotlinParserRULE_delegationSpecifier          = 14
	KotlinParserRULE_constructorInvocation        = 15
	KotlinParserRULE_explicitDelegation           = 16
	KotlinParserRULE_classBody                    = 17
	KotlinParserRULE_classMemberDeclarations      = 18
	KotlinParserRULE_classMemberDeclaration       = 19
	KotlinParserRULE_anonymousInitializer         = 20
	KotlinParserRULE_secondaryConstructor         = 21
	KotlinParserRULE_constructorDelegationCall    = 22
	KotlinParserRULE_enumClassBody                = 23
	KotlinParserRULE_enumEntries                  = 24
	KotlinParserRULE_enumEntry                    = 25
	KotlinParserRULE_functionDeclaration          = 26
	KotlinParserRULE_functionValueParameters      = 27
	KotlinParserRULE_functionValueParameter       = 28
	KotlinParserRULE_parameter                    = 29
	KotlinParserRULE_setterParameter              = 30
	KotlinParserRULE_functionBody                 = 31
	KotlinParserRULE_objectDeclaration            = 32
	KotlinParserRULE_companionObject              = 33
	KotlinParserRULE_propertyDeclaration          = 34
	KotlinParserRULE_multiVariableDeclaration     = 35
	KotlinParserRULE_variableDeclaration          = 36
	KotlinParserRULE_propertyDelegate             = 37
	KotlinParserRULE_getter                       = 38
	KotlinParserRULE_setter                       = 39
	KotlinParserRULE_typeAlias                    = 40
	KotlinParserRULE_typeParameters               = 41
	KotlinParserRULE_typeParameter                = 42
	KotlinParserRULE_typeParameterModifiers       = 43
	KotlinParserRULE_typeParameterModifier        = 44
	KotlinParserRULE_type_                        = 45
	KotlinParserRULE_typeModifiers                = 46
	KotlinParserRULE_typeModifier                 = 47
	KotlinParserRULE_parenthesizedType            = 48
	KotlinParserRULE_nullableType                 = 49
	KotlinParserRULE_typeReference                = 50
	KotlinParserRULE_functionType                 = 51
	KotlinParserRULE_receiverType                 = 52
	KotlinParserRULE_userType                     = 53
	KotlinParserRULE_parenthesizedUserType        = 54
	KotlinParserRULE_simpleUserType               = 55
	KotlinParserRULE_functionTypeParameters       = 56
	KotlinParserRULE_typeConstraints              = 57
	KotlinParserRULE_typeConstraint               = 58
	KotlinParserRULE_block                        = 59
	KotlinParserRULE_statements                   = 60
	KotlinParserRULE_statement                    = 61
	KotlinParserRULE_declaration                  = 62
	KotlinParserRULE_assignment                   = 63
	KotlinParserRULE_expression                   = 64
	KotlinParserRULE_disjunction                  = 65
	KotlinParserRULE_conjunction                  = 66
	KotlinParserRULE_equality                     = 67
	KotlinParserRULE_comparison                   = 68
	KotlinParserRULE_infixOperation               = 69
	KotlinParserRULE_elvisExpression              = 70
	KotlinParserRULE_infixFunctionCall            = 71
	KotlinParserRULE_rangeExpression              = 72
	KotlinParserRULE_additiveExpression           = 73
	KotlinParserRULE_multiplicativeExpression     = 74
	KotlinParserRULE_asExpression                 = 75
	KotlinParserRULE_prefixUnaryExpression        = 76
	KotlinParserRULE_unaryPrefix                  = 77
	KotlinParserRULE_postfixUnaryExpression       = 78
	KotlinParserRULE_postfixUnarySuffix           = 79
	KotlinParserRULE_directlyAssignableExpression = 80
	KotlinParserRULE_assignableExpression         = 81
	KotlinParserRULE_assignableSuffix             = 82
	KotlinParserRULE_indexingSuffix               = 83
	KotlinParserRULE_navigationSuffix             = 84
	KotlinParserRULE_callSuffix                   = 85
	KotlinParserRULE_annotatedLambda              = 86
	KotlinParserRULE_valueArguments               = 87
	KotlinParserRULE_typeArguments                = 88
	KotlinParserRULE_typeProjection               = 89
	KotlinParserRULE_typeProjectionModifiers      = 90
	KotlinParserRULE_typeProjectionModifier       = 91
	KotlinParserRULE_valueArgument                = 92
	KotlinParserRULE_primaryExpression            = 93
	KotlinParserRULE_parenthesizedExpression      = 94
	KotlinParserRULE_collectionLiteral            = 95
	KotlinParserRULE_literalConstant              = 96
	KotlinParserRULE_stringLiteral                = 97
	KotlinParserRULE_lineStringLiteral            = 98
	KotlinParserRULE_multiLineStringLiteral       = 99
	KotlinParserRULE_lineStringContent            = 100
	KotlinParserRULE_lineStringExpression         = 101
	KotlinParserRULE_multiLineStringContent       = 102
	KotlinParserRULE_multiLineStringExpression    = 103
	KotlinParserRULE_lambdaLiteral                = 104
	KotlinParserRULE_lambdaParameters             = 105
	KotlinParserRULE_lambdaParameter              = 106
	KotlinParserRULE_anonymousFunction            = 107
	KotlinParserRULE_functionLiteral              = 108
	KotlinParserRULE_objectLiteral                = 109
	KotlinParserRULE_thisExpression               = 110
	KotlinParserRULE_superExpression              = 111
	KotlinParserRULE_controlStructureBody         = 112
	KotlinParserRULE_ifExpression                 = 113
	KotlinParserRULE_whenExpression               = 114
	KotlinParserRULE_whenEntry                    = 115
	KotlinParserRULE_whenCondition                = 116
	KotlinParserRULE_rangeTest                    = 117
	KotlinParserRULE_typeTest                     = 118
	KotlinParserRULE_tryExpression                = 119
	KotlinParserRULE_catchBlock                   = 120
	KotlinParserRULE_finallyBlock                 = 121
	KotlinParserRULE_loopStatement                = 122
	KotlinParserRULE_forStatement                 = 123
	KotlinParserRULE_whileStatement               = 124
	KotlinParserRULE_doWhileStatement             = 125
	KotlinParserRULE_jumpExpression               = 126
	KotlinParserRULE_callableReference            = 127
	KotlinParserRULE_assignmentAndOperator        = 128
	KotlinParserRULE_equalityOperator             = 129
	KotlinParserRULE_comparisonOperator           = 130
	KotlinParserRULE_inOperator                   = 131
	KotlinParserRULE_isOperator                   = 132
	KotlinParserRULE_additiveOperator             = 133
	KotlinParserRULE_multiplicativeOperator       = 134
	KotlinParserRULE_asOperator                   = 135
	KotlinParserRULE_prefixUnaryOperator          = 136
	KotlinParserRULE_postfixUnaryOperator         = 137
	KotlinParserRULE_memberAccessOperator         = 138
	KotlinParserRULE_modifiers                    = 139
	KotlinParserRULE_modifier                     = 140
	KotlinParserRULE_classModifier                = 141
	KotlinParserRULE_memberModifier               = 142
	KotlinParserRULE_visibilityModifier           = 143
	KotlinParserRULE_varianceModifier             = 144
	KotlinParserRULE_functionModifier             = 145
	KotlinParserRULE_propertyModifier             = 146
	KotlinParserRULE_inheritanceModifier          = 147
	KotlinParserRULE_parameterModifier            = 148
	KotlinParserRULE_reificationModifier          = 149
	KotlinParserRULE_platformModifier             = 150
	KotlinParserRULE_label                        = 151
	KotlinParserRULE_annotation                   = 152
	KotlinParserRULE_singleAnnotation             = 153
	KotlinParserRULE_multiAnnotation              = 154
	KotlinParserRULE_annotationUseSiteTarget      = 155
	KotlinParserRULE_unescapedAnnotation          = 156
	KotlinParserRULE_simpleIdentifier             = 157
	KotlinParserRULE_identifier                   = 158
	KotlinParserRULE_shebangLine                  = 159
	KotlinParserRULE_quest                        = 160
	KotlinParserRULE_elvis                        = 161
	KotlinParserRULE_safeNav                      = 162
	KotlinParserRULE_excl                         = 163
	KotlinParserRULE_semi                         = 164
	KotlinParserRULE_semis                        = 165
)

// IKotlinFileContext is an interface to support dynamic dispatch.
type IKotlinFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKotlinFileContext differentiates from other interfaces.
	IsKotlinFileContext()
}

type KotlinFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKotlinFileContext() *KotlinFileContext {
	var p = new(KotlinFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_kotlinFile
	return p
}

func (*KotlinFileContext) IsKotlinFileContext() {}

func NewKotlinFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KotlinFileContext {
	var p = new(KotlinFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_kotlinFile

	return p
}

func (s *KotlinFileContext) GetParser() antlr.Parser { return s.parser }

func (s *KotlinFileContext) PackageHeader() IPackageHeaderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageHeaderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageHeaderContext)
}

func (s *KotlinFileContext) ImportList() IImportListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportListContext)
}

func (s *KotlinFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(KotlinParserEOF, 0)
}

func (s *KotlinFileContext) ShebangLine() IShebangLineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShebangLineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShebangLineContext)
}

func (s *KotlinFileContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *KotlinFileContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *KotlinFileContext) AllFileAnnotation() []IFileAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileAnnotationContext)(nil)).Elem())
	var tst = make([]IFileAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileAnnotationContext)
		}
	}

	return tst
}

func (s *KotlinFileContext) FileAnnotation(i int) IFileAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileAnnotationContext)
}

func (s *KotlinFileContext) AllTopLevelObject() []ITopLevelObjectContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITopLevelObjectContext)(nil)).Elem())
	var tst = make([]ITopLevelObjectContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITopLevelObjectContext)
		}
	}

	return tst
}

func (s *KotlinFileContext) TopLevelObject(i int) ITopLevelObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITopLevelObjectContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITopLevelObjectContext)
}

func (s *KotlinFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KotlinFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KotlinFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterKotlinFile(s)
	}
}

func (s *KotlinFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitKotlinFile(s)
	}
}

func (p *KotlinParser) KotlinFile() (localctx IKotlinFileContext) {
	localctx = NewKotlinFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, KotlinParserRULE_kotlinFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserShebangLine {
		{
			p.SetState(332)
			p.ShebangLine()
		}

	}
	p.SetState(338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(335)
			p.Match(KotlinParserNL)
		}

		p.SetState(340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT_FILE {
		{
			p.SetState(341)
			p.FileAnnotation()
		}

		p.SetState(346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(347)
		p.PackageHeader()
	}
	{
		p.SetState(348)
		p.ImportList()
	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(KotlinParserAT-40))|(1<<(KotlinParserCLASS-40))|(1<<(KotlinParserINTERFACE-40))|(1<<(KotlinParserFUN-40))|(1<<(KotlinParserOBJECT-40))|(1<<(KotlinParserVAL-40))|(1<<(KotlinParserVAR-40))|(1<<(KotlinParserTYPE_ALIAS-40)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(349)
			p.TopLevelObject()
		}

		p.SetState(354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(355)
		p.Match(KotlinParserEOF)
	}

	return localctx
}

// IScriptContext is an interface to support dynamic dispatch.
type IScriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScriptContext differentiates from other interfaces.
	IsScriptContext()
}

type ScriptContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptContext() *ScriptContext {
	var p = new(ScriptContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_script
	return p
}

func (*ScriptContext) IsScriptContext() {}

func NewScriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptContext {
	var p = new(ScriptContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_script

	return p
}

func (s *ScriptContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptContext) PackageHeader() IPackageHeaderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageHeaderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageHeaderContext)
}

func (s *ScriptContext) ImportList() IImportListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportListContext)
}

func (s *ScriptContext) EOF() antlr.TerminalNode {
	return s.GetToken(KotlinParserEOF, 0)
}

func (s *ScriptContext) ShebangLine() IShebangLineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShebangLineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShebangLineContext)
}

func (s *ScriptContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ScriptContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ScriptContext) AllFileAnnotation() []IFileAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileAnnotationContext)(nil)).Elem())
	var tst = make([]IFileAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileAnnotationContext)
		}
	}

	return tst
}

func (s *ScriptContext) FileAnnotation(i int) IFileAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileAnnotationContext)
}

func (s *ScriptContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ScriptContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ScriptContext) AllSemi() []ISemiContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISemiContext)(nil)).Elem())
	var tst = make([]ISemiContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISemiContext)
		}
	}

	return tst
}

func (s *ScriptContext) Semi(i int) ISemiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemiContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISemiContext)
}

func (s *ScriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterScript(s)
	}
}

func (s *ScriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitScript(s)
	}
}

func (p *KotlinParser) Script() (localctx IScriptContext) {
	localctx = NewScriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, KotlinParserRULE_script)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserShebangLine {
		{
			p.SetState(357)
			p.ShebangLine()
		}

	}
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(360)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(365)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT_FILE {
		{
			p.SetState(366)
			p.FileAnnotation()
		}

		p.SetState(371)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(372)
		p.PackageHeader()
	}
	{
		p.SetState(373)
		p.ImportList()
	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<KotlinParserNL)|(1<<KotlinParserLPAREN)|(1<<KotlinParserLSQUARE)|(1<<KotlinParserLCURL)|(1<<KotlinParserADD)|(1<<KotlinParserSUB)|(1<<KotlinParserINCR)|(1<<KotlinParserDECR)|(1<<KotlinParserEXCL_WS)|(1<<KotlinParserEXCL_NO_WS))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(KotlinParserCOLONCOLON-37))|(1<<(KotlinParserAT-37))|(1<<(KotlinParserRETURN_AT-37))|(1<<(KotlinParserCONTINUE_AT-37))|(1<<(KotlinParserBREAK_AT-37))|(1<<(KotlinParserTHIS_AT-37))|(1<<(KotlinParserSUPER_AT-37))|(1<<(KotlinParserIMPORT-37))|(1<<(KotlinParserCLASS-37))|(1<<(KotlinParserINTERFACE-37))|(1<<(KotlinParserFUN-37))|(1<<(KotlinParserOBJECT-37))|(1<<(KotlinParserVAL-37))|(1<<(KotlinParserVAR-37))|(1<<(KotlinParserTYPE_ALIAS-37))|(1<<(KotlinParserCONSTRUCTOR-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(KotlinParserBY-69))|(1<<(KotlinParserCOMPANION-69))|(1<<(KotlinParserINIT-69))|(1<<(KotlinParserTHIS-69))|(1<<(KotlinParserSUPER-69))|(1<<(KotlinParserWHERE-69))|(1<<(KotlinParserIF-69))|(1<<(KotlinParserWHEN-69))|(1<<(KotlinParserTRY-69))|(1<<(KotlinParserCATCH-69))|(1<<(KotlinParserFINALLY-69))|(1<<(KotlinParserFOR-69))|(1<<(KotlinParserDO-69))|(1<<(KotlinParserWHILE-69))|(1<<(KotlinParserTHROW-69))|(1<<(KotlinParserRETURN-69))|(1<<(KotlinParserCONTINUE-69))|(1<<(KotlinParserBREAK-69))|(1<<(KotlinParserOUT-69))|(1<<(KotlinParserGETTER-69))|(1<<(KotlinParserSETTER-69))|(1<<(KotlinParserDYNAMIC-69))|(1<<(KotlinParserAT_FIELD-69))|(1<<(KotlinParserAT_PROPERTY-69)))) != 0) || (((_la-101)&-(0x1f+1)) == 0 && ((1<<uint((_la-101)))&((1<<(KotlinParserAT_GET-101))|(1<<(KotlinParserAT_SET-101))|(1<<(KotlinParserAT_RECEIVER-101))|(1<<(KotlinParserAT_PARAM-101))|(1<<(KotlinParserAT_SETPARAM-101))|(1<<(KotlinParserAT_DELEGATE-101))|(1<<(KotlinParserPUBLIC-101))|(1<<(KotlinParserPRIVATE-101))|(1<<(KotlinParserPROTECTED-101))|(1<<(KotlinParserINTERNAL-101))|(1<<(KotlinParserENUM-101))|(1<<(KotlinParserSEALED-101))|(1<<(KotlinParserANNOTATION-101))|(1<<(KotlinParserDATA-101))|(1<<(KotlinParserINNER-101))|(1<<(KotlinParserTAILREC-101))|(1<<(KotlinParserOPERATOR-101))|(1<<(KotlinParserINLINE-101))|(1<<(KotlinParserINFIX-101))|(1<<(KotlinParserEXTERNAL-101))|(1<<(KotlinParserSUSPEND-101))|(1<<(KotlinParserOVERRIDE-101))|(1<<(KotlinParserABSTRACT-101))|(1<<(KotlinParserFINAL-101))|(1<<(KotlinParserOPEN-101))|(1<<(KotlinParserCONST-101))|(1<<(KotlinParserLATEINIT-101))|(1<<(KotlinParserVARARG-101))|(1<<(KotlinParserNOINLINE-101))|(1<<(KotlinParserCROSSINLINE-101))|(1<<(KotlinParserREIFIED-101))|(1<<(KotlinParserEXPECT-101)))) != 0) || (((_la-133)&-(0x1f+1)) == 0 && ((1<<uint((_la-133)))&((1<<(KotlinParserACTUAL-133))|(1<<(KotlinParserQUOTE_OPEN-133))|(1<<(KotlinParserTRIPLE_QUOTE_OPEN-133))|(1<<(KotlinParserRealLiteral-133))|(1<<(KotlinParserLongLiteral-133))|(1<<(KotlinParserIntegerLiteral-133))|(1<<(KotlinParserHexLiteral-133))|(1<<(KotlinParserBinLiteral-133))|(1<<(KotlinParserBooleanLiteral-133))|(1<<(KotlinParserNullLiteral-133))|(1<<(KotlinParserIdentifier-133))|(1<<(KotlinParserIdentifierAt-133))|(1<<(KotlinParserCharacterLiteral-133)))) != 0) {
		{
			p.SetState(374)
			p.Statement()
		}
		{
			p.SetState(375)
			p.Semi()
		}

		p.SetState(381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(382)
		p.Match(KotlinParserEOF)
	}

	return localctx
}

// IFileAnnotationContext is an interface to support dynamic dispatch.
type IFileAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileAnnotationContext differentiates from other interfaces.
	IsFileAnnotationContext()
}

type FileAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileAnnotationContext() *FileAnnotationContext {
	var p = new(FileAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_fileAnnotation
	return p
}

func (*FileAnnotationContext) IsFileAnnotationContext() {}

func NewFileAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileAnnotationContext {
	var p = new(FileAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_fileAnnotation

	return p
}

func (s *FileAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *FileAnnotationContext) AllUnescapedAnnotation() []IUnescapedAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnescapedAnnotationContext)(nil)).Elem())
	var tst = make([]IUnescapedAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnescapedAnnotationContext)
		}
	}

	return tst
}

func (s *FileAnnotationContext) UnescapedAnnotation(i int) IUnescapedAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnescapedAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnescapedAnnotationContext)
}

func (s *FileAnnotationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FileAnnotationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FileAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FileAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFileAnnotation(s)
	}
}

func (s *FileAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFileAnnotation(s)
	}
}

func (p *KotlinParser) FileAnnotation() (localctx IFileAnnotationContext) {
	localctx = NewFileAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, KotlinParserRULE_fileAnnotation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(384)
		p.Match(KotlinParserAT_FILE)
	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(385)
			p.Match(KotlinParserNL)
		}

		p.SetState(390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(391)
		p.Match(KotlinParserCOLON)
	}
	p.SetState(395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(392)
			p.Match(KotlinParserNL)
		}

		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLSQUARE:
		{
			p.SetState(398)
			p.Match(KotlinParserLSQUARE)
		}
		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(KotlinParserIMPORT-60))|(1<<(KotlinParserCONSTRUCTOR-60))|(1<<(KotlinParserBY-60))|(1<<(KotlinParserCOMPANION-60))|(1<<(KotlinParserINIT-60))|(1<<(KotlinParserWHERE-60))|(1<<(KotlinParserCATCH-60))|(1<<(KotlinParserFINALLY-60)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(KotlinParserOUT-94))|(1<<(KotlinParserGETTER-94))|(1<<(KotlinParserSETTER-94))|(1<<(KotlinParserDYNAMIC-94))|(1<<(KotlinParserPUBLIC-94))|(1<<(KotlinParserPRIVATE-94))|(1<<(KotlinParserPROTECTED-94))|(1<<(KotlinParserINTERNAL-94))|(1<<(KotlinParserENUM-94))|(1<<(KotlinParserSEALED-94))|(1<<(KotlinParserANNOTATION-94))|(1<<(KotlinParserDATA-94))|(1<<(KotlinParserINNER-94))|(1<<(KotlinParserTAILREC-94))|(1<<(KotlinParserOPERATOR-94))|(1<<(KotlinParserINLINE-94))|(1<<(KotlinParserINFIX-94))|(1<<(KotlinParserEXTERNAL-94))|(1<<(KotlinParserSUSPEND-94))|(1<<(KotlinParserOVERRIDE-94))|(1<<(KotlinParserABSTRACT-94))|(1<<(KotlinParserFINAL-94))|(1<<(KotlinParserOPEN-94)))) != 0) || (((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(KotlinParserCONST-126))|(1<<(KotlinParserLATEINIT-126))|(1<<(KotlinParserVARARG-126))|(1<<(KotlinParserNOINLINE-126))|(1<<(KotlinParserCROSSINLINE-126))|(1<<(KotlinParserREIFIED-126))|(1<<(KotlinParserEXPECT-126))|(1<<(KotlinParserACTUAL-126))|(1<<(KotlinParserIdentifier-126)))) != 0) {
			{
				p.SetState(399)
				p.UnescapedAnnotation()
			}

			p.SetState(402)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(404)
			p.Match(KotlinParserRSQUARE)
		}

	case KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(406)
			p.UnescapedAnnotation()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(409)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IPackageHeaderContext is an interface to support dynamic dispatch.
type IPackageHeaderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageHeaderContext differentiates from other interfaces.
	IsPackageHeaderContext()
}

type PackageHeaderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageHeaderContext() *PackageHeaderContext {
	var p = new(PackageHeaderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_packageHeader
	return p
}

func (*PackageHeaderContext) IsPackageHeaderContext() {}

func NewPackageHeaderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageHeaderContext {
	var p = new(PackageHeaderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_packageHeader

	return p
}

func (s *PackageHeaderContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageHeaderContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PackageHeaderContext) Semi() ISemiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemiContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISemiContext)
}

func (s *PackageHeaderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageHeaderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageHeaderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPackageHeader(s)
	}
}

func (s *PackageHeaderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPackageHeader(s)
	}
}

func (p *KotlinParser) PackageHeader() (localctx IPackageHeaderContext) {
	localctx = NewPackageHeaderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, KotlinParserRULE_packageHeader)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserPACKAGE {
		{
			p.SetState(415)
			p.Match(KotlinParserPACKAGE)
		}
		{
			p.SetState(416)
			p.Identifier()
		}
		p.SetState(418)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(417)
				p.Semi()
			}

		}

	}

	return localctx
}

// IImportListContext is an interface to support dynamic dispatch.
type IImportListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportListContext differentiates from other interfaces.
	IsImportListContext()
}

type ImportListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportListContext() *ImportListContext {
	var p = new(ImportListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_importList
	return p
}

func (*ImportListContext) IsImportListContext() {}

func NewImportListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportListContext {
	var p = new(ImportListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_importList

	return p
}

func (s *ImportListContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportListContext) AllImportHeader() []IImportHeaderContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportHeaderContext)(nil)).Elem())
	var tst = make([]IImportHeaderContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportHeaderContext)
		}
	}

	return tst
}

func (s *ImportListContext) ImportHeader(i int) IImportHeaderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportHeaderContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportHeaderContext)
}

func (s *ImportListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterImportList(s)
	}
}

func (s *ImportListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitImportList(s)
	}
}

func (p *KotlinParser) ImportList() (localctx IImportListContext) {
	localctx = NewImportListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, KotlinParserRULE_importList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(422)
				p.ImportHeader()
			}

		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}

	return localctx
}

// IImportHeaderContext is an interface to support dynamic dispatch.
type IImportHeaderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportHeaderContext differentiates from other interfaces.
	IsImportHeaderContext()
}

type ImportHeaderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportHeaderContext() *ImportHeaderContext {
	var p = new(ImportHeaderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_importHeader
	return p
}

func (*ImportHeaderContext) IsImportHeaderContext() {}

func NewImportHeaderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportHeaderContext {
	var p = new(ImportHeaderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_importHeader

	return p
}

func (s *ImportHeaderContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportHeaderContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportHeaderContext) ImportAlias() IImportAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportAliasContext)
}

func (s *ImportHeaderContext) Semi() ISemiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemiContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISemiContext)
}

func (s *ImportHeaderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportHeaderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportHeaderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterImportHeader(s)
	}
}

func (s *ImportHeaderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitImportHeader(s)
	}
}

func (p *KotlinParser) ImportHeader() (localctx IImportHeaderContext) {
	localctx = NewImportHeaderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, KotlinParserRULE_importHeader)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(428)
		p.Match(KotlinParserIMPORT)
	}
	{
		p.SetState(429)
		p.Identifier()
	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserDOT:
		{
			p.SetState(430)
			p.Match(KotlinParserDOT)
		}
		{
			p.SetState(431)
			p.Match(KotlinParserMULT)
		}

	case KotlinParserAS:
		{
			p.SetState(432)
			p.ImportAlias()
		}

	case KotlinParserEOF, KotlinParserNL, KotlinParserLPAREN, KotlinParserLSQUARE, KotlinParserLCURL, KotlinParserADD, KotlinParserSUB, KotlinParserINCR, KotlinParserDECR, KotlinParserEXCL_WS, KotlinParserEXCL_NO_WS, KotlinParserSEMICOLON, KotlinParserCOLONCOLON, KotlinParserAT, KotlinParserRETURN_AT, KotlinParserCONTINUE_AT, KotlinParserBREAK_AT, KotlinParserTHIS_AT, KotlinParserSUPER_AT, KotlinParserIMPORT, KotlinParserCLASS, KotlinParserINTERFACE, KotlinParserFUN, KotlinParserOBJECT, KotlinParserVAL, KotlinParserVAR, KotlinParserTYPE_ALIAS, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserTHIS, KotlinParserSUPER, KotlinParserWHERE, KotlinParserIF, KotlinParserWHEN, KotlinParserTRY, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserFOR, KotlinParserDO, KotlinParserWHILE, KotlinParserTHROW, KotlinParserRETURN, KotlinParserCONTINUE, KotlinParserBREAK, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserQUOTE_OPEN, KotlinParserTRIPLE_QUOTE_OPEN, KotlinParserRealLiteral, KotlinParserLongLiteral, KotlinParserIntegerLiteral, KotlinParserHexLiteral, KotlinParserBinLiteral, KotlinParserBooleanLiteral, KotlinParserNullLiteral, KotlinParserIdentifier, KotlinParserIdentifierAt, KotlinParserCharacterLiteral:

	default:
	}
	p.SetState(436)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(435)
			p.Semi()
		}

	}

	return localctx
}

// IImportAliasContext is an interface to support dynamic dispatch.
type IImportAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportAliasContext differentiates from other interfaces.
	IsImportAliasContext()
}

type ImportAliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportAliasContext() *ImportAliasContext {
	var p = new(ImportAliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_importAlias
	return p
}

func (*ImportAliasContext) IsImportAliasContext() {}

func NewImportAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAliasContext {
	var p = new(ImportAliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_importAlias

	return p
}

func (s *ImportAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAliasContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ImportAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterImportAlias(s)
	}
}

func (s *ImportAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitImportAlias(s)
	}
}

func (p *KotlinParser) ImportAlias() (localctx IImportAliasContext) {
	localctx = NewImportAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, KotlinParserRULE_importAlias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Match(KotlinParserAS)
	}
	{
		p.SetState(439)
		p.SimpleIdentifier()
	}

	return localctx
}

// ITopLevelObjectContext is an interface to support dynamic dispatch.
type ITopLevelObjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTopLevelObjectContext differentiates from other interfaces.
	IsTopLevelObjectContext()
}

type TopLevelObjectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopLevelObjectContext() *TopLevelObjectContext {
	var p = new(TopLevelObjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_topLevelObject
	return p
}

func (*TopLevelObjectContext) IsTopLevelObjectContext() {}

func NewTopLevelObjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopLevelObjectContext {
	var p = new(TopLevelObjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_topLevelObject

	return p
}

func (s *TopLevelObjectContext) GetParser() antlr.Parser { return s.parser }

func (s *TopLevelObjectContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *TopLevelObjectContext) Semis() ISemisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemisContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISemisContext)
}

func (s *TopLevelObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopLevelObjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopLevelObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTopLevelObject(s)
	}
}

func (s *TopLevelObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTopLevelObject(s)
	}
}

func (p *KotlinParser) TopLevelObject() (localctx ITopLevelObjectContext) {
	localctx = NewTopLevelObjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, KotlinParserRULE_topLevelObject)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(441)
		p.Declaration()
	}
	p.SetState(443)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(442)
			p.Semis()
		}

	}

	return localctx
}

// IClassDeclarationContext is an interface to support dynamic dispatch.
type IClassDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassDeclarationContext differentiates from other interfaces.
	IsClassDeclarationContext()
}

type ClassDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassDeclarationContext() *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classDeclaration
	return p
}

func (*ClassDeclarationContext) IsClassDeclarationContext() {}

func NewClassDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassDeclarationContext {
	var p = new(ClassDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classDeclaration

	return p
}

func (s *ClassDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassDeclarationContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ClassDeclarationContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *ClassDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ClassDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ClassDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ClassDeclarationContext) PrimaryConstructor() IPrimaryConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryConstructorContext)
}

func (s *ClassDeclarationContext) DelegationSpecifiers() IDelegationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelegationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelegationSpecifiersContext)
}

func (s *ClassDeclarationContext) TypeConstraints() ITypeConstraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConstraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintsContext)
}

func (s *ClassDeclarationContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ClassDeclarationContext) EnumClassBody() IEnumClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumClassBodyContext)
}

func (s *ClassDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassDeclaration(s)
	}
}

func (s *ClassDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassDeclaration(s)
	}
}

func (p *KotlinParser) ClassDeclaration() (localctx IClassDeclarationContext) {
	localctx = NewClassDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, KotlinParserRULE_classDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(445)
			p.Modifiers()
		}

	}
	p.SetState(448)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserCLASS || _la == KotlinParserINTERFACE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(449)
			p.Match(KotlinParserNL)
		}

		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(455)
		p.SimpleIdentifier()
	}
	p.SetState(463)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(456)
				p.Match(KotlinParserNL)
			}

			p.SetState(461)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(462)
			p.TypeParameters()
		}

	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(465)
				p.Match(KotlinParserNL)
			}

			p.SetState(470)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(471)
			p.PrimaryConstructor()
		}

	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		p.SetState(477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(474)
				p.Match(KotlinParserNL)
			}

			p.SetState(479)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(480)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(481)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(486)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
		}
		{
			p.SetState(487)
			p.DelegationSpecifiers()
		}

	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(490)
				p.Match(KotlinParserNL)
			}

			p.SetState(495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(496)
			p.TypeConstraints()
		}

	}
	p.SetState(513)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(499)
				p.Match(KotlinParserNL)
			}

			p.SetState(504)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(505)
			p.ClassBody()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 2 {
		p.SetState(509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(506)
				p.Match(KotlinParserNL)
			}

			p.SetState(511)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(512)
			p.EnumClassBody()
		}

	}

	return localctx
}

// IPrimaryConstructorContext is an interface to support dynamic dispatch.
type IPrimaryConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryConstructorContext differentiates from other interfaces.
	IsPrimaryConstructorContext()
}

type PrimaryConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryConstructorContext() *PrimaryConstructorContext {
	var p = new(PrimaryConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_primaryConstructor
	return p
}

func (*PrimaryConstructorContext) IsPrimaryConstructorContext() {}

func NewPrimaryConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryConstructorContext {
	var p = new(PrimaryConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_primaryConstructor

	return p
}

func (s *PrimaryConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryConstructorContext) ClassParameters() IClassParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassParametersContext)
}

func (s *PrimaryConstructorContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *PrimaryConstructorContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *PrimaryConstructorContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *PrimaryConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPrimaryConstructor(s)
	}
}

func (s *PrimaryConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPrimaryConstructor(s)
	}
}

func (p *KotlinParser) PrimaryConstructor() (localctx IPrimaryConstructorContext) {
	localctx = NewPrimaryConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, KotlinParserRULE_primaryConstructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || _la == KotlinParserCONSTRUCTOR || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		p.SetState(516)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
			{
				p.SetState(515)
				p.Modifiers()
			}

		}
		{
			p.SetState(518)
			p.Match(KotlinParserCONSTRUCTOR)
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(519)
				p.Match(KotlinParserNL)
			}

			p.SetState(524)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(527)
		p.ClassParameters()
	}

	return localctx
}

// IClassParametersContext is an interface to support dynamic dispatch.
type IClassParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassParametersContext differentiates from other interfaces.
	IsClassParametersContext()
}

type ClassParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassParametersContext() *ClassParametersContext {
	var p = new(ClassParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classParameters
	return p
}

func (*ClassParametersContext) IsClassParametersContext() {}

func NewClassParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassParametersContext {
	var p = new(ClassParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classParameters

	return p
}

func (s *ClassParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassParametersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ClassParametersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ClassParametersContext) AllClassParameter() []IClassParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassParameterContext)(nil)).Elem())
	var tst = make([]IClassParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassParameterContext)
		}
	}

	return tst
}

func (s *ClassParametersContext) ClassParameter(i int) IClassParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassParameterContext)
}

func (s *ClassParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassParameters(s)
	}
}

func (s *ClassParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassParameters(s)
	}
}

func (p *KotlinParser) ClassParameters() (localctx IClassParametersContext) {
	localctx = NewClassParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, KotlinParserRULE_classParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(529)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(530)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(535)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}
	p.SetState(556)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(536)
			p.ClassParameter()
		}
		p.SetState(553)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(540)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(537)
						p.Match(KotlinParserNL)
					}

					p.SetState(542)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(543)
					p.Match(KotlinParserCOMMA)
				}
				p.SetState(547)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(544)
							p.Match(KotlinParserNL)
						}

					}
					p.SetState(549)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())
				}
				{
					p.SetState(550)
					p.ClassParameter()
				}

			}
			p.SetState(555)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())
		}

	}
	p.SetState(561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(558)
			p.Match(KotlinParserNL)
		}

		p.SetState(563)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(565)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(564)
			p.Match(KotlinParserCOMMA)
		}

	}
	{
		p.SetState(567)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// IClassParameterContext is an interface to support dynamic dispatch.
type IClassParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassParameterContext differentiates from other interfaces.
	IsClassParameterContext()
}

type ClassParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassParameterContext() *ClassParameterContext {
	var p = new(ClassParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classParameter
	return p
}

func (*ClassParameterContext) IsClassParameterContext() {}

func NewClassParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassParameterContext {
	var p = new(ClassParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classParameter

	return p
}

func (s *ClassParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassParameterContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ClassParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ClassParameterContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *ClassParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ClassParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ClassParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ClassParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassParameter(s)
	}
}

func (s *ClassParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassParameter(s)
	}
}

func (p *KotlinParser) ClassParameter() (localctx IClassParameterContext) {
	localctx = NewClassParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, KotlinParserRULE_classParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(570)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(569)
			p.Modifiers()
		}

	}
	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserVAL || _la == KotlinParserVAR {
		p.SetState(572)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KotlinParserVAL || _la == KotlinParserVAR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(575)
			p.Match(KotlinParserNL)
		}

		p.SetState(580)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(581)
		p.SimpleIdentifier()
	}
	{
		p.SetState(582)
		p.Match(KotlinParserCOLON)
	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(583)
			p.Match(KotlinParserNL)
		}

		p.SetState(588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(589)
		p.Type_()
	}
	p.SetState(604)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
		p.SetState(593)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(590)
				p.Match(KotlinParserNL)
			}

			p.SetState(595)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(596)
			p.Match(KotlinParserASSIGNMENT)
		}
		p.SetState(600)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(597)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(602)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
		}
		{
			p.SetState(603)
			p.Expression()
		}

	}

	return localctx
}

// IDelegationSpecifiersContext is an interface to support dynamic dispatch.
type IDelegationSpecifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelegationSpecifiersContext differentiates from other interfaces.
	IsDelegationSpecifiersContext()
}

type DelegationSpecifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelegationSpecifiersContext() *DelegationSpecifiersContext {
	var p = new(DelegationSpecifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_delegationSpecifiers
	return p
}

func (*DelegationSpecifiersContext) IsDelegationSpecifiersContext() {}

func NewDelegationSpecifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DelegationSpecifiersContext {
	var p = new(DelegationSpecifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_delegationSpecifiers

	return p
}

func (s *DelegationSpecifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *DelegationSpecifiersContext) AllAnnotatedDelegationSpecifier() []IAnnotatedDelegationSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotatedDelegationSpecifierContext)(nil)).Elem())
	var tst = make([]IAnnotatedDelegationSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotatedDelegationSpecifierContext)
		}
	}

	return tst
}

func (s *DelegationSpecifiersContext) AnnotatedDelegationSpecifier(i int) IAnnotatedDelegationSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotatedDelegationSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotatedDelegationSpecifierContext)
}

func (s *DelegationSpecifiersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *DelegationSpecifiersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *DelegationSpecifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DelegationSpecifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DelegationSpecifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDelegationSpecifiers(s)
	}
}

func (s *DelegationSpecifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDelegationSpecifiers(s)
	}
}

func (p *KotlinParser) DelegationSpecifiers() (localctx IDelegationSpecifiersContext) {
	localctx = NewDelegationSpecifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, KotlinParserRULE_delegationSpecifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.AnnotatedDelegationSpecifier()
	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(610)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(607)
					p.Match(KotlinParserNL)
				}

				p.SetState(612)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(613)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(617)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(614)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(619)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
			}
			{
				p.SetState(620)
				p.AnnotatedDelegationSpecifier()
			}

		}
		p.SetState(625)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())
	}

	return localctx
}

// IAnnotatedDelegationSpecifierContext is an interface to support dynamic dispatch.
type IAnnotatedDelegationSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotatedDelegationSpecifierContext differentiates from other interfaces.
	IsAnnotatedDelegationSpecifierContext()
}

type AnnotatedDelegationSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotatedDelegationSpecifierContext() *AnnotatedDelegationSpecifierContext {
	var p = new(AnnotatedDelegationSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_annotatedDelegationSpecifier
	return p
}

func (*AnnotatedDelegationSpecifierContext) IsAnnotatedDelegationSpecifierContext() {}

func NewAnnotatedDelegationSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotatedDelegationSpecifierContext {
	var p = new(AnnotatedDelegationSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_annotatedDelegationSpecifier

	return p
}

func (s *AnnotatedDelegationSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotatedDelegationSpecifierContext) DelegationSpecifier() IDelegationSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelegationSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelegationSpecifierContext)
}

func (s *AnnotatedDelegationSpecifierContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *AnnotatedDelegationSpecifierContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotatedDelegationSpecifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AnnotatedDelegationSpecifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AnnotatedDelegationSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotatedDelegationSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotatedDelegationSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnnotatedDelegationSpecifier(s)
	}
}

func (s *AnnotatedDelegationSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnnotatedDelegationSpecifier(s)
	}
}

func (p *KotlinParser) AnnotatedDelegationSpecifier() (localctx IAnnotatedDelegationSpecifierContext) {
	localctx = NewAnnotatedDelegationSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, KotlinParserRULE_annotatedDelegationSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(626)
				p.Annotation()
			}

		}
		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(632)
			p.Match(KotlinParserNL)
		}

		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(638)
		p.DelegationSpecifier()
	}

	return localctx
}

// IDelegationSpecifierContext is an interface to support dynamic dispatch.
type IDelegationSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelegationSpecifierContext differentiates from other interfaces.
	IsDelegationSpecifierContext()
}

type DelegationSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelegationSpecifierContext() *DelegationSpecifierContext {
	var p = new(DelegationSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_delegationSpecifier
	return p
}

func (*DelegationSpecifierContext) IsDelegationSpecifierContext() {}

func NewDelegationSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DelegationSpecifierContext {
	var p = new(DelegationSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_delegationSpecifier

	return p
}

func (s *DelegationSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DelegationSpecifierContext) ConstructorInvocation() IConstructorInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorInvocationContext)
}

func (s *DelegationSpecifierContext) ExplicitDelegation() IExplicitDelegationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitDelegationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitDelegationContext)
}

func (s *DelegationSpecifierContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *DelegationSpecifierContext) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *DelegationSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DelegationSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DelegationSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDelegationSpecifier(s)
	}
}

func (s *DelegationSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDelegationSpecifier(s)
	}
}

func (p *KotlinParser) DelegationSpecifier() (localctx IDelegationSpecifierContext) {
	localctx = NewDelegationSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, KotlinParserRULE_delegationSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(644)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(640)
			p.ConstructorInvocation()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(641)
			p.ExplicitDelegation()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(642)
			p.UserType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(643)
			p.FunctionType()
		}

	}

	return localctx
}

// IConstructorInvocationContext is an interface to support dynamic dispatch.
type IConstructorInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorInvocationContext differentiates from other interfaces.
	IsConstructorInvocationContext()
}

type ConstructorInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorInvocationContext() *ConstructorInvocationContext {
	var p = new(ConstructorInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_constructorInvocation
	return p
}

func (*ConstructorInvocationContext) IsConstructorInvocationContext() {}

func NewConstructorInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorInvocationContext {
	var p = new(ConstructorInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_constructorInvocation

	return p
}

func (s *ConstructorInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorInvocationContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *ConstructorInvocationContext) ValueArguments() IValueArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueArgumentsContext)
}

func (s *ConstructorInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterConstructorInvocation(s)
	}
}

func (s *ConstructorInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitConstructorInvocation(s)
	}
}

func (p *KotlinParser) ConstructorInvocation() (localctx IConstructorInvocationContext) {
	localctx = NewConstructorInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, KotlinParserRULE_constructorInvocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(646)
		p.UserType()
	}
	{
		p.SetState(647)
		p.ValueArguments()
	}

	return localctx
}

// IExplicitDelegationContext is an interface to support dynamic dispatch.
type IExplicitDelegationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitDelegationContext differentiates from other interfaces.
	IsExplicitDelegationContext()
}

type ExplicitDelegationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitDelegationContext() *ExplicitDelegationContext {
	var p = new(ExplicitDelegationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_explicitDelegation
	return p
}

func (*ExplicitDelegationContext) IsExplicitDelegationContext() {}

func NewExplicitDelegationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitDelegationContext {
	var p = new(ExplicitDelegationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_explicitDelegation

	return p
}

func (s *ExplicitDelegationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitDelegationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExplicitDelegationContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *ExplicitDelegationContext) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *ExplicitDelegationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ExplicitDelegationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ExplicitDelegationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitDelegationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitDelegationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterExplicitDelegation(s)
	}
}

func (s *ExplicitDelegationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitExplicitDelegation(s)
	}
}

func (p *KotlinParser) ExplicitDelegation() (localctx IExplicitDelegationContext) {
	localctx = NewExplicitDelegationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, KotlinParserRULE_explicitDelegation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(649)
			p.UserType()
		}

	case 2:
		{
			p.SetState(650)
			p.FunctionType()
		}

	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(653)
			p.Match(KotlinParserNL)
		}

		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(659)
		p.Match(KotlinParserBY)
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(660)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
	}
	{
		p.SetState(666)
		p.Expression()
	}

	return localctx
}

// IClassBodyContext is an interface to support dynamic dispatch.
type IClassBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassBodyContext differentiates from other interfaces.
	IsClassBodyContext()
}

type ClassBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassBodyContext() *ClassBodyContext {
	var p = new(ClassBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classBody
	return p
}

func (*ClassBodyContext) IsClassBodyContext() {}

func NewClassBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassBodyContext {
	var p = new(ClassBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classBody

	return p
}

func (s *ClassBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassBodyContext) ClassMemberDeclarations() IClassMemberDeclarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassMemberDeclarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassMemberDeclarationsContext)
}

func (s *ClassBodyContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ClassBodyContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ClassBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassBody(s)
	}
}

func (s *ClassBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassBody(s)
	}
}

func (p *KotlinParser) ClassBody() (localctx IClassBodyContext) {
	localctx = NewClassBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, KotlinParserRULE_classBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(668)
		p.Match(KotlinParserLCURL)
	}
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(669)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext())
	}
	{
		p.SetState(675)
		p.ClassMemberDeclarations()
	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(676)
			p.Match(KotlinParserNL)
		}

		p.SetState(681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(682)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// IClassMemberDeclarationsContext is an interface to support dynamic dispatch.
type IClassMemberDeclarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassMemberDeclarationsContext differentiates from other interfaces.
	IsClassMemberDeclarationsContext()
}

type ClassMemberDeclarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassMemberDeclarationsContext() *ClassMemberDeclarationsContext {
	var p = new(ClassMemberDeclarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classMemberDeclarations
	return p
}

func (*ClassMemberDeclarationsContext) IsClassMemberDeclarationsContext() {}

func NewClassMemberDeclarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassMemberDeclarationsContext {
	var p = new(ClassMemberDeclarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classMemberDeclarations

	return p
}

func (s *ClassMemberDeclarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassMemberDeclarationsContext) AllClassMemberDeclaration() []IClassMemberDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClassMemberDeclarationContext)(nil)).Elem())
	var tst = make([]IClassMemberDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClassMemberDeclarationContext)
		}
	}

	return tst
}

func (s *ClassMemberDeclarationsContext) ClassMemberDeclaration(i int) IClassMemberDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassMemberDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClassMemberDeclarationContext)
}

func (s *ClassMemberDeclarationsContext) AllSemis() []ISemisContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISemisContext)(nil)).Elem())
	var tst = make([]ISemisContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISemisContext)
		}
	}

	return tst
}

func (s *ClassMemberDeclarationsContext) Semis(i int) ISemisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemisContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISemisContext)
}

func (s *ClassMemberDeclarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassMemberDeclarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassMemberDeclarationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassMemberDeclarations(s)
	}
}

func (s *ClassMemberDeclarationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassMemberDeclarations(s)
	}
}

func (p *KotlinParser) ClassMemberDeclarations() (localctx IClassMemberDeclarationsContext) {
	localctx = NewClassMemberDeclarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, KotlinParserRULE_classMemberDeclarations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(KotlinParserAT-40))|(1<<(KotlinParserCLASS-40))|(1<<(KotlinParserINTERFACE-40))|(1<<(KotlinParserFUN-40))|(1<<(KotlinParserOBJECT-40))|(1<<(KotlinParserVAL-40))|(1<<(KotlinParserVAR-40))|(1<<(KotlinParserTYPE_ALIAS-40))|(1<<(KotlinParserCONSTRUCTOR-40))|(1<<(KotlinParserCOMPANION-40))|(1<<(KotlinParserINIT-40)))) != 0) || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(684)
			p.ClassMemberDeclaration()
		}
		p.SetState(686)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(685)
				p.Semis()
			}

		}

		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IClassMemberDeclarationContext is an interface to support dynamic dispatch.
type IClassMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassMemberDeclarationContext differentiates from other interfaces.
	IsClassMemberDeclarationContext()
}

type ClassMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassMemberDeclarationContext() *ClassMemberDeclarationContext {
	var p = new(ClassMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classMemberDeclaration
	return p
}

func (*ClassMemberDeclarationContext) IsClassMemberDeclarationContext() {}

func NewClassMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassMemberDeclarationContext {
	var p = new(ClassMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classMemberDeclaration

	return p
}

func (s *ClassMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassMemberDeclarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ClassMemberDeclarationContext) CompanionObject() ICompanionObjectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompanionObjectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompanionObjectContext)
}

func (s *ClassMemberDeclarationContext) AnonymousInitializer() IAnonymousInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymousInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnonymousInitializerContext)
}

func (s *ClassMemberDeclarationContext) SecondaryConstructor() ISecondaryConstructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecondaryConstructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecondaryConstructorContext)
}

func (s *ClassMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassMemberDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassMemberDeclaration(s)
	}
}

func (s *ClassMemberDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassMemberDeclaration(s)
	}
}

func (p *KotlinParser) ClassMemberDeclaration() (localctx IClassMemberDeclarationContext) {
	localctx = NewClassMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, KotlinParserRULE_classMemberDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(697)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(693)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(694)
			p.CompanionObject()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(695)
			p.AnonymousInitializer()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(696)
			p.SecondaryConstructor()
		}

	}

	return localctx
}

// IAnonymousInitializerContext is an interface to support dynamic dispatch.
type IAnonymousInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousInitializerContext differentiates from other interfaces.
	IsAnonymousInitializerContext()
}

type AnonymousInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousInitializerContext() *AnonymousInitializerContext {
	var p = new(AnonymousInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_anonymousInitializer
	return p
}

func (*AnonymousInitializerContext) IsAnonymousInitializerContext() {}

func NewAnonymousInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousInitializerContext {
	var p = new(AnonymousInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_anonymousInitializer

	return p
}

func (s *AnonymousInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousInitializerContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *AnonymousInitializerContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AnonymousInitializerContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AnonymousInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousInitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnonymousInitializer(s)
	}
}

func (s *AnonymousInitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnonymousInitializer(s)
	}
}

func (p *KotlinParser) AnonymousInitializer() (localctx IAnonymousInitializerContext) {
	localctx = NewAnonymousInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, KotlinParserRULE_anonymousInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(699)
		p.Match(KotlinParserINIT)
	}
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(700)
			p.Match(KotlinParserNL)
		}

		p.SetState(705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(706)
		p.Block()
	}

	return localctx
}

// ISecondaryConstructorContext is an interface to support dynamic dispatch.
type ISecondaryConstructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSecondaryConstructorContext differentiates from other interfaces.
	IsSecondaryConstructorContext()
}

type SecondaryConstructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySecondaryConstructorContext() *SecondaryConstructorContext {
	var p = new(SecondaryConstructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_secondaryConstructor
	return p
}

func (*SecondaryConstructorContext) IsSecondaryConstructorContext() {}

func NewSecondaryConstructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SecondaryConstructorContext {
	var p = new(SecondaryConstructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_secondaryConstructor

	return p
}

func (s *SecondaryConstructorContext) GetParser() antlr.Parser { return s.parser }

func (s *SecondaryConstructorContext) FunctionValueParameters() IFunctionValueParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionValueParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionValueParametersContext)
}

func (s *SecondaryConstructorContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *SecondaryConstructorContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SecondaryConstructorContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SecondaryConstructorContext) ConstructorDelegationCall() IConstructorDelegationCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorDelegationCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorDelegationCallContext)
}

func (s *SecondaryConstructorContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *SecondaryConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SecondaryConstructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SecondaryConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSecondaryConstructor(s)
	}
}

func (s *SecondaryConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSecondaryConstructor(s)
	}
}

func (p *KotlinParser) SecondaryConstructor() (localctx ISecondaryConstructorContext) {
	localctx = NewSecondaryConstructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, KotlinParserRULE_secondaryConstructor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(708)
			p.Modifiers()
		}

	}
	{
		p.SetState(711)
		p.Match(KotlinParserCONSTRUCTOR)
	}
	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(712)
			p.Match(KotlinParserNL)
		}

		p.SetState(717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(718)
		p.FunctionValueParameters()
	}
	p.SetState(733)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(719)
				p.Match(KotlinParserNL)
			}

			p.SetState(724)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(725)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(726)
				p.Match(KotlinParserNL)
			}

			p.SetState(731)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(732)
			p.ConstructorDelegationCall()
		}

	}
	p.SetState(738)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(735)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(740)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserLCURL {
		{
			p.SetState(741)
			p.Block()
		}

	}

	return localctx
}

// IConstructorDelegationCallContext is an interface to support dynamic dispatch.
type IConstructorDelegationCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorDelegationCallContext differentiates from other interfaces.
	IsConstructorDelegationCallContext()
}

type ConstructorDelegationCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorDelegationCallContext() *ConstructorDelegationCallContext {
	var p = new(ConstructorDelegationCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_constructorDelegationCall
	return p
}

func (*ConstructorDelegationCallContext) IsConstructorDelegationCallContext() {}

func NewConstructorDelegationCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDelegationCallContext {
	var p = new(ConstructorDelegationCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_constructorDelegationCall

	return p
}

func (s *ConstructorDelegationCallContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDelegationCallContext) ValueArguments() IValueArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueArgumentsContext)
}

func (s *ConstructorDelegationCallContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ConstructorDelegationCallContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ConstructorDelegationCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDelegationCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDelegationCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterConstructorDelegationCall(s)
	}
}

func (s *ConstructorDelegationCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitConstructorDelegationCall(s)
	}
}

func (p *KotlinParser) ConstructorDelegationCall() (localctx IConstructorDelegationCallContext) {
	localctx = NewConstructorDelegationCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, KotlinParserRULE_constructorDelegationCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(760)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserTHIS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(744)
			p.Match(KotlinParserTHIS)
		}
		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(745)
				p.Match(KotlinParserNL)
			}

			p.SetState(750)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(751)
			p.ValueArguments()
		}

	case KotlinParserSUPER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(752)
			p.Match(KotlinParserSUPER)
		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(753)
				p.Match(KotlinParserNL)
			}

			p.SetState(758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(759)
			p.ValueArguments()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnumClassBodyContext is an interface to support dynamic dispatch.
type IEnumClassBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumClassBodyContext differentiates from other interfaces.
	IsEnumClassBodyContext()
}

type EnumClassBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumClassBodyContext() *EnumClassBodyContext {
	var p = new(EnumClassBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_enumClassBody
	return p
}

func (*EnumClassBodyContext) IsEnumClassBodyContext() {}

func NewEnumClassBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumClassBodyContext {
	var p = new(EnumClassBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_enumClassBody

	return p
}

func (s *EnumClassBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumClassBodyContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *EnumClassBodyContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *EnumClassBodyContext) EnumEntries() IEnumEntriesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumEntriesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumEntriesContext)
}

func (s *EnumClassBodyContext) ClassMemberDeclarations() IClassMemberDeclarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassMemberDeclarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassMemberDeclarationsContext)
}

func (s *EnumClassBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumClassBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumClassBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterEnumClassBody(s)
	}
}

func (s *EnumClassBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitEnumClassBody(s)
	}
}

func (p *KotlinParser) EnumClassBody() (localctx IEnumClassBodyContext) {
	localctx = NewEnumClassBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, KotlinParserRULE_enumClassBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(762)
		p.Match(KotlinParserLCURL)
	}
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(763)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(768)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())
	}
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(KotlinParserAT-40))|(1<<(KotlinParserIMPORT-40))|(1<<(KotlinParserCONSTRUCTOR-40))|(1<<(KotlinParserBY-40))|(1<<(KotlinParserCOMPANION-40))|(1<<(KotlinParserINIT-40)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(KotlinParserWHERE-75))|(1<<(KotlinParserCATCH-75))|(1<<(KotlinParserFINALLY-75))|(1<<(KotlinParserOUT-75))|(1<<(KotlinParserGETTER-75))|(1<<(KotlinParserSETTER-75))|(1<<(KotlinParserDYNAMIC-75))|(1<<(KotlinParserAT_FIELD-75))|(1<<(KotlinParserAT_PROPERTY-75))|(1<<(KotlinParserAT_GET-75))|(1<<(KotlinParserAT_SET-75))|(1<<(KotlinParserAT_RECEIVER-75))|(1<<(KotlinParserAT_PARAM-75))|(1<<(KotlinParserAT_SETPARAM-75))|(1<<(KotlinParserAT_DELEGATE-75)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(KotlinParserPUBLIC-107))|(1<<(KotlinParserPRIVATE-107))|(1<<(KotlinParserPROTECTED-107))|(1<<(KotlinParserINTERNAL-107))|(1<<(KotlinParserENUM-107))|(1<<(KotlinParserSEALED-107))|(1<<(KotlinParserANNOTATION-107))|(1<<(KotlinParserDATA-107))|(1<<(KotlinParserINNER-107))|(1<<(KotlinParserTAILREC-107))|(1<<(KotlinParserOPERATOR-107))|(1<<(KotlinParserINLINE-107))|(1<<(KotlinParserINFIX-107))|(1<<(KotlinParserEXTERNAL-107))|(1<<(KotlinParserSUSPEND-107))|(1<<(KotlinParserOVERRIDE-107))|(1<<(KotlinParserABSTRACT-107))|(1<<(KotlinParserFINAL-107))|(1<<(KotlinParserOPEN-107))|(1<<(KotlinParserCONST-107))|(1<<(KotlinParserLATEINIT-107))|(1<<(KotlinParserVARARG-107))|(1<<(KotlinParserNOINLINE-107))|(1<<(KotlinParserCROSSINLINE-107))|(1<<(KotlinParserREIFIED-107))|(1<<(KotlinParserEXPECT-107))|(1<<(KotlinParserACTUAL-107)))) != 0) || _la == KotlinParserIdentifier {
		{
			p.SetState(769)
			p.EnumEntries()
		}

	}
	p.SetState(786)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(772)
				p.Match(KotlinParserNL)
			}

			p.SetState(777)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(778)
			p.Match(KotlinParserSEMICOLON)
		}
		p.SetState(782)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(779)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(784)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
		}
		{
			p.SetState(785)
			p.ClassMemberDeclarations()
		}

	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(788)
			p.Match(KotlinParserNL)
		}

		p.SetState(793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(794)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// IEnumEntriesContext is an interface to support dynamic dispatch.
type IEnumEntriesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumEntriesContext differentiates from other interfaces.
	IsEnumEntriesContext()
}

type EnumEntriesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumEntriesContext() *EnumEntriesContext {
	var p = new(EnumEntriesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_enumEntries
	return p
}

func (*EnumEntriesContext) IsEnumEntriesContext() {}

func NewEnumEntriesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumEntriesContext {
	var p = new(EnumEntriesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_enumEntries

	return p
}

func (s *EnumEntriesContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumEntriesContext) AllEnumEntry() []IEnumEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumEntryContext)(nil)).Elem())
	var tst = make([]IEnumEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumEntryContext)
		}
	}

	return tst
}

func (s *EnumEntriesContext) EnumEntry(i int) IEnumEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumEntryContext)
}

func (s *EnumEntriesContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *EnumEntriesContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *EnumEntriesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumEntriesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumEntriesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterEnumEntries(s)
	}
}

func (s *EnumEntriesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitEnumEntries(s)
	}
}

func (p *KotlinParser) EnumEntries() (localctx IEnumEntriesContext) {
	localctx = NewEnumEntriesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, KotlinParserRULE_enumEntries)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(796)
		p.EnumEntry()
	}
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(800)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(797)
					p.Match(KotlinParserNL)
				}

				p.SetState(802)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(803)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(807)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(804)
					p.Match(KotlinParserNL)
				}

				p.SetState(809)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(810)
				p.EnumEntry()
			}

		}
		p.SetState(815)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}
	p.SetState(819)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(816)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(821)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}
	p.SetState(823)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(822)
			p.Match(KotlinParserCOMMA)
		}

	}

	return localctx
}

// IEnumEntryContext is an interface to support dynamic dispatch.
type IEnumEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumEntryContext differentiates from other interfaces.
	IsEnumEntryContext()
}

type EnumEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumEntryContext() *EnumEntryContext {
	var p = new(EnumEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_enumEntry
	return p
}

func (*EnumEntryContext) IsEnumEntryContext() {}

func NewEnumEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumEntryContext {
	var p = new(EnumEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_enumEntry

	return p
}

func (s *EnumEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumEntryContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *EnumEntryContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *EnumEntryContext) ValueArguments() IValueArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueArgumentsContext)
}

func (s *EnumEntryContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *EnumEntryContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *EnumEntryContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *EnumEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterEnumEntry(s)
	}
}

func (s *EnumEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitEnumEntry(s)
	}
}

func (p *KotlinParser) EnumEntry() (localctx IEnumEntryContext) {
	localctx = NewEnumEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, KotlinParserRULE_enumEntry)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(832)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(825)
			p.Modifiers()
		}
		p.SetState(829)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(826)
				p.Match(KotlinParserNL)
			}

			p.SetState(831)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(834)
		p.SimpleIdentifier()
	}
	p.SetState(842)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(835)
				p.Match(KotlinParserNL)
			}

			p.SetState(840)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(841)
			p.ValueArguments()
		}

	}
	p.SetState(851)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
		p.SetState(847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(844)
				p.Match(KotlinParserNL)
			}

			p.SetState(849)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(850)
			p.ClassBody()
		}

	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *FunctionDeclarationContext) FunctionValueParameters() IFunctionValueParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionValueParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionValueParametersContext)
}

func (s *FunctionDeclarationContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *FunctionDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *FunctionDeclarationContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *FunctionDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionDeclarationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionDeclarationContext) TypeConstraints() ITypeConstraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConstraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintsContext)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionDeclaration(s)
	}
}

func (s *FunctionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionDeclaration(s)
	}
}

func (p *KotlinParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, KotlinParserRULE_functionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(853)
			p.Modifiers()
		}

	}
	{
		p.SetState(856)
		p.Match(KotlinParserFUN)
	}
	p.SetState(864)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
		p.SetState(860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(857)
				p.Match(KotlinParserNL)
			}

			p.SetState(862)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(863)
			p.TypeParameters()
		}

	}
	p.SetState(881)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
		p.SetState(869)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(866)
				p.Match(KotlinParserNL)
			}

			p.SetState(871)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(872)
			p.ReceiverType()
		}
		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(873)
				p.Match(KotlinParserNL)
			}

			p.SetState(878)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(879)
			p.Match(KotlinParserDOT)
		}

	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(883)
			p.Match(KotlinParserNL)
		}

		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(889)
		p.SimpleIdentifier()
	}
	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(890)
			p.Match(KotlinParserNL)
		}

		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(896)
		p.FunctionValueParameters()
	}
	p.SetState(911)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
		p.SetState(900)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(897)
				p.Match(KotlinParserNL)
			}

			p.SetState(902)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(903)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(904)
				p.Match(KotlinParserNL)
			}

			p.SetState(909)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(910)
			p.Type_()
		}

	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(913)
				p.Match(KotlinParserNL)
			}

			p.SetState(918)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(919)
			p.TypeConstraints()
		}

	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(922)
				p.Match(KotlinParserNL)
			}

			p.SetState(927)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(928)
			p.FunctionBody()
		}

	}

	return localctx
}

// IFunctionValueParametersContext is an interface to support dynamic dispatch.
type IFunctionValueParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionValueParametersContext differentiates from other interfaces.
	IsFunctionValueParametersContext()
}

type FunctionValueParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionValueParametersContext() *FunctionValueParametersContext {
	var p = new(FunctionValueParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionValueParameters
	return p
}

func (*FunctionValueParametersContext) IsFunctionValueParametersContext() {}

func NewFunctionValueParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionValueParametersContext {
	var p = new(FunctionValueParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionValueParameters

	return p
}

func (s *FunctionValueParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionValueParametersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionValueParametersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionValueParametersContext) AllFunctionValueParameter() []IFunctionValueParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionValueParameterContext)(nil)).Elem())
	var tst = make([]IFunctionValueParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionValueParameterContext)
		}
	}

	return tst
}

func (s *FunctionValueParametersContext) FunctionValueParameter(i int) IFunctionValueParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionValueParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionValueParameterContext)
}

func (s *FunctionValueParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionValueParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionValueParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionValueParameters(s)
	}
}

func (s *FunctionValueParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionValueParameters(s)
	}
}

func (p *KotlinParser) FunctionValueParameters() (localctx IFunctionValueParametersContext) {
	localctx = NewFunctionValueParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, KotlinParserRULE_functionValueParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(931)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(932)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
	}
	p.SetState(958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(KotlinParserAT-40))|(1<<(KotlinParserIMPORT-40))|(1<<(KotlinParserCONSTRUCTOR-40))|(1<<(KotlinParserBY-40))|(1<<(KotlinParserCOMPANION-40))|(1<<(KotlinParserINIT-40)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(KotlinParserWHERE-75))|(1<<(KotlinParserCATCH-75))|(1<<(KotlinParserFINALLY-75))|(1<<(KotlinParserOUT-75))|(1<<(KotlinParserGETTER-75))|(1<<(KotlinParserSETTER-75))|(1<<(KotlinParserDYNAMIC-75))|(1<<(KotlinParserAT_FIELD-75))|(1<<(KotlinParserAT_PROPERTY-75))|(1<<(KotlinParserAT_GET-75))|(1<<(KotlinParserAT_SET-75))|(1<<(KotlinParserAT_RECEIVER-75))|(1<<(KotlinParserAT_PARAM-75))|(1<<(KotlinParserAT_SETPARAM-75))|(1<<(KotlinParserAT_DELEGATE-75)))) != 0) || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(KotlinParserPUBLIC-107))|(1<<(KotlinParserPRIVATE-107))|(1<<(KotlinParserPROTECTED-107))|(1<<(KotlinParserINTERNAL-107))|(1<<(KotlinParserENUM-107))|(1<<(KotlinParserSEALED-107))|(1<<(KotlinParserANNOTATION-107))|(1<<(KotlinParserDATA-107))|(1<<(KotlinParserINNER-107))|(1<<(KotlinParserTAILREC-107))|(1<<(KotlinParserOPERATOR-107))|(1<<(KotlinParserINLINE-107))|(1<<(KotlinParserINFIX-107))|(1<<(KotlinParserEXTERNAL-107))|(1<<(KotlinParserSUSPEND-107))|(1<<(KotlinParserOVERRIDE-107))|(1<<(KotlinParserABSTRACT-107))|(1<<(KotlinParserFINAL-107))|(1<<(KotlinParserOPEN-107))|(1<<(KotlinParserCONST-107))|(1<<(KotlinParserLATEINIT-107))|(1<<(KotlinParserVARARG-107))|(1<<(KotlinParserNOINLINE-107))|(1<<(KotlinParserCROSSINLINE-107))|(1<<(KotlinParserREIFIED-107))|(1<<(KotlinParserEXPECT-107))|(1<<(KotlinParserACTUAL-107)))) != 0) || _la == KotlinParserIdentifier {
		{
			p.SetState(938)
			p.FunctionValueParameter()
		}
		p.SetState(955)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(942)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(939)
						p.Match(KotlinParserNL)
					}

					p.SetState(944)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(945)
					p.Match(KotlinParserCOMMA)
				}
				p.SetState(949)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(946)
						p.Match(KotlinParserNL)
					}

					p.SetState(951)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(952)
					p.FunctionValueParameter()
				}

			}
			p.SetState(957)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext())
		}

	}
	p.SetState(963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(960)
			p.Match(KotlinParserNL)
		}

		p.SetState(965)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(966)
			p.Match(KotlinParserCOMMA)
		}

	}
	{
		p.SetState(969)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// IFunctionValueParameterContext is an interface to support dynamic dispatch.
type IFunctionValueParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionValueParameterContext differentiates from other interfaces.
	IsFunctionValueParameterContext()
}

type FunctionValueParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionValueParameterContext() *FunctionValueParameterContext {
	var p = new(FunctionValueParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionValueParameter
	return p
}

func (*FunctionValueParameterContext) IsFunctionValueParameterContext() {}

func NewFunctionValueParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionValueParameterContext {
	var p = new(FunctionValueParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionValueParameter

	return p
}

func (s *FunctionValueParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionValueParameterContext) Parameter() IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *FunctionValueParameterContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *FunctionValueParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionValueParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionValueParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionValueParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionValueParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionValueParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionValueParameter(s)
	}
}

func (s *FunctionValueParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionValueParameter(s)
	}
}

func (p *KotlinParser) FunctionValueParameter() (localctx IFunctionValueParameterContext) {
	localctx = NewFunctionValueParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, KotlinParserRULE_functionValueParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(972)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(971)
			p.Modifiers()
		}

	}
	{
		p.SetState(974)
		p.Parameter()
	}
	p.SetState(989)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		p.SetState(978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(975)
				p.Match(KotlinParserNL)
			}

			p.SetState(980)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(981)
			p.Match(KotlinParserASSIGNMENT)
		}
		p.SetState(985)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(982)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(987)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())
		}
		{
			p.SetState(988)
			p.Expression()
		}

	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitParameter(s)
	}
}

func (p *KotlinParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, KotlinParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(991)
		p.SimpleIdentifier()
	}
	p.SetState(995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(992)
			p.Match(KotlinParserNL)
		}

		p.SetState(997)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(998)
		p.Match(KotlinParserCOLON)
	}
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(999)
			p.Match(KotlinParserNL)
		}

		p.SetState(1004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1005)
		p.Type_()
	}

	return localctx
}

// ISetterParameterContext is an interface to support dynamic dispatch.
type ISetterParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetterParameterContext differentiates from other interfaces.
	IsSetterParameterContext()
}

type SetterParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetterParameterContext() *SetterParameterContext {
	var p = new(SetterParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_setterParameter
	return p
}

func (*SetterParameterContext) IsSetterParameterContext() {}

func NewSetterParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetterParameterContext {
	var p = new(SetterParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_setterParameter

	return p
}

func (s *SetterParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *SetterParameterContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *SetterParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SetterParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SetterParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *SetterParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetterParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetterParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSetterParameter(s)
	}
}

func (s *SetterParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSetterParameter(s)
	}
}

func (p *KotlinParser) SetterParameter() (localctx ISetterParameterContext) {
	localctx = NewSetterParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, KotlinParserRULE_setterParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1007)
		p.SimpleIdentifier()
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1008)
			p.Match(KotlinParserNL)
		}

		p.SetState(1013)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOLON {
		{
			p.SetState(1014)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1015)
				p.Match(KotlinParserNL)
			}

			p.SetState(1020)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1021)
			p.Type_()
		}

	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionBodyContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionBodyContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionBodyContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionBody(s)
	}
}

func (s *FunctionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionBody(s)
	}
}

func (p *KotlinParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, KotlinParserRULE_functionBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1033)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLCURL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1024)
			p.Block()
		}

	case KotlinParserASSIGNMENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1025)
			p.Match(KotlinParserASSIGNMENT)
		}
		p.SetState(1029)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1026)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1031)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext())
		}
		{
			p.SetState(1032)
			p.Expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObjectDeclarationContext is an interface to support dynamic dispatch.
type IObjectDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectDeclarationContext differentiates from other interfaces.
	IsObjectDeclarationContext()
}

type ObjectDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectDeclarationContext() *ObjectDeclarationContext {
	var p = new(ObjectDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_objectDeclaration
	return p
}

func (*ObjectDeclarationContext) IsObjectDeclarationContext() {}

func NewObjectDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectDeclarationContext {
	var p = new(ObjectDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_objectDeclaration

	return p
}

func (s *ObjectDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectDeclarationContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ObjectDeclarationContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *ObjectDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ObjectDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ObjectDeclarationContext) DelegationSpecifiers() IDelegationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelegationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelegationSpecifiersContext)
}

func (s *ObjectDeclarationContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ObjectDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterObjectDeclaration(s)
	}
}

func (s *ObjectDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitObjectDeclaration(s)
	}
}

func (p *KotlinParser) ObjectDeclaration() (localctx IObjectDeclarationContext) {
	localctx = NewObjectDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, KotlinParserRULE_objectDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1036)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(1035)
			p.Modifiers()
		}

	}
	{
		p.SetState(1038)
		p.Match(KotlinParserOBJECT)
	}
	p.SetState(1042)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1039)
			p.Match(KotlinParserNL)
		}

		p.SetState(1044)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1045)
		p.SimpleIdentifier()
	}
	p.SetState(1060)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1046)
				p.Match(KotlinParserNL)
			}

			p.SetState(1051)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1052)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(1056)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1053)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1058)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
		}
		{
			p.SetState(1059)
			p.DelegationSpecifiers()
		}

	}
	p.SetState(1069)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
		p.SetState(1065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1062)
				p.Match(KotlinParserNL)
			}

			p.SetState(1067)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1068)
			p.ClassBody()
		}

	}

	return localctx
}

// ICompanionObjectContext is an interface to support dynamic dispatch.
type ICompanionObjectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompanionObjectContext differentiates from other interfaces.
	IsCompanionObjectContext()
}

type CompanionObjectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompanionObjectContext() *CompanionObjectContext {
	var p = new(CompanionObjectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_companionObject
	return p
}

func (*CompanionObjectContext) IsCompanionObjectContext() {}

func NewCompanionObjectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompanionObjectContext {
	var p = new(CompanionObjectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_companionObject

	return p
}

func (s *CompanionObjectContext) GetParser() antlr.Parser { return s.parser }

func (s *CompanionObjectContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *CompanionObjectContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *CompanionObjectContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *CompanionObjectContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *CompanionObjectContext) DelegationSpecifiers() IDelegationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelegationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelegationSpecifiersContext)
}

func (s *CompanionObjectContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *CompanionObjectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompanionObjectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompanionObjectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterCompanionObject(s)
	}
}

func (s *CompanionObjectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitCompanionObject(s)
	}
}

func (p *KotlinParser) CompanionObject() (localctx ICompanionObjectContext) {
	localctx = NewCompanionObjectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, KotlinParserRULE_companionObject)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1072)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(1071)
			p.Modifiers()
		}

	}
	{
		p.SetState(1074)
		p.Match(KotlinParserCOMPANION)
	}
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1075)
			p.Match(KotlinParserNL)
		}

		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1081)
		p.Match(KotlinParserOBJECT)
	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
		p.SetState(1085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1082)
				p.Match(KotlinParserNL)
			}

			p.SetState(1087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1088)
			p.SimpleIdentifier()
		}

	}
	p.SetState(1105)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
		p.SetState(1094)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1091)
				p.Match(KotlinParserNL)
			}

			p.SetState(1096)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1097)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(1101)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1098)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1103)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
		}
		{
			p.SetState(1104)
			p.DelegationSpecifiers()
		}

	}
	p.SetState(1114)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
		p.SetState(1110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1107)
				p.Match(KotlinParserNL)
			}

			p.SetState(1112)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1113)
			p.ClassBody()
		}

	}

	return localctx
}

// IPropertyDeclarationContext is an interface to support dynamic dispatch.
type IPropertyDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDeclarationContext differentiates from other interfaces.
	IsPropertyDeclarationContext()
}

type PropertyDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDeclarationContext() *PropertyDeclarationContext {
	var p = new(PropertyDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_propertyDeclaration
	return p
}

func (*PropertyDeclarationContext) IsPropertyDeclarationContext() {}

func NewPropertyDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDeclarationContext {
	var p = new(PropertyDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_propertyDeclaration

	return p
}

func (s *PropertyDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDeclarationContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *PropertyDeclarationContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *PropertyDeclarationContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *PropertyDeclarationContext) TypeConstraints() ITypeConstraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConstraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintsContext)
}

func (s *PropertyDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *PropertyDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *PropertyDeclarationContext) MultiVariableDeclaration() IMultiVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiVariableDeclarationContext)
}

func (s *PropertyDeclarationContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *PropertyDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PropertyDeclarationContext) PropertyDelegate() IPropertyDelegateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDelegateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDelegateContext)
}

func (s *PropertyDeclarationContext) Getter() IGetterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetterContext)
}

func (s *PropertyDeclarationContext) Setter() ISetterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetterContext)
}

func (s *PropertyDeclarationContext) Semi() ISemiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemiContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISemiContext)
}

func (s *PropertyDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPropertyDeclaration(s)
	}
}

func (s *PropertyDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPropertyDeclaration(s)
	}
}

func (p *KotlinParser) PropertyDeclaration() (localctx IPropertyDeclarationContext) {
	localctx = NewPropertyDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, KotlinParserRULE_propertyDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1117)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(1116)
			p.Modifiers()
		}

	}
	p.SetState(1119)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserVAL || _la == KotlinParserVAR) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(1127)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
		p.SetState(1123)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1120)
				p.Match(KotlinParserNL)
			}

			p.SetState(1125)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1126)
			p.TypeParameters()
		}

	}
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		p.SetState(1132)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1129)
				p.Match(KotlinParserNL)
			}

			p.SetState(1134)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1135)
			p.ReceiverType()
		}
		p.SetState(1139)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1136)
				p.Match(KotlinParserNL)
			}

			p.SetState(1141)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1142)
			p.Match(KotlinParserDOT)
		}

	}

	p.SetState(1149)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1146)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1151)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())
	}
	p.SetState(1154)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLPAREN:
		{
			p.SetState(1152)
			p.MultiVariableDeclaration()
		}

	case KotlinParserNL, KotlinParserAT, KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(1153)
			p.VariableDeclaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	p.SetState(1163)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
		p.SetState(1159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1156)
				p.Match(KotlinParserNL)
			}

			p.SetState(1161)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1162)
			p.TypeConstraints()
		}

	}
	p.SetState(1182)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1165)
				p.Match(KotlinParserNL)
			}

			p.SetState(1170)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1180)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case KotlinParserASSIGNMENT:
			{
				p.SetState(1171)
				p.Match(KotlinParserASSIGNMENT)
			}
			p.SetState(1175)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1172)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1177)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
			}
			{
				p.SetState(1178)
				p.Expression()
			}

		case KotlinParserBY:
			{
				p.SetState(1179)
				p.PropertyDelegate()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(1190)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		p.SetState(1185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == KotlinParserNL {
			{
				p.SetState(1184)
				p.Match(KotlinParserNL)
			}

			p.SetState(1187)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1189)
			p.Match(KotlinParserSEMICOLON)
		}

	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1192)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1197)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext())
	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1199)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1198)
				p.Getter()
			}

		}
		p.SetState(1211)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext()) == 1 {
			p.SetState(1204)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1201)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1206)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
			}
			p.SetState(1208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la - -1)&-(0x1f+1)) == 0 && ((1<<uint((_la - -1)))&((1<<(KotlinParserEOF - -1))|(1<<(KotlinParserNL - -1))|(1<<(KotlinParserSEMICOLON - -1)))) != 0 {
				{
					p.SetState(1207)
					p.Semi()
				}

			}
			{
				p.SetState(1210)
				p.Setter()
			}

		}

	case 2:
		p.SetState(1214)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1213)
				p.Setter()
			}

		}
		p.SetState(1226)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
			p.SetState(1219)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1216)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1221)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext())
			}
			p.SetState(1223)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la - -1)&-(0x1f+1)) == 0 && ((1<<uint((_la - -1)))&((1<<(KotlinParserEOF - -1))|(1<<(KotlinParserNL - -1))|(1<<(KotlinParserSEMICOLON - -1)))) != 0 {
				{
					p.SetState(1222)
					p.Semi()
				}

			}
			{
				p.SetState(1225)
				p.Getter()
			}

		}

	}

	return localctx
}

// IMultiVariableDeclarationContext is an interface to support dynamic dispatch.
type IMultiVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiVariableDeclarationContext differentiates from other interfaces.
	IsMultiVariableDeclarationContext()
}

type MultiVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiVariableDeclarationContext() *MultiVariableDeclarationContext {
	var p = new(MultiVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiVariableDeclaration
	return p
}

func (*MultiVariableDeclarationContext) IsMultiVariableDeclarationContext() {}

func NewMultiVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiVariableDeclarationContext {
	var p = new(MultiVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiVariableDeclaration

	return p
}

func (s *MultiVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiVariableDeclarationContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *MultiVariableDeclarationContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *MultiVariableDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *MultiVariableDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *MultiVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiVariableDeclaration(s)
	}
}

func (s *MultiVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiVariableDeclaration(s)
	}
}

func (p *KotlinParser) MultiVariableDeclaration() (localctx IMultiVariableDeclarationContext) {
	localctx = NewMultiVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, KotlinParserRULE_multiVariableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1230)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1231)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext())
	}
	{
		p.SetState(1237)
		p.VariableDeclaration()
	}
	p.SetState(1254)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1241)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1238)
					p.Match(KotlinParserNL)
				}

				p.SetState(1243)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1244)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(1248)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1245)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1250)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
			}
			{
				p.SetState(1251)
				p.VariableDeclaration()
			}

		}
		p.SetState(1256)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext())
	}
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1257)
			p.Match(KotlinParserNL)
		}

		p.SetState(1262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1263)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *VariableDeclarationContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *VariableDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *VariableDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *VariableDeclarationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitVariableDeclaration(s)
	}
}

func (p *KotlinParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, KotlinParserRULE_variableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1268)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99)))) != 0) {
		{
			p.SetState(1265)
			p.Annotation()
		}

		p.SetState(1270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1274)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1271)
			p.Match(KotlinParserNL)
		}

		p.SetState(1276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1277)
		p.SimpleIdentifier()
	}
	p.SetState(1292)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		p.SetState(1281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1278)
				p.Match(KotlinParserNL)
			}

			p.SetState(1283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1284)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(1288)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1285)
				p.Match(KotlinParserNL)
			}

			p.SetState(1290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1291)
			p.Type_()
		}

	}

	return localctx
}

// IPropertyDelegateContext is an interface to support dynamic dispatch.
type IPropertyDelegateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyDelegateContext differentiates from other interfaces.
	IsPropertyDelegateContext()
}

type PropertyDelegateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyDelegateContext() *PropertyDelegateContext {
	var p = new(PropertyDelegateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_propertyDelegate
	return p
}

func (*PropertyDelegateContext) IsPropertyDelegateContext() {}

func NewPropertyDelegateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyDelegateContext {
	var p = new(PropertyDelegateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_propertyDelegate

	return p
}

func (s *PropertyDelegateContext) GetParser() antlr.Parser { return s.parser }

func (s *PropertyDelegateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PropertyDelegateContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *PropertyDelegateContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *PropertyDelegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyDelegateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyDelegateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPropertyDelegate(s)
	}
}

func (s *PropertyDelegateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPropertyDelegate(s)
	}
}

func (p *KotlinParser) PropertyDelegate() (localctx IPropertyDelegateContext) {
	localctx = NewPropertyDelegateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, KotlinParserRULE_propertyDelegate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1294)
		p.Match(KotlinParserBY)
	}
	p.SetState(1298)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1295)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1300)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())
	}
	{
		p.SetState(1301)
		p.Expression()
	}

	return localctx
}

// IGetterContext is an interface to support dynamic dispatch.
type IGetterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetterContext differentiates from other interfaces.
	IsGetterContext()
}

type GetterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetterContext() *GetterContext {
	var p = new(GetterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_getter
	return p
}

func (*GetterContext) IsGetterContext() {}

func NewGetterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetterContext {
	var p = new(GetterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_getter

	return p
}

func (s *GetterContext) GetParser() antlr.Parser { return s.parser }

func (s *GetterContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *GetterContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *GetterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *GetterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *GetterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *GetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterGetter(s)
	}
}

func (s *GetterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitGetter(s)
	}
}

func (p *KotlinParser) Getter() (localctx IGetterContext) {
	localctx = NewGetterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, KotlinParserRULE_getter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1348)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
			{
				p.SetState(1303)
				p.Modifiers()
			}

		}
		{
			p.SetState(1306)
			p.Match(KotlinParserGETTER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1308)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
			{
				p.SetState(1307)
				p.Modifiers()
			}

		}
		{
			p.SetState(1310)
			p.Match(KotlinParserGETTER)
		}
		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1311)
				p.Match(KotlinParserNL)
			}

			p.SetState(1316)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1317)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(1321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1318)
				p.Match(KotlinParserNL)
			}

			p.SetState(1323)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1324)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(1339)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
			p.SetState(1328)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1325)
					p.Match(KotlinParserNL)
				}

				p.SetState(1330)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1331)
				p.Match(KotlinParserCOLON)
			}
			p.SetState(1335)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1332)
					p.Match(KotlinParserNL)
				}

				p.SetState(1337)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1338)
				p.Type_()
			}

		}
		p.SetState(1344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1341)
				p.Match(KotlinParserNL)
			}

			p.SetState(1346)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1347)
			p.FunctionBody()
		}

	}

	return localctx
}

// ISetterContext is an interface to support dynamic dispatch.
type ISetterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetterContext differentiates from other interfaces.
	IsSetterContext()
}

type SetterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetterContext() *SetterContext {
	var p = new(SetterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_setter
	return p
}

func (*SetterContext) IsSetterContext() {}

func NewSetterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetterContext {
	var p = new(SetterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_setter

	return p
}

func (s *SetterContext) GetParser() antlr.Parser { return s.parser }

func (s *SetterContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *SetterContext) SetterParameter() ISetterParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetterParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetterParameterContext)
}

func (s *SetterContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *SetterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SetterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SetterContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *SetterContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *SetterContext) AllParameterModifier() []IParameterModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterModifierContext)(nil)).Elem())
	var tst = make([]IParameterModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterModifierContext)
		}
	}

	return tst
}

func (s *SetterContext) ParameterModifier(i int) IParameterModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterModifierContext)
}

func (s *SetterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *SetterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSetter(s)
	}
}

func (s *SetterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSetter(s)
	}
}

func (p *KotlinParser) Setter() (localctx ISetterContext) {
	localctx = NewSetterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, KotlinParserRULE_setter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
			{
				p.SetState(1350)
				p.Modifiers()
			}

		}
		{
			p.SetState(1353)
			p.Match(KotlinParserSETTER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
			{
				p.SetState(1354)
				p.Modifiers()
			}

		}
		{
			p.SetState(1357)
			p.Match(KotlinParserSETTER)
		}
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1358)
				p.Match(KotlinParserNL)
			}

			p.SetState(1363)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1364)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(1369)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(1367)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
					{
						p.SetState(1365)
						p.Annotation()
					}

				case KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE:
					{
						p.SetState(1366)
						p.ParameterModifier()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(1371)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())
		}
		{
			p.SetState(1372)
			p.SetterParameter()
		}
		{
			p.SetState(1373)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(1388)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			p.SetState(1377)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1374)
					p.Match(KotlinParserNL)
				}

				p.SetState(1379)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1380)
				p.Match(KotlinParserCOLON)
			}
			p.SetState(1384)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1381)
					p.Match(KotlinParserNL)
				}

				p.SetState(1386)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1387)
				p.Type_()
			}

		}
		p.SetState(1393)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1390)
				p.Match(KotlinParserNL)
			}

			p.SetState(1395)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1396)
			p.FunctionBody()
		}

	}

	return localctx
}

// ITypeAliasContext is an interface to support dynamic dispatch.
type ITypeAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasContext differentiates from other interfaces.
	IsTypeAliasContext()
}

type TypeAliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasContext() *TypeAliasContext {
	var p = new(TypeAliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeAlias
	return p
}

func (*TypeAliasContext) IsTypeAliasContext() {}

func NewTypeAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasContext {
	var p = new(TypeAliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeAlias

	return p
}

func (s *TypeAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *TypeAliasContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAliasContext) Modifiers() IModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifiersContext)
}

func (s *TypeAliasContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeAliasContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeAliasContext) TypeParameters() ITypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *TypeAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeAlias(s)
	}
}

func (s *TypeAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeAlias(s)
	}
}

func (p *KotlinParser) TypeAlias() (localctx ITypeAliasContext) {
	localctx = NewTypeAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, KotlinParserRULE_typeAlias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99))|(1<<(KotlinParserPUBLIC-99))|(1<<(KotlinParserPRIVATE-99))|(1<<(KotlinParserPROTECTED-99))|(1<<(KotlinParserINTERNAL-99))|(1<<(KotlinParserENUM-99))|(1<<(KotlinParserSEALED-99))|(1<<(KotlinParserANNOTATION-99))|(1<<(KotlinParserDATA-99))|(1<<(KotlinParserINNER-99))|(1<<(KotlinParserTAILREC-99))|(1<<(KotlinParserOPERATOR-99))|(1<<(KotlinParserINLINE-99))|(1<<(KotlinParserINFIX-99))|(1<<(KotlinParserEXTERNAL-99))|(1<<(KotlinParserSUSPEND-99))|(1<<(KotlinParserOVERRIDE-99))|(1<<(KotlinParserABSTRACT-99))|(1<<(KotlinParserFINAL-99))|(1<<(KotlinParserOPEN-99))|(1<<(KotlinParserCONST-99))|(1<<(KotlinParserLATEINIT-99))|(1<<(KotlinParserVARARG-99))|(1<<(KotlinParserNOINLINE-99))|(1<<(KotlinParserCROSSINLINE-99)))) != 0) || _la == KotlinParserEXPECT || _la == KotlinParserACTUAL {
		{
			p.SetState(1400)
			p.Modifiers()
		}

	}
	{
		p.SetState(1403)
		p.Match(KotlinParserTYPE_ALIAS)
	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1404)
			p.Match(KotlinParserNL)
		}

		p.SetState(1409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1410)
		p.SimpleIdentifier()
	}
	p.SetState(1418)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
		p.SetState(1414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1411)
				p.Match(KotlinParserNL)
			}

			p.SetState(1416)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1417)
			p.TypeParameters()
		}

	}
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1420)
			p.Match(KotlinParserNL)
		}

		p.SetState(1425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1426)
		p.Match(KotlinParserASSIGNMENT)
	}
	p.SetState(1430)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1427)
			p.Match(KotlinParserNL)
		}

		p.SetState(1432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1433)
		p.Type_()
	}

	return localctx
}

// ITypeParametersContext is an interface to support dynamic dispatch.
type ITypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParametersContext differentiates from other interfaces.
	IsTypeParametersContext()
}

type TypeParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParametersContext() *TypeParametersContext {
	var p = new(TypeParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeParameters
	return p
}

func (*TypeParametersContext) IsTypeParametersContext() {}

func NewTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParametersContext {
	var p = new(TypeParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeParameters

	return p
}

func (s *TypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParametersContext) AllTypeParameter() []ITypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem())
	var tst = make([]ITypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeParameterContext)
		}
	}

	return tst
}

func (s *TypeParametersContext) TypeParameter(i int) ITypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *TypeParametersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeParametersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeParameters(s)
	}
}

func (s *TypeParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeParameters(s)
	}
}

func (p *KotlinParser) TypeParameters() (localctx ITypeParametersContext) {
	localctx = NewTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, KotlinParserRULE_typeParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1435)
		p.Match(KotlinParserLANGLE)
	}
	p.SetState(1439)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1436)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1441)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext())
	}
	{
		p.SetState(1442)
		p.TypeParameter()
	}
	p.SetState(1459)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1446)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1443)
					p.Match(KotlinParserNL)
				}

				p.SetState(1448)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1449)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(1453)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1450)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1455)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())
			}
			{
				p.SetState(1456)
				p.TypeParameter()
			}

		}
		p.SetState(1461)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext())
	}
	p.SetState(1465)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1462)
			p.Match(KotlinParserNL)
		}

		p.SetState(1467)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(1468)
			p.Match(KotlinParserCOMMA)
		}

	}
	{
		p.SetState(1471)
		p.Match(KotlinParserRANGLE)
	}

	return localctx
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeParameter
	return p
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *TypeParameterContext) TypeParameterModifiers() ITypeParameterModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterModifiersContext)
}

func (s *TypeParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeParameter(s)
	}
}

func (s *TypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeParameter(s)
	}
}

func (p *KotlinParser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, KotlinParserRULE_typeParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1474)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1473)
			p.TypeParameterModifiers()
		}

	}
	p.SetState(1479)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1476)
			p.Match(KotlinParserNL)
		}

		p.SetState(1481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1482)
		p.SimpleIdentifier()
	}
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
		p.SetState(1486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1483)
				p.Match(KotlinParserNL)
			}

			p.SetState(1488)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1489)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1490)
				p.Match(KotlinParserNL)
			}

			p.SetState(1495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1496)
			p.Type_()
		}

	}

	return localctx
}

// ITypeParameterModifiersContext is an interface to support dynamic dispatch.
type ITypeParameterModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterModifiersContext differentiates from other interfaces.
	IsTypeParameterModifiersContext()
}

type TypeParameterModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterModifiersContext() *TypeParameterModifiersContext {
	var p = new(TypeParameterModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeParameterModifiers
	return p
}

func (*TypeParameterModifiersContext) IsTypeParameterModifiersContext() {}

func NewTypeParameterModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterModifiersContext {
	var p = new(TypeParameterModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeParameterModifiers

	return p
}

func (s *TypeParameterModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterModifiersContext) AllTypeParameterModifier() []ITypeParameterModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeParameterModifierContext)(nil)).Elem())
	var tst = make([]ITypeParameterModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeParameterModifierContext)
		}
	}

	return tst
}

func (s *TypeParameterModifiersContext) TypeParameterModifier(i int) ITypeParameterModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterModifierContext)
}

func (s *TypeParameterModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterModifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeParameterModifiers(s)
	}
}

func (s *TypeParameterModifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeParameterModifiers(s)
	}
}

func (p *KotlinParser) TypeParameterModifiers() (localctx ITypeParameterModifiersContext) {
	localctx = NewTypeParameterModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, KotlinParserRULE_typeParameterModifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1500)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1499)
				p.TypeParameterModifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1502)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeParameterModifierContext is an interface to support dynamic dispatch.
type ITypeParameterModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterModifierContext differentiates from other interfaces.
	IsTypeParameterModifierContext()
}

type TypeParameterModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterModifierContext() *TypeParameterModifierContext {
	var p = new(TypeParameterModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeParameterModifier
	return p
}

func (*TypeParameterModifierContext) IsTypeParameterModifierContext() {}

func NewTypeParameterModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterModifierContext {
	var p = new(TypeParameterModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeParameterModifier

	return p
}

func (s *TypeParameterModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterModifierContext) ReificationModifier() IReificationModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReificationModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReificationModifierContext)
}

func (s *TypeParameterModifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeParameterModifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeParameterModifierContext) VarianceModifier() IVarianceModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarianceModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarianceModifierContext)
}

func (s *TypeParameterModifierContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeParameterModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeParameterModifier(s)
	}
}

func (s *TypeParameterModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeParameterModifier(s)
	}
}

func (p *KotlinParser) TypeParameterModifier() (localctx ITypeParameterModifierContext) {
	localctx = NewTypeParameterModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, KotlinParserRULE_typeParameterModifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1519)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserREIFIED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1504)
			p.ReificationModifier()
		}
		p.SetState(1508)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1505)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1510)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())
		}

	case KotlinParserIN, KotlinParserOUT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1511)
			p.VarianceModifier()
		}
		p.SetState(1515)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1512)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1517)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())
		}

	case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1518)
			p.Annotation()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) ParenthesizedType() IParenthesizedTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedTypeContext)
}

func (s *Type_Context) NullableType() INullableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullableTypeContext)
}

func (s *Type_Context) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *Type_Context) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *Type_Context) TypeModifiers() ITypeModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeModifiersContext)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterType_(s)
	}
}

func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitType_(s)
	}
}

func (p *KotlinParser) Type_() (localctx IType_Context) {
	localctx = NewType_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, KotlinParserRULE_type_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1522)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1521)
			p.TypeModifiers()
		}

	}
	p.SetState(1528)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1524)
			p.ParenthesizedType()
		}

	case 2:
		{
			p.SetState(1525)
			p.NullableType()
		}

	case 3:
		{
			p.SetState(1526)
			p.TypeReference()
		}

	case 4:
		{
			p.SetState(1527)
			p.FunctionType()
		}

	}

	return localctx
}

// ITypeModifiersContext is an interface to support dynamic dispatch.
type ITypeModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeModifiersContext differentiates from other interfaces.
	IsTypeModifiersContext()
}

type TypeModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeModifiersContext() *TypeModifiersContext {
	var p = new(TypeModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeModifiers
	return p
}

func (*TypeModifiersContext) IsTypeModifiersContext() {}

func NewTypeModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeModifiersContext {
	var p = new(TypeModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeModifiers

	return p
}

func (s *TypeModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeModifiersContext) AllTypeModifier() []ITypeModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeModifierContext)(nil)).Elem())
	var tst = make([]ITypeModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeModifierContext)
		}
	}

	return tst
}

func (s *TypeModifiersContext) TypeModifier(i int) ITypeModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeModifierContext)
}

func (s *TypeModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeModifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeModifiers(s)
	}
}

func (s *TypeModifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeModifiers(s)
	}
}

func (p *KotlinParser) TypeModifiers() (localctx ITypeModifiersContext) {
	localctx = NewTypeModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, KotlinParserRULE_typeModifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1531)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1530)
				p.TypeModifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1533)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeModifierContext is an interface to support dynamic dispatch.
type ITypeModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeModifierContext differentiates from other interfaces.
	IsTypeModifierContext()
}

type TypeModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeModifierContext() *TypeModifierContext {
	var p = new(TypeModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeModifier
	return p
}

func (*TypeModifierContext) IsTypeModifierContext() {}

func NewTypeModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeModifierContext {
	var p = new(TypeModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeModifier

	return p
}

func (s *TypeModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeModifierContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeModifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeModifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeModifier(s)
	}
}

func (s *TypeModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeModifier(s)
	}
}

func (p *KotlinParser) TypeModifier() (localctx ITypeModifierContext) {
	localctx = NewTypeModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, KotlinParserRULE_typeModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1543)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1535)
			p.Annotation()
		}

	case KotlinParserSUSPEND:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1536)
			p.Match(KotlinParserSUSPEND)
		}
		p.SetState(1540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1537)
				p.Match(KotlinParserNL)
			}

			p.SetState(1542)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IParenthesizedTypeContext is an interface to support dynamic dispatch.
type IParenthesizedTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedTypeContext differentiates from other interfaces.
	IsParenthesizedTypeContext()
}

type ParenthesizedTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedTypeContext() *ParenthesizedTypeContext {
	var p = new(ParenthesizedTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_parenthesizedType
	return p
}

func (*ParenthesizedTypeContext) IsParenthesizedTypeContext() {}

func NewParenthesizedTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedTypeContext {
	var p = new(ParenthesizedTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_parenthesizedType

	return p
}

func (s *ParenthesizedTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ParenthesizedTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ParenthesizedTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ParenthesizedTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterParenthesizedType(s)
	}
}

func (s *ParenthesizedTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitParenthesizedType(s)
	}
}

func (p *KotlinParser) ParenthesizedType() (localctx IParenthesizedTypeContext) {
	localctx = NewParenthesizedTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, KotlinParserRULE_parenthesizedType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1545)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(1549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1546)
			p.Match(KotlinParserNL)
		}

		p.SetState(1551)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1552)
		p.Type_()
	}
	p.SetState(1556)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1553)
			p.Match(KotlinParserNL)
		}

		p.SetState(1558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1559)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// INullableTypeContext is an interface to support dynamic dispatch.
type INullableTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullableTypeContext differentiates from other interfaces.
	IsNullableTypeContext()
}

type NullableTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullableTypeContext() *NullableTypeContext {
	var p = new(NullableTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_nullableType
	return p
}

func (*NullableTypeContext) IsNullableTypeContext() {}

func NewNullableTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullableTypeContext {
	var p = new(NullableTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_nullableType

	return p
}

func (s *NullableTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *NullableTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *NullableTypeContext) ParenthesizedType() IParenthesizedTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedTypeContext)
}

func (s *NullableTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *NullableTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *NullableTypeContext) AllQuest() []IQuestContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQuestContext)(nil)).Elem())
	var tst = make([]IQuestContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQuestContext)
		}
	}

	return tst
}

func (s *NullableTypeContext) Quest(i int) IQuestContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuestContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQuestContext)
}

func (s *NullableTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullableTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullableTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterNullableType(s)
	}
}

func (s *NullableTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitNullableType(s)
	}
}

func (p *KotlinParser) NullableType() (localctx INullableTypeContext) {
	localctx = NewNullableTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, KotlinParserRULE_nullableType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1563)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(1561)
			p.TypeReference()
		}

	case KotlinParserLPAREN:
		{
			p.SetState(1562)
			p.ParenthesizedType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1565)
			p.Match(KotlinParserNL)
		}

		p.SetState(1570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1571)
				p.Quest()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeReference
	return p
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeReference(s)
	}
}

func (s *TypeReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeReference(s)
	}
}

func (p *KotlinParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, KotlinParserRULE_typeReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1578)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1576)
			p.UserType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1577)
			p.Match(KotlinParserDYNAMIC)
		}

	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) FunctionTypeParameters() IFunctionTypeParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParametersContext)
}

func (s *FunctionTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *FunctionTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

func (p *KotlinParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, KotlinParserRULE_functionType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1594)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1580)
			p.ReceiverType()
		}
		p.SetState(1584)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1581)
				p.Match(KotlinParserNL)
			}

			p.SetState(1586)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1587)
			p.Match(KotlinParserDOT)
		}
		p.SetState(1591)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1588)
				p.Match(KotlinParserNL)
			}

			p.SetState(1593)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1596)
		p.FunctionTypeParameters()
	}
	p.SetState(1600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1597)
			p.Match(KotlinParserNL)
		}

		p.SetState(1602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1603)
		p.Match(KotlinParserARROW)
	}
	p.SetState(1607)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1604)
			p.Match(KotlinParserNL)
		}

		p.SetState(1609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1610)
		p.Type_()
	}

	return localctx
}

// IReceiverTypeContext is an interface to support dynamic dispatch.
type IReceiverTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReceiverTypeContext differentiates from other interfaces.
	IsReceiverTypeContext()
}

type ReceiverTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReceiverTypeContext() *ReceiverTypeContext {
	var p = new(ReceiverTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_receiverType
	return p
}

func (*ReceiverTypeContext) IsReceiverTypeContext() {}

func NewReceiverTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiverTypeContext {
	var p = new(ReceiverTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_receiverType

	return p
}

func (s *ReceiverTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiverTypeContext) ParenthesizedType() IParenthesizedTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedTypeContext)
}

func (s *ReceiverTypeContext) NullableType() INullableTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullableTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullableTypeContext)
}

func (s *ReceiverTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ReceiverTypeContext) TypeModifiers() ITypeModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeModifiersContext)
}

func (s *ReceiverTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiverTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiverTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterReceiverType(s)
	}
}

func (s *ReceiverTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitReceiverType(s)
	}
}

func (p *KotlinParser) ReceiverType() (localctx IReceiverTypeContext) {
	localctx = NewReceiverTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, KotlinParserRULE_receiverType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1612)
			p.TypeModifiers()
		}

	}
	p.SetState(1618)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1615)
			p.ParenthesizedType()
		}

	case 2:
		{
			p.SetState(1616)
			p.NullableType()
		}

	case 3:
		{
			p.SetState(1617)
			p.TypeReference()
		}

	}

	return localctx
}

// IUserTypeContext is an interface to support dynamic dispatch.
type IUserTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserTypeContext differentiates from other interfaces.
	IsUserTypeContext()
}

type UserTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserTypeContext() *UserTypeContext {
	var p = new(UserTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_userType
	return p
}

func (*UserTypeContext) IsUserTypeContext() {}

func NewUserTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserTypeContext {
	var p = new(UserTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_userType

	return p
}

func (s *UserTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *UserTypeContext) AllSimpleUserType() []ISimpleUserTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleUserTypeContext)(nil)).Elem())
	var tst = make([]ISimpleUserTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleUserTypeContext)
		}
	}

	return tst
}

func (s *UserTypeContext) SimpleUserType(i int) ISimpleUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleUserTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleUserTypeContext)
}

func (s *UserTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *UserTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *UserTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterUserType(s)
	}
}

func (s *UserTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitUserType(s)
	}
}

func (p *KotlinParser) UserType() (localctx IUserTypeContext) {
	localctx = NewUserTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, KotlinParserRULE_userType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1620)
		p.SimpleUserType()
	}
	p.SetState(1637)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1624)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1621)
					p.Match(KotlinParserNL)
				}

				p.SetState(1626)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1627)
				p.Match(KotlinParserDOT)
			}
			p.SetState(1631)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1628)
					p.Match(KotlinParserNL)
				}

				p.SetState(1633)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1634)
				p.SimpleUserType()
			}

		}
		p.SetState(1639)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())
	}

	return localctx
}

// IParenthesizedUserTypeContext is an interface to support dynamic dispatch.
type IParenthesizedUserTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedUserTypeContext differentiates from other interfaces.
	IsParenthesizedUserTypeContext()
}

type ParenthesizedUserTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedUserTypeContext() *ParenthesizedUserTypeContext {
	var p = new(ParenthesizedUserTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_parenthesizedUserType
	return p
}

func (*ParenthesizedUserTypeContext) IsParenthesizedUserTypeContext() {}

func NewParenthesizedUserTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedUserTypeContext {
	var p = new(ParenthesizedUserTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_parenthesizedUserType

	return p
}

func (s *ParenthesizedUserTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedUserTypeContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *ParenthesizedUserTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ParenthesizedUserTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ParenthesizedUserTypeContext) ParenthesizedUserType() IParenthesizedUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedUserTypeContext)
}

func (s *ParenthesizedUserTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedUserTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedUserTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterParenthesizedUserType(s)
	}
}

func (s *ParenthesizedUserTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitParenthesizedUserType(s)
	}
}

func (p *KotlinParser) ParenthesizedUserType() (localctx IParenthesizedUserTypeContext) {
	localctx = NewParenthesizedUserTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, KotlinParserRULE_parenthesizedUserType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1672)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1640)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(1644)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1641)
				p.Match(KotlinParserNL)
			}

			p.SetState(1646)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1647)
			p.UserType()
		}
		p.SetState(1651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1648)
				p.Match(KotlinParserNL)
			}

			p.SetState(1653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1654)
			p.Match(KotlinParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1656)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(1660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1657)
				p.Match(KotlinParserNL)
			}

			p.SetState(1662)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1663)
			p.ParenthesizedUserType()
		}
		p.SetState(1667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1664)
				p.Match(KotlinParserNL)
			}

			p.SetState(1669)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1670)
			p.Match(KotlinParserRPAREN)
		}

	}

	return localctx
}

// ISimpleUserTypeContext is an interface to support dynamic dispatch.
type ISimpleUserTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleUserTypeContext differentiates from other interfaces.
	IsSimpleUserTypeContext()
}

type SimpleUserTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleUserTypeContext() *SimpleUserTypeContext {
	var p = new(SimpleUserTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_simpleUserType
	return p
}

func (*SimpleUserTypeContext) IsSimpleUserTypeContext() {}

func NewSimpleUserTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleUserTypeContext {
	var p = new(SimpleUserTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_simpleUserType

	return p
}

func (s *SimpleUserTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleUserTypeContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *SimpleUserTypeContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *SimpleUserTypeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SimpleUserTypeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SimpleUserTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleUserTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleUserTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSimpleUserType(s)
	}
}

func (s *SimpleUserTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSimpleUserType(s)
	}
}

func (p *KotlinParser) SimpleUserType() (localctx ISimpleUserTypeContext) {
	localctx = NewSimpleUserTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, KotlinParserRULE_simpleUserType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1674)
		p.SimpleIdentifier()
	}
	p.SetState(1682)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) == 1 {
		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(1675)
				p.Match(KotlinParserNL)
			}

			p.SetState(1680)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1681)
			p.TypeArguments()
		}

	}

	return localctx
}

// IFunctionTypeParametersContext is an interface to support dynamic dispatch.
type IFunctionTypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParametersContext differentiates from other interfaces.
	IsFunctionTypeParametersContext()
}

type FunctionTypeParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParametersContext() *FunctionTypeParametersContext {
	var p = new(FunctionTypeParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionTypeParameters
	return p
}

func (*FunctionTypeParametersContext) IsFunctionTypeParametersContext() {}

func NewFunctionTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParametersContext {
	var p = new(FunctionTypeParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionTypeParameters

	return p
}

func (s *FunctionTypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParametersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FunctionTypeParametersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FunctionTypeParametersContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *FunctionTypeParametersContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *FunctionTypeParametersContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *FunctionTypeParametersContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionTypeParameters(s)
	}
}

func (s *FunctionTypeParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionTypeParameters(s)
	}
}

func (p *KotlinParser) FunctionTypeParameters() (localctx IFunctionTypeParametersContext) {
	localctx = NewFunctionTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, KotlinParserRULE_functionTypeParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1684)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(1688)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1685)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1690)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext())
	}
	p.SetState(1693)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1691)
			p.Parameter()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1692)
			p.Type_()
		}

	}
	p.SetState(1714)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1698)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1695)
					p.Match(KotlinParserNL)
				}

				p.SetState(1700)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1701)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(1705)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1702)
					p.Match(KotlinParserNL)
				}

				p.SetState(1707)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(1710)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1708)
					p.Parameter()
				}

			case 2:
				{
					p.SetState(1709)
					p.Type_()
				}

			}

		}
		p.SetState(1716)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())
	}
	p.SetState(1720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1717)
			p.Match(KotlinParserNL)
		}

		p.SetState(1722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1723)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// ITypeConstraintsContext is an interface to support dynamic dispatch.
type ITypeConstraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConstraintsContext differentiates from other interfaces.
	IsTypeConstraintsContext()
}

type TypeConstraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConstraintsContext() *TypeConstraintsContext {
	var p = new(TypeConstraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeConstraints
	return p
}

func (*TypeConstraintsContext) IsTypeConstraintsContext() {}

func NewTypeConstraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConstraintsContext {
	var p = new(TypeConstraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeConstraints

	return p
}

func (s *TypeConstraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConstraintsContext) AllTypeConstraint() []ITypeConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeConstraintContext)(nil)).Elem())
	var tst = make([]ITypeConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeConstraintContext)
		}
	}

	return tst
}

func (s *TypeConstraintsContext) TypeConstraint(i int) ITypeConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintContext)
}

func (s *TypeConstraintsContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeConstraintsContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeConstraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConstraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConstraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeConstraints(s)
	}
}

func (s *TypeConstraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeConstraints(s)
	}
}

func (p *KotlinParser) TypeConstraints() (localctx ITypeConstraintsContext) {
	localctx = NewTypeConstraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, KotlinParserRULE_typeConstraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1725)
		p.Match(KotlinParserWHERE)
	}
	p.SetState(1729)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1726)
			p.Match(KotlinParserNL)
		}

		p.SetState(1731)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1732)
		p.TypeConstraint()
	}
	p.SetState(1749)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1736)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1733)
					p.Match(KotlinParserNL)
				}

				p.SetState(1738)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1739)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(1743)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1740)
					p.Match(KotlinParserNL)
				}

				p.SetState(1745)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1746)
				p.TypeConstraint()
			}

		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeConstraintContext is an interface to support dynamic dispatch.
type ITypeConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConstraintContext differentiates from other interfaces.
	IsTypeConstraintContext()
}

type TypeConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConstraintContext() *TypeConstraintContext {
	var p = new(TypeConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeConstraint
	return p
}

func (*TypeConstraintContext) IsTypeConstraintContext() {}

func NewTypeConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConstraintContext {
	var p = new(TypeConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeConstraint

	return p
}

func (s *TypeConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConstraintContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *TypeConstraintContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeConstraintContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *TypeConstraintContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeConstraintContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeConstraintContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeConstraint(s)
	}
}

func (s *TypeConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeConstraint(s)
	}
}

func (p *KotlinParser) TypeConstraint() (localctx ITypeConstraintContext) {
	localctx = NewTypeConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, KotlinParserRULE_typeConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1755)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99)))) != 0) {
		{
			p.SetState(1752)
			p.Annotation()
		}

		p.SetState(1757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1758)
		p.SimpleIdentifier()
	}
	p.SetState(1762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1759)
			p.Match(KotlinParserNL)
		}

		p.SetState(1764)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1765)
		p.Match(KotlinParserCOLON)
	}
	p.SetState(1769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1766)
			p.Match(KotlinParserNL)
		}

		p.SetState(1771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1772)
		p.Type_()
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *BlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *BlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *KotlinParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, KotlinParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1774)
		p.Match(KotlinParserLCURL)
	}
	p.SetState(1778)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1775)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(1780)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 260, p.GetParserRuleContext())
	}
	{
		p.SetState(1781)
		p.Statements()
	}
	p.SetState(1785)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(1782)
			p.Match(KotlinParserNL)
		}

		p.SetState(1787)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1788)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// IStatementsContext is an interface to support dynamic dispatch.
type IStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementsContext differentiates from other interfaces.
	IsStatementsContext()
}

type StatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementsContext() *StatementsContext {
	var p = new(StatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_statements
	return p
}

func (*StatementsContext) IsStatementsContext() {}

func NewStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementsContext {
	var p = new(StatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_statements

	return p
}

func (s *StatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementsContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementsContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementsContext) AllSemis() []ISemisContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISemisContext)(nil)).Elem())
	var tst = make([]ISemisContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISemisContext)
		}
	}

	return tst
}

func (s *StatementsContext) Semis(i int) ISemisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemisContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISemisContext)
}

func (s *StatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterStatements(s)
	}
}

func (s *StatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitStatements(s)
	}
}

func (p *KotlinParser) Statements() (localctx IStatementsContext) {
	localctx = NewStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, KotlinParserRULE_statements)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1802)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1790)
			p.Statement()
		}
		p.SetState(1796)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1791)
					p.Semis()
				}
				{
					p.SetState(1792)
					p.Statement()
				}

			}
			p.SetState(1798)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext())
		}
		p.SetState(1800)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1799)
				p.Semis()
			}

		}

	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) Assignment() IAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *StatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) AllLabel() []ILabelContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabelContext)(nil)).Elem())
	var tst = make([]ILabelContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabelContext)
		}
	}

	return tst
}

func (s *StatementContext) Label(i int) ILabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabelContext)
}

func (s *StatementContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *StatementContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *KotlinParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, KotlinParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1808)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 266, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1806)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case KotlinParserIdentifierAt:
				{
					p.SetState(1804)
					p.Label()
				}

			case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
				{
					p.SetState(1805)
					p.Annotation()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1810)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 266, p.GetParserRuleContext())
	}
	p.SetState(1815)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1811)
			p.Declaration()
		}

	case 2:
		{
			p.SetState(1812)
			p.Assignment()
		}

	case 3:
		{
			p.SetState(1813)
			p.LoopStatement()
		}

	case 4:
		{
			p.SetState(1814)
			p.Expression()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) ClassDeclaration() IClassDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassDeclarationContext)
}

func (s *DeclarationContext) ObjectDeclaration() IObjectDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectDeclarationContext)
}

func (s *DeclarationContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *DeclarationContext) PropertyDeclaration() IPropertyDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyDeclarationContext)
}

func (s *DeclarationContext) TypeAlias() ITypeAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (p *KotlinParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, KotlinParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 268, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1817)
			p.ClassDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1818)
			p.ObjectDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1819)
			p.FunctionDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1820)
			p.PropertyDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1821)
			p.TypeAlias()
		}

	}

	return localctx
}

// IAssignmentContext is an interface to support dynamic dispatch.
type IAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentContext differentiates from other interfaces.
	IsAssignmentContext()
}

type AssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentContext() *AssignmentContext {
	var p = new(AssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_assignment
	return p
}

func (*AssignmentContext) IsAssignmentContext() {}

func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentContext {
	var p = new(AssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_assignment

	return p
}

func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentContext) DirectlyAssignableExpression() IDirectlyAssignableExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectlyAssignableExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectlyAssignableExpressionContext)
}

func (s *AssignmentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignmentContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AssignmentContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AssignmentContext) AssignableExpression() IAssignableExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignableExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignableExpressionContext)
}

func (s *AssignmentContext) AssignmentAndOperator() IAssignmentAndOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentAndOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentAndOperatorContext)
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (p *KotlinParser) Assignment() (localctx IAssignmentContext) {
	localctx = NewAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, KotlinParserRULE_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1844)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1824)
			p.DirectlyAssignableExpression()
		}
		{
			p.SetState(1825)
			p.Match(KotlinParserASSIGNMENT)
		}
		p.SetState(1829)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1826)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1831)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())
		}
		{
			p.SetState(1832)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1834)
			p.AssignableExpression()
		}
		{
			p.SetState(1835)
			p.AssignmentAndOperator()
		}
		p.SetState(1839)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1836)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1841)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())
		}
		{
			p.SetState(1842)
			p.Expression()
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Disjunction() IDisjunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisjunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisjunctionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *KotlinParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, KotlinParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1846)
		p.Disjunction()
	}

	return localctx
}

// IDisjunctionContext is an interface to support dynamic dispatch.
type IDisjunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDisjunctionContext differentiates from other interfaces.
	IsDisjunctionContext()
}

type DisjunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDisjunctionContext() *DisjunctionContext {
	var p = new(DisjunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_disjunction
	return p
}

func (*DisjunctionContext) IsDisjunctionContext() {}

func NewDisjunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DisjunctionContext {
	var p = new(DisjunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_disjunction

	return p
}

func (s *DisjunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *DisjunctionContext) AllConjunction() []IConjunctionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConjunctionContext)(nil)).Elem())
	var tst = make([]IConjunctionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConjunctionContext)
		}
	}

	return tst
}

func (s *DisjunctionContext) Conjunction(i int) IConjunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConjunctionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConjunctionContext)
}

func (s *DisjunctionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *DisjunctionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *DisjunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DisjunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DisjunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDisjunction(s)
	}
}

func (s *DisjunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDisjunction(s)
	}
}

func (p *KotlinParser) Disjunction() (localctx IDisjunctionContext) {
	localctx = NewDisjunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, KotlinParserRULE_disjunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1848)
		p.Conjunction()
	}
	p.SetState(1865)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1852)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1849)
					p.Match(KotlinParserNL)
				}

				p.SetState(1854)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1855)
				p.Match(KotlinParserDISJ)
			}
			p.SetState(1859)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1856)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1861)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())
			}
			{
				p.SetState(1862)
				p.Conjunction()
			}

		}
		p.SetState(1867)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext())
	}

	return localctx
}

// IConjunctionContext is an interface to support dynamic dispatch.
type IConjunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConjunctionContext differentiates from other interfaces.
	IsConjunctionContext()
}

type ConjunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConjunctionContext() *ConjunctionContext {
	var p = new(ConjunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_conjunction
	return p
}

func (*ConjunctionContext) IsConjunctionContext() {}

func NewConjunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConjunctionContext {
	var p = new(ConjunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_conjunction

	return p
}

func (s *ConjunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConjunctionContext) AllEquality() []IEqualityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEqualityContext)(nil)).Elem())
	var tst = make([]IEqualityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEqualityContext)
		}
	}

	return tst
}

func (s *ConjunctionContext) Equality(i int) IEqualityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEqualityContext)
}

func (s *ConjunctionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ConjunctionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ConjunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConjunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConjunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterConjunction(s)
	}
}

func (s *ConjunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitConjunction(s)
	}
}

func (p *KotlinParser) Conjunction() (localctx IConjunctionContext) {
	localctx = NewConjunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, KotlinParserRULE_conjunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1868)
		p.Equality()
	}
	p.SetState(1885)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1872)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1869)
					p.Match(KotlinParserNL)
				}

				p.SetState(1874)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1875)
				p.Match(KotlinParserCONJ)
			}
			p.SetState(1879)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1876)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1881)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext())
			}
			{
				p.SetState(1882)
				p.Equality()
			}

		}
		p.SetState(1887)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityContext is an interface to support dynamic dispatch.
type IEqualityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityContext differentiates from other interfaces.
	IsEqualityContext()
}

type EqualityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityContext() *EqualityContext {
	var p = new(EqualityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_equality
	return p
}

func (*EqualityContext) IsEqualityContext() {}

func NewEqualityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityContext {
	var p = new(EqualityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_equality

	return p
}

func (s *EqualityContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityContext) AllComparison() []IComparisonContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComparisonContext)(nil)).Elem())
	var tst = make([]IComparisonContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComparisonContext)
		}
	}

	return tst
}

func (s *EqualityContext) Comparison(i int) IComparisonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComparisonContext)
}

func (s *EqualityContext) AllEqualityOperator() []IEqualityOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEqualityOperatorContext)(nil)).Elem())
	var tst = make([]IEqualityOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEqualityOperatorContext)
		}
	}

	return tst
}

func (s *EqualityContext) EqualityOperator(i int) IEqualityOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEqualityOperatorContext)
}

func (s *EqualityContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *EqualityContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *EqualityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterEquality(s)
	}
}

func (s *EqualityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitEquality(s)
	}
}

func (p *KotlinParser) Equality() (localctx IEqualityContext) {
	localctx = NewEqualityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, KotlinParserRULE_equality)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1888)
		p.Comparison()
	}
	p.SetState(1900)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1889)
				p.EqualityOperator()
			}
			p.SetState(1893)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1890)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1895)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
			}
			{
				p.SetState(1896)
				p.Comparison()
			}

		}
		p.SetState(1902)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext())
	}

	return localctx
}

// IComparisonContext is an interface to support dynamic dispatch.
type IComparisonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonContext differentiates from other interfaces.
	IsComparisonContext()
}

type ComparisonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonContext() *ComparisonContext {
	var p = new(ComparisonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_comparison
	return p
}

func (*ComparisonContext) IsComparisonContext() {}

func NewComparisonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonContext {
	var p = new(ComparisonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_comparison

	return p
}

func (s *ComparisonContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonContext) AllInfixOperation() []IInfixOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInfixOperationContext)(nil)).Elem())
	var tst = make([]IInfixOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInfixOperationContext)
		}
	}

	return tst
}

func (s *ComparisonContext) InfixOperation(i int) IInfixOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInfixOperationContext)
}

func (s *ComparisonContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *ComparisonContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ComparisonContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterComparison(s)
	}
}

func (s *ComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitComparison(s)
	}
}

func (p *KotlinParser) Comparison() (localctx IComparisonContext) {
	localctx = NewComparisonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, KotlinParserRULE_comparison)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1903)
		p.InfixOperation()
	}
	p.SetState(1913)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1904)
			p.ComparisonOperator()
		}
		p.SetState(1908)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1905)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(1910)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())
		}
		{
			p.SetState(1911)
			p.InfixOperation()
		}

	}

	return localctx
}

// IInfixOperationContext is an interface to support dynamic dispatch.
type IInfixOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixOperationContext differentiates from other interfaces.
	IsInfixOperationContext()
}

type InfixOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixOperationContext() *InfixOperationContext {
	var p = new(InfixOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_infixOperation
	return p
}

func (*InfixOperationContext) IsInfixOperationContext() {}

func NewInfixOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixOperationContext {
	var p = new(InfixOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_infixOperation

	return p
}

func (s *InfixOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixOperationContext) AllElvisExpression() []IElvisExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElvisExpressionContext)(nil)).Elem())
	var tst = make([]IElvisExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElvisExpressionContext)
		}
	}

	return tst
}

func (s *InfixOperationContext) ElvisExpression(i int) IElvisExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElvisExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElvisExpressionContext)
}

func (s *InfixOperationContext) AllInOperator() []IInOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInOperatorContext)(nil)).Elem())
	var tst = make([]IInOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInOperatorContext)
		}
	}

	return tst
}

func (s *InfixOperationContext) InOperator(i int) IInOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInOperatorContext)
}

func (s *InfixOperationContext) AllIsOperator() []IIsOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIsOperatorContext)(nil)).Elem())
	var tst = make([]IIsOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIsOperatorContext)
		}
	}

	return tst
}

func (s *InfixOperationContext) IsOperator(i int) IIsOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIsOperatorContext)
}

func (s *InfixOperationContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *InfixOperationContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *InfixOperationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *InfixOperationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *InfixOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InfixOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterInfixOperation(s)
	}
}

func (s *InfixOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitInfixOperation(s)
	}
}

func (p *KotlinParser) InfixOperation() (localctx IInfixOperationContext) {
	localctx = NewInfixOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, KotlinParserRULE_infixOperation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1915)
		p.ElvisExpression()
	}
	p.SetState(1936)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1934)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case KotlinParserIN, KotlinParserNOT_IN:
				{
					p.SetState(1916)
					p.InOperator()
				}
				p.SetState(1920)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(1917)
							p.Match(KotlinParserNL)
						}

					}
					p.SetState(1922)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext())
				}
				{
					p.SetState(1923)
					p.ElvisExpression()
				}

			case KotlinParserIS, KotlinParserNOT_IS:
				{
					p.SetState(1925)
					p.IsOperator()
				}
				p.SetState(1929)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(1926)
						p.Match(KotlinParserNL)
					}

					p.SetState(1931)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1932)
					p.Type_()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(1938)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext())
	}

	return localctx
}

// IElvisExpressionContext is an interface to support dynamic dispatch.
type IElvisExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElvisExpressionContext differentiates from other interfaces.
	IsElvisExpressionContext()
}

type ElvisExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElvisExpressionContext() *ElvisExpressionContext {
	var p = new(ElvisExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_elvisExpression
	return p
}

func (*ElvisExpressionContext) IsElvisExpressionContext() {}

func NewElvisExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElvisExpressionContext {
	var p = new(ElvisExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_elvisExpression

	return p
}

func (s *ElvisExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ElvisExpressionContext) AllInfixFunctionCall() []IInfixFunctionCallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInfixFunctionCallContext)(nil)).Elem())
	var tst = make([]IInfixFunctionCallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInfixFunctionCallContext)
		}
	}

	return tst
}

func (s *ElvisExpressionContext) InfixFunctionCall(i int) IInfixFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixFunctionCallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInfixFunctionCallContext)
}

func (s *ElvisExpressionContext) AllElvis() []IElvisContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElvisContext)(nil)).Elem())
	var tst = make([]IElvisContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElvisContext)
		}
	}

	return tst
}

func (s *ElvisExpressionContext) Elvis(i int) IElvisContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElvisContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElvisContext)
}

func (s *ElvisExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ElvisExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ElvisExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElvisExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElvisExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterElvisExpression(s)
	}
}

func (s *ElvisExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitElvisExpression(s)
	}
}

func (p *KotlinParser) ElvisExpression() (localctx IElvisExpressionContext) {
	localctx = NewElvisExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, KotlinParserRULE_elvisExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1939)
		p.InfixFunctionCall()
	}
	p.SetState(1957)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 288, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1943)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(1940)
					p.Match(KotlinParserNL)
				}

				p.SetState(1945)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1946)
				p.Elvis()
			}
			p.SetState(1950)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1947)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1952)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext())
			}
			{
				p.SetState(1953)
				p.InfixFunctionCall()
			}

		}
		p.SetState(1959)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 288, p.GetParserRuleContext())
	}

	return localctx
}

// IInfixFunctionCallContext is an interface to support dynamic dispatch.
type IInfixFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixFunctionCallContext differentiates from other interfaces.
	IsInfixFunctionCallContext()
}

type InfixFunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixFunctionCallContext() *InfixFunctionCallContext {
	var p = new(InfixFunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_infixFunctionCall
	return p
}

func (*InfixFunctionCallContext) IsInfixFunctionCallContext() {}

func NewInfixFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixFunctionCallContext {
	var p = new(InfixFunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_infixFunctionCall

	return p
}

func (s *InfixFunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixFunctionCallContext) AllRangeExpression() []IRangeExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRangeExpressionContext)(nil)).Elem())
	var tst = make([]IRangeExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRangeExpressionContext)
		}
	}

	return tst
}

func (s *InfixFunctionCallContext) RangeExpression(i int) IRangeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRangeExpressionContext)
}

func (s *InfixFunctionCallContext) AllSimpleIdentifier() []ISimpleIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem())
	var tst = make([]ISimpleIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleIdentifierContext)
		}
	}

	return tst
}

func (s *InfixFunctionCallContext) SimpleIdentifier(i int) ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *InfixFunctionCallContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *InfixFunctionCallContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *InfixFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixFunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InfixFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterInfixFunctionCall(s)
	}
}

func (s *InfixFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitInfixFunctionCall(s)
	}
}

func (p *KotlinParser) InfixFunctionCall() (localctx IInfixFunctionCallContext) {
	localctx = NewInfixFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, KotlinParserRULE_infixFunctionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1960)
		p.RangeExpression()
	}
	p.SetState(1972)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1961)
				p.SimpleIdentifier()
			}
			p.SetState(1965)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1962)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1967)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext())
			}
			{
				p.SetState(1968)
				p.RangeExpression()
			}

		}
		p.SetState(1974)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 290, p.GetParserRuleContext())
	}

	return localctx
}

// IRangeExpressionContext is an interface to support dynamic dispatch.
type IRangeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeExpressionContext differentiates from other interfaces.
	IsRangeExpressionContext()
}

type RangeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeExpressionContext() *RangeExpressionContext {
	var p = new(RangeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_rangeExpression
	return p
}

func (*RangeExpressionContext) IsRangeExpressionContext() {}

func NewRangeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeExpressionContext {
	var p = new(RangeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_rangeExpression

	return p
}

func (s *RangeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeExpressionContext) AllAdditiveExpression() []IAdditiveExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem())
	var tst = make([]IAdditiveExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdditiveExpressionContext)
		}
	}

	return tst
}

func (s *RangeExpressionContext) AdditiveExpression(i int) IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *RangeExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *RangeExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *RangeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterRangeExpression(s)
	}
}

func (s *RangeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitRangeExpression(s)
	}
}

func (p *KotlinParser) RangeExpression() (localctx IRangeExpressionContext) {
	localctx = NewRangeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, KotlinParserRULE_rangeExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1975)
		p.AdditiveExpression()
	}
	p.SetState(1986)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1976)
				p.Match(KotlinParserRANGE)
			}
			p.SetState(1980)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 291, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1977)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1982)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 291, p.GetParserRuleContext())
			}
			{
				p.SetState(1983)
				p.AdditiveExpression()
			}

		}
		p.SetState(1988)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_additiveExpression
	return p
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) AllMultiplicativeExpression() []IMultiplicativeExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem())
	var tst = make([]IMultiplicativeExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiplicativeExpressionContext)
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) MultiplicativeExpression(i int) IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AllAdditiveOperator() []IAdditiveOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdditiveOperatorContext)(nil)).Elem())
	var tst = make([]IAdditiveOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdditiveOperatorContext)
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) AdditiveOperator(i int) IAdditiveOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdditiveOperatorContext)
}

func (s *AdditiveExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AdditiveExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (p *KotlinParser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, KotlinParserRULE_additiveExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1989)
		p.MultiplicativeExpression()
	}
	p.SetState(2001)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1990)
				p.AdditiveOperator()
			}
			p.SetState(1994)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1991)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(1996)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 293, p.GetParserRuleContext())
			}
			{
				p.SetState(1997)
				p.MultiplicativeExpression()
			}

		}
		p.SetState(2003)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 294, p.GetParserRuleContext())
	}

	return localctx
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiplicativeExpression
	return p
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) AllAsExpression() []IAsExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAsExpressionContext)(nil)).Elem())
	var tst = make([]IAsExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAsExpressionContext)
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) AsExpression(i int) IAsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAsExpressionContext)
}

func (s *MultiplicativeExpressionContext) AllMultiplicativeOperator() []IMultiplicativeOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiplicativeOperatorContext)(nil)).Elem())
	var tst = make([]IMultiplicativeOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiplicativeOperatorContext)
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) MultiplicativeOperator(i int) IMultiplicativeOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeOperatorContext)
}

func (s *MultiplicativeExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *MultiplicativeExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (p *KotlinParser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, KotlinParserRULE_multiplicativeExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2004)
		p.AsExpression()
	}
	p.SetState(2016)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2005)
				p.MultiplicativeOperator()
			}
			p.SetState(2009)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2006)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(2011)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext())
			}
			{
				p.SetState(2012)
				p.AsExpression()
			}

		}
		p.SetState(2018)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext())
	}

	return localctx
}

// IAsExpressionContext is an interface to support dynamic dispatch.
type IAsExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsExpressionContext differentiates from other interfaces.
	IsAsExpressionContext()
}

type AsExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsExpressionContext() *AsExpressionContext {
	var p = new(AsExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_asExpression
	return p
}

func (*AsExpressionContext) IsAsExpressionContext() {}

func NewAsExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsExpressionContext {
	var p = new(AsExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_asExpression

	return p
}

func (s *AsExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsExpressionContext) PrefixUnaryExpression() IPrefixUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixUnaryExpressionContext)
}

func (s *AsExpressionContext) AsOperator() IAsOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsOperatorContext)
}

func (s *AsExpressionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *AsExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AsExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAsExpression(s)
	}
}

func (s *AsExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAsExpression(s)
	}
}

func (p *KotlinParser) AsExpression() (localctx IAsExpressionContext) {
	localctx = NewAsExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, KotlinParserRULE_asExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2019)
		p.PrefixUnaryExpression()
	}
	p.SetState(2035)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 299, p.GetParserRuleContext()) == 1 {
		p.SetState(2023)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2020)
				p.Match(KotlinParserNL)
			}

			p.SetState(2025)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2026)
			p.AsOperator()
		}
		p.SetState(2030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2027)
				p.Match(KotlinParserNL)
			}

			p.SetState(2032)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2033)
			p.Type_()
		}

	}

	return localctx
}

// IPrefixUnaryExpressionContext is an interface to support dynamic dispatch.
type IPrefixUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixUnaryExpressionContext differentiates from other interfaces.
	IsPrefixUnaryExpressionContext()
}

type PrefixUnaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixUnaryExpressionContext() *PrefixUnaryExpressionContext {
	var p = new(PrefixUnaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_prefixUnaryExpression
	return p
}

func (*PrefixUnaryExpressionContext) IsPrefixUnaryExpressionContext() {}

func NewPrefixUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixUnaryExpressionContext {
	var p = new(PrefixUnaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_prefixUnaryExpression

	return p
}

func (s *PrefixUnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixUnaryExpressionContext) PostfixUnaryExpression() IPostfixUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixUnaryExpressionContext)
}

func (s *PrefixUnaryExpressionContext) AllUnaryPrefix() []IUnaryPrefixContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnaryPrefixContext)(nil)).Elem())
	var tst = make([]IUnaryPrefixContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnaryPrefixContext)
		}
	}

	return tst
}

func (s *PrefixUnaryExpressionContext) UnaryPrefix(i int) IUnaryPrefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryPrefixContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnaryPrefixContext)
}

func (s *PrefixUnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixUnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixUnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPrefixUnaryExpression(s)
	}
}

func (s *PrefixUnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPrefixUnaryExpression(s)
	}
}

func (p *KotlinParser) PrefixUnaryExpression() (localctx IPrefixUnaryExpressionContext) {
	localctx = NewPrefixUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, KotlinParserRULE_prefixUnaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 300, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2037)
				p.UnaryPrefix()
			}

		}
		p.SetState(2042)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 300, p.GetParserRuleContext())
	}
	{
		p.SetState(2043)
		p.PostfixUnaryExpression()
	}

	return localctx
}

// IUnaryPrefixContext is an interface to support dynamic dispatch.
type IUnaryPrefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryPrefixContext differentiates from other interfaces.
	IsUnaryPrefixContext()
}

type UnaryPrefixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryPrefixContext() *UnaryPrefixContext {
	var p = new(UnaryPrefixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_unaryPrefix
	return p
}

func (*UnaryPrefixContext) IsUnaryPrefixContext() {}

func NewUnaryPrefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryPrefixContext {
	var p = new(UnaryPrefixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_unaryPrefix

	return p
}

func (s *UnaryPrefixContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryPrefixContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *UnaryPrefixContext) Label() ILabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelContext)
}

func (s *UnaryPrefixContext) PrefixUnaryOperator() IPrefixUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixUnaryOperatorContext)
}

func (s *UnaryPrefixContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *UnaryPrefixContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *UnaryPrefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryPrefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryPrefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterUnaryPrefix(s)
	}
}

func (s *UnaryPrefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitUnaryPrefix(s)
	}
}

func (p *KotlinParser) UnaryPrefix() (localctx IUnaryPrefixContext) {
	localctx = NewUnaryPrefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, KotlinParserRULE_unaryPrefix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2054)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2045)
			p.Annotation()
		}

	case KotlinParserIdentifierAt:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2046)
			p.Label()
		}

	case KotlinParserADD, KotlinParserSUB, KotlinParserINCR, KotlinParserDECR, KotlinParserEXCL_WS, KotlinParserEXCL_NO_WS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2047)
			p.PrefixUnaryOperator()
		}
		p.SetState(2051)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2048)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2053)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPostfixUnaryExpressionContext is an interface to support dynamic dispatch.
type IPostfixUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixUnaryExpressionContext differentiates from other interfaces.
	IsPostfixUnaryExpressionContext()
}

type PostfixUnaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixUnaryExpressionContext() *PostfixUnaryExpressionContext {
	var p = new(PostfixUnaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_postfixUnaryExpression
	return p
}

func (*PostfixUnaryExpressionContext) IsPostfixUnaryExpressionContext() {}

func NewPostfixUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixUnaryExpressionContext {
	var p = new(PostfixUnaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_postfixUnaryExpression

	return p
}

func (s *PostfixUnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixUnaryExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixUnaryExpressionContext) AllPostfixUnarySuffix() []IPostfixUnarySuffixContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPostfixUnarySuffixContext)(nil)).Elem())
	var tst = make([]IPostfixUnarySuffixContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPostfixUnarySuffixContext)
		}
	}

	return tst
}

func (s *PostfixUnaryExpressionContext) PostfixUnarySuffix(i int) IPostfixUnarySuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixUnarySuffixContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPostfixUnarySuffixContext)
}

func (s *PostfixUnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixUnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixUnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPostfixUnaryExpression(s)
	}
}

func (s *PostfixUnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPostfixUnaryExpression(s)
	}
}

func (p *KotlinParser) PostfixUnaryExpression() (localctx IPostfixUnaryExpressionContext) {
	localctx = NewPostfixUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, KotlinParserRULE_postfixUnaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2063)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 304, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2056)
			p.PrimaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2057)
			p.PrimaryExpression()
		}
		p.SetState(2059)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2058)
					p.PostfixUnarySuffix()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2061)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 303, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IPostfixUnarySuffixContext is an interface to support dynamic dispatch.
type IPostfixUnarySuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixUnarySuffixContext differentiates from other interfaces.
	IsPostfixUnarySuffixContext()
}

type PostfixUnarySuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixUnarySuffixContext() *PostfixUnarySuffixContext {
	var p = new(PostfixUnarySuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_postfixUnarySuffix
	return p
}

func (*PostfixUnarySuffixContext) IsPostfixUnarySuffixContext() {}

func NewPostfixUnarySuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixUnarySuffixContext {
	var p = new(PostfixUnarySuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_postfixUnarySuffix

	return p
}

func (s *PostfixUnarySuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixUnarySuffixContext) PostfixUnaryOperator() IPostfixUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixUnaryOperatorContext)
}

func (s *PostfixUnarySuffixContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *PostfixUnarySuffixContext) CallSuffix() ICallSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallSuffixContext)
}

func (s *PostfixUnarySuffixContext) IndexingSuffix() IIndexingSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexingSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexingSuffixContext)
}

func (s *PostfixUnarySuffixContext) NavigationSuffix() INavigationSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INavigationSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INavigationSuffixContext)
}

func (s *PostfixUnarySuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixUnarySuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixUnarySuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPostfixUnarySuffix(s)
	}
}

func (s *PostfixUnarySuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPostfixUnarySuffix(s)
	}
}

func (p *KotlinParser) PostfixUnarySuffix() (localctx IPostfixUnarySuffixContext) {
	localctx = NewPostfixUnarySuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, KotlinParserRULE_postfixUnarySuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2070)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2065)
			p.PostfixUnaryOperator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2066)
			p.TypeArguments()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2067)
			p.CallSuffix()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2068)
			p.IndexingSuffix()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2069)
			p.NavigationSuffix()
		}

	}

	return localctx
}

// IDirectlyAssignableExpressionContext is an interface to support dynamic dispatch.
type IDirectlyAssignableExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectlyAssignableExpressionContext differentiates from other interfaces.
	IsDirectlyAssignableExpressionContext()
}

type DirectlyAssignableExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectlyAssignableExpressionContext() *DirectlyAssignableExpressionContext {
	var p = new(DirectlyAssignableExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_directlyAssignableExpression
	return p
}

func (*DirectlyAssignableExpressionContext) IsDirectlyAssignableExpressionContext() {}

func NewDirectlyAssignableExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectlyAssignableExpressionContext {
	var p = new(DirectlyAssignableExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_directlyAssignableExpression

	return p
}

func (s *DirectlyAssignableExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectlyAssignableExpressionContext) PostfixUnaryExpression() IPostfixUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixUnaryExpressionContext)
}

func (s *DirectlyAssignableExpressionContext) AssignableSuffix() IAssignableSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignableSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignableSuffixContext)
}

func (s *DirectlyAssignableExpressionContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *DirectlyAssignableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectlyAssignableExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectlyAssignableExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDirectlyAssignableExpression(s)
	}
}

func (s *DirectlyAssignableExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDirectlyAssignableExpression(s)
	}
}

func (p *KotlinParser) DirectlyAssignableExpression() (localctx IDirectlyAssignableExpressionContext) {
	localctx = NewDirectlyAssignableExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, KotlinParserRULE_directlyAssignableExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2076)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2072)
			p.PostfixUnaryExpression()
		}
		{
			p.SetState(2073)
			p.AssignableSuffix()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2075)
			p.SimpleIdentifier()
		}

	}

	return localctx
}

// IAssignableExpressionContext is an interface to support dynamic dispatch.
type IAssignableExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignableExpressionContext differentiates from other interfaces.
	IsAssignableExpressionContext()
}

type AssignableExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignableExpressionContext() *AssignableExpressionContext {
	var p = new(AssignableExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_assignableExpression
	return p
}

func (*AssignableExpressionContext) IsAssignableExpressionContext() {}

func NewAssignableExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignableExpressionContext {
	var p = new(AssignableExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_assignableExpression

	return p
}

func (s *AssignableExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignableExpressionContext) PrefixUnaryExpression() IPrefixUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixUnaryExpressionContext)
}

func (s *AssignableExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignableExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignableExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAssignableExpression(s)
	}
}

func (s *AssignableExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAssignableExpression(s)
	}
}

func (p *KotlinParser) AssignableExpression() (localctx IAssignableExpressionContext) {
	localctx = NewAssignableExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, KotlinParserRULE_assignableExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2078)
		p.PrefixUnaryExpression()
	}

	return localctx
}

// IAssignableSuffixContext is an interface to support dynamic dispatch.
type IAssignableSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignableSuffixContext differentiates from other interfaces.
	IsAssignableSuffixContext()
}

type AssignableSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignableSuffixContext() *AssignableSuffixContext {
	var p = new(AssignableSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_assignableSuffix
	return p
}

func (*AssignableSuffixContext) IsAssignableSuffixContext() {}

func NewAssignableSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignableSuffixContext {
	var p = new(AssignableSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_assignableSuffix

	return p
}

func (s *AssignableSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignableSuffixContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *AssignableSuffixContext) IndexingSuffix() IIndexingSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexingSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexingSuffixContext)
}

func (s *AssignableSuffixContext) NavigationSuffix() INavigationSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INavigationSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INavigationSuffixContext)
}

func (s *AssignableSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignableSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignableSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAssignableSuffix(s)
	}
}

func (s *AssignableSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAssignableSuffix(s)
	}
}

func (p *KotlinParser) AssignableSuffix() (localctx IAssignableSuffixContext) {
	localctx = NewAssignableSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, KotlinParserRULE_assignableSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2083)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLANGLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2080)
			p.TypeArguments()
		}

	case KotlinParserLSQUARE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2081)
			p.IndexingSuffix()
		}

	case KotlinParserNL, KotlinParserDOT, KotlinParserCOLONCOLON, KotlinParserQUEST_NO_WS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2082)
			p.NavigationSuffix()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndexingSuffixContext is an interface to support dynamic dispatch.
type IIndexingSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexingSuffixContext differentiates from other interfaces.
	IsIndexingSuffixContext()
}

type IndexingSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexingSuffixContext() *IndexingSuffixContext {
	var p = new(IndexingSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_indexingSuffix
	return p
}

func (*IndexingSuffixContext) IsIndexingSuffixContext() {}

func NewIndexingSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexingSuffixContext {
	var p = new(IndexingSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_indexingSuffix

	return p
}

func (s *IndexingSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexingSuffixContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IndexingSuffixContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexingSuffixContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *IndexingSuffixContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *IndexingSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexingSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexingSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterIndexingSuffix(s)
	}
}

func (s *IndexingSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitIndexingSuffix(s)
	}
}

func (p *KotlinParser) IndexingSuffix() (localctx IIndexingSuffixContext) {
	localctx = NewIndexingSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, KotlinParserRULE_indexingSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2085)
		p.Match(KotlinParserLSQUARE)
	}
	p.SetState(2089)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 308, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2086)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2091)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 308, p.GetParserRuleContext())
	}
	{
		p.SetState(2092)
		p.Expression()
	}
	p.SetState(2109)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2096)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2093)
					p.Match(KotlinParserNL)
				}

				p.SetState(2098)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2099)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(2103)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 310, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2100)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(2105)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 310, p.GetParserRuleContext())
			}
			{
				p.SetState(2106)
				p.Expression()
			}

		}
		p.SetState(2111)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext())
	}
	p.SetState(2115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2112)
			p.Match(KotlinParserNL)
		}

		p.SetState(2117)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2118)
		p.Match(KotlinParserRSQUARE)
	}

	return localctx
}

// INavigationSuffixContext is an interface to support dynamic dispatch.
type INavigationSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNavigationSuffixContext differentiates from other interfaces.
	IsNavigationSuffixContext()
}

type NavigationSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNavigationSuffixContext() *NavigationSuffixContext {
	var p = new(NavigationSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_navigationSuffix
	return p
}

func (*NavigationSuffixContext) IsNavigationSuffixContext() {}

func NewNavigationSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NavigationSuffixContext {
	var p = new(NavigationSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_navigationSuffix

	return p
}

func (s *NavigationSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *NavigationSuffixContext) MemberAccessOperator() IMemberAccessOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberAccessOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberAccessOperatorContext)
}

func (s *NavigationSuffixContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *NavigationSuffixContext) ParenthesizedExpression() IParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedExpressionContext)
}

func (s *NavigationSuffixContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *NavigationSuffixContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *NavigationSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NavigationSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NavigationSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterNavigationSuffix(s)
	}
}

func (s *NavigationSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitNavigationSuffix(s)
	}
}

func (p *KotlinParser) NavigationSuffix() (localctx INavigationSuffixContext) {
	localctx = NewNavigationSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, KotlinParserRULE_navigationSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2123)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2120)
			p.Match(KotlinParserNL)
		}

		p.SetState(2125)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2126)
		p.MemberAccessOperator()
	}
	p.SetState(2130)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2127)
			p.Match(KotlinParserNL)
		}

		p.SetState(2132)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2136)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(2133)
			p.SimpleIdentifier()
		}

	case KotlinParserLPAREN:
		{
			p.SetState(2134)
			p.ParenthesizedExpression()
		}

	case KotlinParserCLASS:
		{
			p.SetState(2135)
			p.Match(KotlinParserCLASS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallSuffixContext is an interface to support dynamic dispatch.
type ICallSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallSuffixContext differentiates from other interfaces.
	IsCallSuffixContext()
}

type CallSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallSuffixContext() *CallSuffixContext {
	var p = new(CallSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_callSuffix
	return p
}

func (*CallSuffixContext) IsCallSuffixContext() {}

func NewCallSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallSuffixContext {
	var p = new(CallSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_callSuffix

	return p
}

func (s *CallSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *CallSuffixContext) AnnotatedLambda() IAnnotatedLambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotatedLambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotatedLambdaContext)
}

func (s *CallSuffixContext) TypeArguments() ITypeArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *CallSuffixContext) ValueArguments() IValueArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueArgumentsContext)
}

func (s *CallSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallSuffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterCallSuffix(s)
	}
}

func (s *CallSuffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitCallSuffix(s)
	}
}

func (p *KotlinParser) CallSuffix() (localctx ICallSuffixContext) {
	localctx = NewCallSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, KotlinParserRULE_callSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2149)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2139)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserLANGLE {
			{
				p.SetState(2138)
				p.TypeArguments()
			}

		}
		p.SetState(2142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserLPAREN {
			{
				p.SetState(2141)
				p.ValueArguments()
			}

		}
		{
			p.SetState(2144)
			p.AnnotatedLambda()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserLANGLE {
			{
				p.SetState(2145)
				p.TypeArguments()
			}

		}
		{
			p.SetState(2148)
			p.ValueArguments()
		}

	}

	return localctx
}

// IAnnotatedLambdaContext is an interface to support dynamic dispatch.
type IAnnotatedLambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotatedLambdaContext differentiates from other interfaces.
	IsAnnotatedLambdaContext()
}

type AnnotatedLambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotatedLambdaContext() *AnnotatedLambdaContext {
	var p = new(AnnotatedLambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_annotatedLambda
	return p
}

func (*AnnotatedLambdaContext) IsAnnotatedLambdaContext() {}

func NewAnnotatedLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotatedLambdaContext {
	var p = new(AnnotatedLambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_annotatedLambda

	return p
}

func (s *AnnotatedLambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotatedLambdaContext) LambdaLiteral() ILambdaLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaLiteralContext)
}

func (s *AnnotatedLambdaContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *AnnotatedLambdaContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotatedLambdaContext) Label() ILabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelContext)
}

func (s *AnnotatedLambdaContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AnnotatedLambdaContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AnnotatedLambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotatedLambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotatedLambdaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnnotatedLambda(s)
	}
}

func (s *AnnotatedLambdaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnnotatedLambda(s)
	}
}

func (p *KotlinParser) AnnotatedLambda() (localctx IAnnotatedLambdaContext) {
	localctx = NewAnnotatedLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, KotlinParserRULE_annotatedLambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99)))) != 0) {
		{
			p.SetState(2151)
			p.Annotation()
		}

		p.SetState(2156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserIdentifierAt {
		{
			p.SetState(2157)
			p.Label()
		}

	}
	p.SetState(2163)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2160)
			p.Match(KotlinParserNL)
		}

		p.SetState(2165)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2166)
		p.LambdaLiteral()
	}

	return localctx
}

// IValueArgumentsContext is an interface to support dynamic dispatch.
type IValueArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueArgumentsContext differentiates from other interfaces.
	IsValueArgumentsContext()
}

type ValueArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueArgumentsContext() *ValueArgumentsContext {
	var p = new(ValueArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_valueArguments
	return p
}

func (*ValueArgumentsContext) IsValueArgumentsContext() {}

func NewValueArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueArgumentsContext {
	var p = new(ValueArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_valueArguments

	return p
}

func (s *ValueArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueArgumentsContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ValueArgumentsContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ValueArgumentsContext) AllValueArgument() []IValueArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueArgumentContext)(nil)).Elem())
	var tst = make([]IValueArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueArgumentContext)
		}
	}

	return tst
}

func (s *ValueArgumentsContext) ValueArgument(i int) IValueArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueArgumentContext)
}

func (s *ValueArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterValueArguments(s)
	}
}

func (s *ValueArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitValueArguments(s)
	}
}

func (p *KotlinParser) ValueArguments() (localctx IValueArgumentsContext) {
	localctx = NewValueArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, KotlinParserRULE_valueArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2214)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 330, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2168)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(2172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2169)
				p.Match(KotlinParserNL)
			}

			p.SetState(2174)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2175)
			p.Match(KotlinParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2176)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(2180)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 324, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2177)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2182)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 324, p.GetParserRuleContext())
		}
		{
			p.SetState(2183)
			p.ValueArgument()
		}
		p.SetState(2200)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2187)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(2184)
						p.Match(KotlinParserNL)
					}

					p.SetState(2189)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2190)
					p.Match(KotlinParserCOMMA)
				}
				p.SetState(2194)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(2191)
							p.Match(KotlinParserNL)
						}

					}
					p.SetState(2196)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext())
				}
				{
					p.SetState(2197)
					p.ValueArgument()
				}

			}
			p.SetState(2202)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 327, p.GetParserRuleContext())
		}
		p.SetState(2206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2203)
				p.Match(KotlinParserNL)
			}

			p.SetState(2208)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserCOMMA {
			{
				p.SetState(2209)
				p.Match(KotlinParserCOMMA)
			}

		}
		{
			p.SetState(2212)
			p.Match(KotlinParserRPAREN)
		}

	}

	return localctx
}

// ITypeArgumentsContext is an interface to support dynamic dispatch.
type ITypeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArgumentsContext differentiates from other interfaces.
	IsTypeArgumentsContext()
}

type TypeArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentsContext() *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeArguments
	return p
}

func (*TypeArgumentsContext) IsTypeArgumentsContext() {}

func NewTypeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeArguments

	return p
}

func (s *TypeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentsContext) AllTypeProjection() []ITypeProjectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeProjectionContext)(nil)).Elem())
	var tst = make([]ITypeProjectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeProjectionContext)
		}
	}

	return tst
}

func (s *TypeArgumentsContext) TypeProjection(i int) ITypeProjectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeProjectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeProjectionContext)
}

func (s *TypeArgumentsContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeArgumentsContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeArguments(s)
	}
}

func (s *TypeArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeArguments(s)
	}
}

func (p *KotlinParser) TypeArguments() (localctx ITypeArgumentsContext) {
	localctx = NewTypeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, KotlinParserRULE_typeArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2216)
		p.Match(KotlinParserLANGLE)
	}
	p.SetState(2220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2217)
			p.Match(KotlinParserNL)
		}

		p.SetState(2222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2223)
		p.TypeProjection()
	}
	p.SetState(2240)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2227)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2224)
					p.Match(KotlinParserNL)
				}

				p.SetState(2229)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2230)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(2234)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2231)
					p.Match(KotlinParserNL)
				}

				p.SetState(2236)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2237)
				p.TypeProjection()
			}

		}
		p.SetState(2242)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 334, p.GetParserRuleContext())
	}
	p.SetState(2246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2243)
			p.Match(KotlinParserNL)
		}

		p.SetState(2248)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2250)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(2249)
			p.Match(KotlinParserCOMMA)
		}

	}
	{
		p.SetState(2252)
		p.Match(KotlinParserRANGLE)
	}

	return localctx
}

// ITypeProjectionContext is an interface to support dynamic dispatch.
type ITypeProjectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeProjectionContext differentiates from other interfaces.
	IsTypeProjectionContext()
}

type TypeProjectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeProjectionContext() *TypeProjectionContext {
	var p = new(TypeProjectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeProjection
	return p
}

func (*TypeProjectionContext) IsTypeProjectionContext() {}

func NewTypeProjectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeProjectionContext {
	var p = new(TypeProjectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeProjection

	return p
}

func (s *TypeProjectionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeProjectionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeProjectionContext) TypeProjectionModifiers() ITypeProjectionModifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeProjectionModifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeProjectionModifiersContext)
}

func (s *TypeProjectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeProjectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeProjectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeProjection(s)
	}
}

func (s *TypeProjectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeProjection(s)
	}
}

func (p *KotlinParser) TypeProjection() (localctx ITypeProjectionContext) {
	localctx = NewTypeProjectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, KotlinParserRULE_typeProjection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2259)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLPAREN, KotlinParserAT, KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserIN, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2255)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 337, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2254)
				p.TypeProjectionModifiers()
			}

		}
		{
			p.SetState(2257)
			p.Type_()
		}

	case KotlinParserMULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2258)
			p.Match(KotlinParserMULT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeProjectionModifiersContext is an interface to support dynamic dispatch.
type ITypeProjectionModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeProjectionModifiersContext differentiates from other interfaces.
	IsTypeProjectionModifiersContext()
}

type TypeProjectionModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeProjectionModifiersContext() *TypeProjectionModifiersContext {
	var p = new(TypeProjectionModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeProjectionModifiers
	return p
}

func (*TypeProjectionModifiersContext) IsTypeProjectionModifiersContext() {}

func NewTypeProjectionModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeProjectionModifiersContext {
	var p = new(TypeProjectionModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeProjectionModifiers

	return p
}

func (s *TypeProjectionModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeProjectionModifiersContext) AllTypeProjectionModifier() []ITypeProjectionModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeProjectionModifierContext)(nil)).Elem())
	var tst = make([]ITypeProjectionModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeProjectionModifierContext)
		}
	}

	return tst
}

func (s *TypeProjectionModifiersContext) TypeProjectionModifier(i int) ITypeProjectionModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeProjectionModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeProjectionModifierContext)
}

func (s *TypeProjectionModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeProjectionModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeProjectionModifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeProjectionModifiers(s)
	}
}

func (s *TypeProjectionModifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeProjectionModifiers(s)
	}
}

func (p *KotlinParser) TypeProjectionModifiers() (localctx ITypeProjectionModifiersContext) {
	localctx = NewTypeProjectionModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, KotlinParserRULE_typeProjectionModifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2262)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2261)
				p.TypeProjectionModifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2264)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeProjectionModifierContext is an interface to support dynamic dispatch.
type ITypeProjectionModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeProjectionModifierContext differentiates from other interfaces.
	IsTypeProjectionModifierContext()
}

type TypeProjectionModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeProjectionModifierContext() *TypeProjectionModifierContext {
	var p = new(TypeProjectionModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeProjectionModifier
	return p
}

func (*TypeProjectionModifierContext) IsTypeProjectionModifierContext() {}

func NewTypeProjectionModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeProjectionModifierContext {
	var p = new(TypeProjectionModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeProjectionModifier

	return p
}

func (s *TypeProjectionModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeProjectionModifierContext) VarianceModifier() IVarianceModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarianceModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarianceModifierContext)
}

func (s *TypeProjectionModifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeProjectionModifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeProjectionModifierContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *TypeProjectionModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeProjectionModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeProjectionModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeProjectionModifier(s)
	}
}

func (s *TypeProjectionModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeProjectionModifier(s)
	}
}

func (p *KotlinParser) TypeProjectionModifier() (localctx ITypeProjectionModifierContext) {
	localctx = NewTypeProjectionModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, KotlinParserRULE_typeProjectionModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2274)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserIN, KotlinParserOUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2266)
			p.VarianceModifier()
		}
		p.SetState(2270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2267)
				p.Match(KotlinParserNL)
			}

			p.SetState(2272)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2273)
			p.Annotation()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IValueArgumentContext is an interface to support dynamic dispatch.
type IValueArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueArgumentContext differentiates from other interfaces.
	IsValueArgumentContext()
}

type ValueArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueArgumentContext() *ValueArgumentContext {
	var p = new(ValueArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_valueArgument
	return p
}

func (*ValueArgumentContext) IsValueArgumentContext() {}

func NewValueArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueArgumentContext {
	var p = new(ValueArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_valueArgument

	return p
}

func (s *ValueArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueArgumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ValueArgumentContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ValueArgumentContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ValueArgumentContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ValueArgumentContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *ValueArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterValueArgument(s)
	}
}

func (s *ValueArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitValueArgument(s)
	}
}

func (p *KotlinParser) ValueArgument() (localctx IValueArgumentContext) {
	localctx = NewValueArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, KotlinParserRULE_valueArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2277)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 342, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2276)
			p.Annotation()
		}

	}
	p.SetState(2282)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 343, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2279)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2284)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 343, p.GetParserRuleContext())
	}
	p.SetState(2299)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 346, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2285)
			p.SimpleIdentifier()
		}
		p.SetState(2289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2286)
				p.Match(KotlinParserNL)
			}

			p.SetState(2291)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2292)
			p.Match(KotlinParserASSIGNMENT)
		}
		p.SetState(2296)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2293)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2298)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext())
		}

	}
	p.SetState(2302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserMULT {
		{
			p.SetState(2301)
			p.Match(KotlinParserMULT)
		}

	}
	p.SetState(2307)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 348, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2304)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2309)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 348, p.GetParserRuleContext())
	}
	{
		p.SetState(2310)
		p.Expression()
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) ParenthesizedExpression() IParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedExpressionContext)
}

func (s *PrimaryExpressionContext) LiteralConstant() ILiteralConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralConstantContext)
}

func (s *PrimaryExpressionContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *PrimaryExpressionContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *PrimaryExpressionContext) CallableReference() ICallableReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallableReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallableReferenceContext)
}

func (s *PrimaryExpressionContext) FunctionLiteral() IFunctionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionLiteralContext)
}

func (s *PrimaryExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *PrimaryExpressionContext) CollectionLiteral() ICollectionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionLiteralContext)
}

func (s *PrimaryExpressionContext) ThisExpression() IThisExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThisExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThisExpressionContext)
}

func (s *PrimaryExpressionContext) SuperExpression() ISuperExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuperExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuperExpressionContext)
}

func (s *PrimaryExpressionContext) IfExpression() IIfExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfExpressionContext)
}

func (s *PrimaryExpressionContext) WhenExpression() IWhenExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhenExpressionContext)
}

func (s *PrimaryExpressionContext) TryExpression() ITryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryExpressionContext)
}

func (s *PrimaryExpressionContext) JumpExpression() IJumpExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJumpExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJumpExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (p *KotlinParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, KotlinParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2326)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 349, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2312)
			p.ParenthesizedExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2313)
			p.LiteralConstant()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2314)
			p.StringLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2315)
			p.SimpleIdentifier()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2316)
			p.CallableReference()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2317)
			p.FunctionLiteral()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2318)
			p.ObjectLiteral()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2319)
			p.CollectionLiteral()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2320)
			p.ThisExpression()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2321)
			p.SuperExpression()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2322)
			p.IfExpression()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2323)
			p.WhenExpression()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2324)
			p.TryExpression()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2325)
			p.JumpExpression()
		}

	}

	return localctx
}

// IParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedExpressionContext differentiates from other interfaces.
	IsParenthesizedExpressionContext()
}

type ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedExpressionContext() *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_parenthesizedExpression
	return p
}

func (*ParenthesizedExpressionContext) IsParenthesizedExpressionContext() {}

func NewParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_parenthesizedExpression

	return p
}

func (s *ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ParenthesizedExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterParenthesizedExpression(s)
	}
}

func (s *ParenthesizedExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitParenthesizedExpression(s)
	}
}

func (p *KotlinParser) ParenthesizedExpression() (localctx IParenthesizedExpressionContext) {
	localctx = NewParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, KotlinParserRULE_parenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2328)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(2332)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 350, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2329)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2334)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 350, p.GetParserRuleContext())
	}
	{
		p.SetState(2335)
		p.Expression()
	}
	p.SetState(2339)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2336)
			p.Match(KotlinParserNL)
		}

		p.SetState(2341)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2342)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// ICollectionLiteralContext is an interface to support dynamic dispatch.
type ICollectionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionLiteralContext differentiates from other interfaces.
	IsCollectionLiteralContext()
}

type CollectionLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionLiteralContext() *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_collectionLiteral
	return p
}

func (*CollectionLiteralContext) IsCollectionLiteralContext() {}

func NewCollectionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_collectionLiteral

	return p
}

func (s *CollectionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionLiteralContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CollectionLiteralContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CollectionLiteralContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *CollectionLiteralContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *CollectionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterCollectionLiteral(s)
	}
}

func (s *CollectionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitCollectionLiteral(s)
	}
}

func (p *KotlinParser) CollectionLiteral() (localctx ICollectionLiteralContext) {
	localctx = NewCollectionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, KotlinParserRULE_collectionLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2390)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2344)
			p.Match(KotlinParserLSQUARE)
		}
		p.SetState(2348)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 352, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2345)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2350)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 352, p.GetParserRuleContext())
		}
		{
			p.SetState(2351)
			p.Expression()
		}
		p.SetState(2368)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2355)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(2352)
						p.Match(KotlinParserNL)
					}

					p.SetState(2357)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2358)
					p.Match(KotlinParserCOMMA)
				}
				p.SetState(2362)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(2359)
							p.Match(KotlinParserNL)
						}

					}
					p.SetState(2364)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 354, p.GetParserRuleContext())
				}
				{
					p.SetState(2365)
					p.Expression()
				}

			}
			p.SetState(2370)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 355, p.GetParserRuleContext())
		}
		p.SetState(2374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2371)
				p.Match(KotlinParserNL)
			}

			p.SetState(2376)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserCOMMA {
			{
				p.SetState(2377)
				p.Match(KotlinParserCOMMA)
			}

		}
		{
			p.SetState(2380)
			p.Match(KotlinParserRSQUARE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2382)
			p.Match(KotlinParserLSQUARE)
		}
		p.SetState(2386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2383)
				p.Match(KotlinParserNL)
			}

			p.SetState(2388)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2389)
			p.Match(KotlinParserRSQUARE)
		}

	}

	return localctx
}

// ILiteralConstantContext is an interface to support dynamic dispatch.
type ILiteralConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralConstantContext differentiates from other interfaces.
	IsLiteralConstantContext()
}

type LiteralConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralConstantContext() *LiteralConstantContext {
	var p = new(LiteralConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_literalConstant
	return p
}

func (*LiteralConstantContext) IsLiteralConstantContext() {}

func NewLiteralConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralConstantContext {
	var p = new(LiteralConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_literalConstant

	return p
}

func (s *LiteralConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralConstantContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserBooleanLiteral, 0)
}

func (s *LiteralConstantContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserIntegerLiteral, 0)
}

func (s *LiteralConstantContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserHexLiteral, 0)
}

func (s *LiteralConstantContext) BinLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserBinLiteral, 0)
}

func (s *LiteralConstantContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserCharacterLiteral, 0)
}

func (s *LiteralConstantContext) RealLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserRealLiteral, 0)
}

func (s *LiteralConstantContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserNullLiteral, 0)
}

func (s *LiteralConstantContext) LongLiteral() antlr.TerminalNode {
	return s.GetToken(KotlinParserLongLiteral, 0)
}

func (s *LiteralConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLiteralConstant(s)
	}
}

func (s *LiteralConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLiteralConstant(s)
	}
}

func (p *KotlinParser) LiteralConstant() (localctx ILiteralConstantContext) {
	localctx = NewLiteralConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, KotlinParserRULE_literalConstant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2392)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-136)&-(0x1f+1)) == 0 && ((1<<uint((_la-136)))&((1<<(KotlinParserRealLiteral-136))|(1<<(KotlinParserLongLiteral-136))|(1<<(KotlinParserIntegerLiteral-136))|(1<<(KotlinParserHexLiteral-136))|(1<<(KotlinParserBinLiteral-136))|(1<<(KotlinParserBooleanLiteral-136))|(1<<(KotlinParserNullLiteral-136))|(1<<(KotlinParserCharacterLiteral-136)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) LineStringLiteral() ILineStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILineStringLiteralContext)
}

func (s *StringLiteralContext) MultiLineStringLiteral() IMultiLineStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiLineStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiLineStringLiteralContext)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterStringLiteral(s)
	}
}

func (s *StringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitStringLiteral(s)
	}
}

func (p *KotlinParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, KotlinParserRULE_stringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2396)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserQUOTE_OPEN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2394)
			p.LineStringLiteral()
		}

	case KotlinParserTRIPLE_QUOTE_OPEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2395)
			p.MultiLineStringLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILineStringLiteralContext is an interface to support dynamic dispatch.
type ILineStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineStringLiteralContext differentiates from other interfaces.
	IsLineStringLiteralContext()
}

type LineStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineStringLiteralContext() *LineStringLiteralContext {
	var p = new(LineStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lineStringLiteral
	return p
}

func (*LineStringLiteralContext) IsLineStringLiteralContext() {}

func NewLineStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineStringLiteralContext {
	var p = new(LineStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lineStringLiteral

	return p
}

func (s *LineStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LineStringLiteralContext) QUOTE_OPEN() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUOTE_OPEN, 0)
}

func (s *LineStringLiteralContext) QUOTE_CLOSE() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUOTE_CLOSE, 0)
}

func (s *LineStringLiteralContext) AllLineStringContent() []ILineStringContentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILineStringContentContext)(nil)).Elem())
	var tst = make([]ILineStringContentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILineStringContentContext)
		}
	}

	return tst
}

func (s *LineStringLiteralContext) LineStringContent(i int) ILineStringContentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineStringContentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILineStringContentContext)
}

func (s *LineStringLiteralContext) AllLineStringExpression() []ILineStringExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILineStringExpressionContext)(nil)).Elem())
	var tst = make([]ILineStringExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILineStringExpressionContext)
		}
	}

	return tst
}

func (s *LineStringLiteralContext) LineStringExpression(i int) ILineStringExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILineStringExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILineStringExpressionContext)
}

func (s *LineStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LineStringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLineStringLiteral(s)
	}
}

func (s *LineStringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLineStringLiteral(s)
	}
}

func (p *KotlinParser) LineStringLiteral() (localctx ILineStringLiteralContext) {
	localctx = NewLineStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, KotlinParserRULE_lineStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2398)
		p.Match(KotlinParserQUOTE_OPEN)
	}
	p.SetState(2403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(KotlinParserLineStrRef-161))|(1<<(KotlinParserLineStrText-161))|(1<<(KotlinParserLineStrEscapedChar-161))|(1<<(KotlinParserLineStrExprStart-161)))) != 0 {
		p.SetState(2401)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case KotlinParserLineStrRef, KotlinParserLineStrText, KotlinParserLineStrEscapedChar:
			{
				p.SetState(2399)
				p.LineStringContent()
			}

		case KotlinParserLineStrExprStart:
			{
				p.SetState(2400)
				p.LineStringExpression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2406)
		p.Match(KotlinParserQUOTE_CLOSE)
	}

	return localctx
}

// IMultiLineStringLiteralContext is an interface to support dynamic dispatch.
type IMultiLineStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiLineStringLiteralContext differentiates from other interfaces.
	IsMultiLineStringLiteralContext()
}

type MultiLineStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiLineStringLiteralContext() *MultiLineStringLiteralContext {
	var p = new(MultiLineStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiLineStringLiteral
	return p
}

func (*MultiLineStringLiteralContext) IsMultiLineStringLiteralContext() {}

func NewMultiLineStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiLineStringLiteralContext {
	var p = new(MultiLineStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiLineStringLiteral

	return p
}

func (s *MultiLineStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiLineStringLiteralContext) TRIPLE_QUOTE_OPEN() antlr.TerminalNode {
	return s.GetToken(KotlinParserTRIPLE_QUOTE_OPEN, 0)
}

func (s *MultiLineStringLiteralContext) TRIPLE_QUOTE_CLOSE() antlr.TerminalNode {
	return s.GetToken(KotlinParserTRIPLE_QUOTE_CLOSE, 0)
}

func (s *MultiLineStringLiteralContext) AllMultiLineStringContent() []IMultiLineStringContentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiLineStringContentContext)(nil)).Elem())
	var tst = make([]IMultiLineStringContentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiLineStringContentContext)
		}
	}

	return tst
}

func (s *MultiLineStringLiteralContext) MultiLineStringContent(i int) IMultiLineStringContentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiLineStringContentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiLineStringContentContext)
}

func (s *MultiLineStringLiteralContext) AllMultiLineStringExpression() []IMultiLineStringExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMultiLineStringExpressionContext)(nil)).Elem())
	var tst = make([]IMultiLineStringExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMultiLineStringExpressionContext)
		}
	}

	return tst
}

func (s *MultiLineStringLiteralContext) MultiLineStringExpression(i int) IMultiLineStringExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiLineStringExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMultiLineStringExpressionContext)
}

func (s *MultiLineStringLiteralContext) AllMultiLineStringQuote() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserMultiLineStringQuote)
}

func (s *MultiLineStringLiteralContext) MultiLineStringQuote(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserMultiLineStringQuote, i)
}

func (s *MultiLineStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiLineStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiLineStringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiLineStringLiteral(s)
	}
}

func (s *MultiLineStringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiLineStringLiteral(s)
	}
}

func (p *KotlinParser) MultiLineStringLiteral() (localctx IMultiLineStringLiteralContext) {
	localctx = NewMultiLineStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, KotlinParserRULE_multiLineStringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2408)
		p.Match(KotlinParserTRIPLE_QUOTE_OPEN)
	}
	p.SetState(2414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-166)&-(0x1f+1)) == 0 && ((1<<uint((_la-166)))&((1<<(KotlinParserMultiLineStringQuote-166))|(1<<(KotlinParserMultiLineStrRef-166))|(1<<(KotlinParserMultiLineStrText-166))|(1<<(KotlinParserMultiLineStrExprStart-166)))) != 0 {
		p.SetState(2412)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2409)
				p.MultiLineStringContent()
			}

		case 2:
			{
				p.SetState(2410)
				p.MultiLineStringExpression()
			}

		case 3:
			{
				p.SetState(2411)
				p.Match(KotlinParserMultiLineStringQuote)
			}

		}

		p.SetState(2416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2417)
		p.Match(KotlinParserTRIPLE_QUOTE_CLOSE)
	}

	return localctx
}

// ILineStringContentContext is an interface to support dynamic dispatch.
type ILineStringContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineStringContentContext differentiates from other interfaces.
	IsLineStringContentContext()
}

type LineStringContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineStringContentContext() *LineStringContentContext {
	var p = new(LineStringContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lineStringContent
	return p
}

func (*LineStringContentContext) IsLineStringContentContext() {}

func NewLineStringContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineStringContentContext {
	var p = new(LineStringContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lineStringContent

	return p
}

func (s *LineStringContentContext) GetParser() antlr.Parser { return s.parser }

func (s *LineStringContentContext) LineStrText() antlr.TerminalNode {
	return s.GetToken(KotlinParserLineStrText, 0)
}

func (s *LineStringContentContext) LineStrEscapedChar() antlr.TerminalNode {
	return s.GetToken(KotlinParserLineStrEscapedChar, 0)
}

func (s *LineStringContentContext) LineStrRef() antlr.TerminalNode {
	return s.GetToken(KotlinParserLineStrRef, 0)
}

func (s *LineStringContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineStringContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LineStringContentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLineStringContent(s)
	}
}

func (s *LineStringContentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLineStringContent(s)
	}
}

func (p *KotlinParser) LineStringContent() (localctx ILineStringContentContext) {
	localctx = NewLineStringContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, KotlinParserRULE_lineStringContent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2419)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-161)&-(0x1f+1)) == 0 && ((1<<uint((_la-161)))&((1<<(KotlinParserLineStrRef-161))|(1<<(KotlinParserLineStrText-161))|(1<<(KotlinParserLineStrEscapedChar-161)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ILineStringExpressionContext is an interface to support dynamic dispatch.
type ILineStringExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLineStringExpressionContext differentiates from other interfaces.
	IsLineStringExpressionContext()
}

type LineStringExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLineStringExpressionContext() *LineStringExpressionContext {
	var p = new(LineStringExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lineStringExpression
	return p
}

func (*LineStringExpressionContext) IsLineStringExpressionContext() {}

func NewLineStringExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LineStringExpressionContext {
	var p = new(LineStringExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lineStringExpression

	return p
}

func (s *LineStringExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LineStringExpressionContext) LineStrExprStart() antlr.TerminalNode {
	return s.GetToken(KotlinParserLineStrExprStart, 0)
}

func (s *LineStringExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LineStringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LineStringExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LineStringExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLineStringExpression(s)
	}
}

func (s *LineStringExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLineStringExpression(s)
	}
}

func (p *KotlinParser) LineStringExpression() (localctx ILineStringExpressionContext) {
	localctx = NewLineStringExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, KotlinParserRULE_lineStringExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2421)
		p.Match(KotlinParserLineStrExprStart)
	}
	{
		p.SetState(2422)
		p.Expression()
	}
	{
		p.SetState(2423)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// IMultiLineStringContentContext is an interface to support dynamic dispatch.
type IMultiLineStringContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiLineStringContentContext differentiates from other interfaces.
	IsMultiLineStringContentContext()
}

type MultiLineStringContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiLineStringContentContext() *MultiLineStringContentContext {
	var p = new(MultiLineStringContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiLineStringContent
	return p
}

func (*MultiLineStringContentContext) IsMultiLineStringContentContext() {}

func NewMultiLineStringContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiLineStringContentContext {
	var p = new(MultiLineStringContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiLineStringContent

	return p
}

func (s *MultiLineStringContentContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiLineStringContentContext) MultiLineStrText() antlr.TerminalNode {
	return s.GetToken(KotlinParserMultiLineStrText, 0)
}

func (s *MultiLineStringContentContext) MultiLineStringQuote() antlr.TerminalNode {
	return s.GetToken(KotlinParserMultiLineStringQuote, 0)
}

func (s *MultiLineStringContentContext) MultiLineStrRef() antlr.TerminalNode {
	return s.GetToken(KotlinParserMultiLineStrRef, 0)
}

func (s *MultiLineStringContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiLineStringContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiLineStringContentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiLineStringContent(s)
	}
}

func (s *MultiLineStringContentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiLineStringContent(s)
	}
}

func (p *KotlinParser) MultiLineStringContent() (localctx IMultiLineStringContentContext) {
	localctx = NewMultiLineStringContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, KotlinParserRULE_multiLineStringContent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2425)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-166)&-(0x1f+1)) == 0 && ((1<<uint((_la-166)))&((1<<(KotlinParserMultiLineStringQuote-166))|(1<<(KotlinParserMultiLineStrRef-166))|(1<<(KotlinParserMultiLineStrText-166)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IMultiLineStringExpressionContext is an interface to support dynamic dispatch.
type IMultiLineStringExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiLineStringExpressionContext differentiates from other interfaces.
	IsMultiLineStringExpressionContext()
}

type MultiLineStringExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiLineStringExpressionContext() *MultiLineStringExpressionContext {
	var p = new(MultiLineStringExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiLineStringExpression
	return p
}

func (*MultiLineStringExpressionContext) IsMultiLineStringExpressionContext() {}

func NewMultiLineStringExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiLineStringExpressionContext {
	var p = new(MultiLineStringExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiLineStringExpression

	return p
}

func (s *MultiLineStringExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiLineStringExpressionContext) MultiLineStrExprStart() antlr.TerminalNode {
	return s.GetToken(KotlinParserMultiLineStrExprStart, 0)
}

func (s *MultiLineStringExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultiLineStringExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *MultiLineStringExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *MultiLineStringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiLineStringExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiLineStringExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiLineStringExpression(s)
	}
}

func (s *MultiLineStringExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiLineStringExpression(s)
	}
}

func (p *KotlinParser) MultiLineStringExpression() (localctx IMultiLineStringExpressionContext) {
	localctx = NewMultiLineStringExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, KotlinParserRULE_multiLineStringExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2427)
		p.Match(KotlinParserMultiLineStrExprStart)
	}
	p.SetState(2431)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 365, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2428)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2433)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 365, p.GetParserRuleContext())
	}
	{
		p.SetState(2434)
		p.Expression()
	}
	p.SetState(2438)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2435)
			p.Match(KotlinParserNL)
		}

		p.SetState(2440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2441)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// ILambdaLiteralContext is an interface to support dynamic dispatch.
type ILambdaLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaLiteralContext differentiates from other interfaces.
	IsLambdaLiteralContext()
}

type LambdaLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaLiteralContext() *LambdaLiteralContext {
	var p = new(LambdaLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lambdaLiteral
	return p
}

func (*LambdaLiteralContext) IsLambdaLiteralContext() {}

func NewLambdaLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaLiteralContext {
	var p = new(LambdaLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lambdaLiteral

	return p
}

func (s *LambdaLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaLiteralContext) LCURL() antlr.TerminalNode {
	return s.GetToken(KotlinParserLCURL, 0)
}

func (s *LambdaLiteralContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *LambdaLiteralContext) RCURL() antlr.TerminalNode {
	return s.GetToken(KotlinParserRCURL, 0)
}

func (s *LambdaLiteralContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *LambdaLiteralContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *LambdaLiteralContext) ARROW() antlr.TerminalNode {
	return s.GetToken(KotlinParserARROW, 0)
}

func (s *LambdaLiteralContext) LambdaParameters() ILambdaParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaParametersContext)
}

func (s *LambdaLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLambdaLiteral(s)
	}
}

func (s *LambdaLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLambdaLiteral(s)
	}
}

func (p *KotlinParser) LambdaLiteral() (localctx ILambdaLiteralContext) {
	localctx = NewLambdaLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, KotlinParserRULE_lambdaLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2491)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 374, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2443)
			p.Match(KotlinParserLCURL)
		}
		p.SetState(2447)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 367, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2444)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2449)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 367, p.GetParserRuleContext())
		}
		{
			p.SetState(2450)
			p.Statements()
		}
		p.SetState(2454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2451)
				p.Match(KotlinParserNL)
			}

			p.SetState(2456)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2457)
			p.Match(KotlinParserRCURL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2459)
			p.Match(KotlinParserLCURL)
		}
		p.SetState(2463)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2460)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2465)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext())
		}
		p.SetState(2467)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2466)
				p.LambdaParameters()
			}

		}
		p.SetState(2472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2469)
				p.Match(KotlinParserNL)
			}

			p.SetState(2474)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2475)
			p.Match(KotlinParserARROW)
		}
		p.SetState(2479)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 372, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2476)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2481)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 372, p.GetParserRuleContext())
		}
		{
			p.SetState(2482)
			p.Statements()
		}
		p.SetState(2486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2483)
				p.Match(KotlinParserNL)
			}

			p.SetState(2488)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2489)
			p.Match(KotlinParserRCURL)
		}

	}

	return localctx
}

// ILambdaParametersContext is an interface to support dynamic dispatch.
type ILambdaParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaParametersContext differentiates from other interfaces.
	IsLambdaParametersContext()
}

type LambdaParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaParametersContext() *LambdaParametersContext {
	var p = new(LambdaParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lambdaParameters
	return p
}

func (*LambdaParametersContext) IsLambdaParametersContext() {}

func NewLambdaParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaParametersContext {
	var p = new(LambdaParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lambdaParameters

	return p
}

func (s *LambdaParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaParametersContext) AllLambdaParameter() []ILambdaParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILambdaParameterContext)(nil)).Elem())
	var tst = make([]ILambdaParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILambdaParameterContext)
		}
	}

	return tst
}

func (s *LambdaParametersContext) LambdaParameter(i int) ILambdaParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILambdaParameterContext)
}

func (s *LambdaParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserCOMMA)
}

func (s *LambdaParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserCOMMA, i)
}

func (s *LambdaParametersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *LambdaParametersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *LambdaParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLambdaParameters(s)
	}
}

func (s *LambdaParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLambdaParameters(s)
	}
}

func (p *KotlinParser) LambdaParameters() (localctx ILambdaParametersContext) {
	localctx = NewLambdaParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, KotlinParserRULE_lambdaParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2493)
		p.LambdaParameter()
	}
	p.SetState(2510)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2497)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2494)
					p.Match(KotlinParserNL)
				}

				p.SetState(2499)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2500)
				p.Match(KotlinParserCOMMA)
			}
			p.SetState(2504)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 376, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2501)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(2506)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 376, p.GetParserRuleContext())
			}
			{
				p.SetState(2507)
				p.LambdaParameter()
			}

		}
		p.SetState(2512)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext())
	}
	p.SetState(2514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserCOMMA {
		{
			p.SetState(2513)
			p.Match(KotlinParserCOMMA)
		}

	}

	return localctx
}

// ILambdaParameterContext is an interface to support dynamic dispatch.
type ILambdaParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaParameterContext differentiates from other interfaces.
	IsLambdaParameterContext()
}

type LambdaParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaParameterContext() *LambdaParameterContext {
	var p = new(LambdaParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_lambdaParameter
	return p
}

func (*LambdaParameterContext) IsLambdaParameterContext() {}

func NewLambdaParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaParameterContext {
	var p = new(LambdaParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_lambdaParameter

	return p
}

func (s *LambdaParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaParameterContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *LambdaParameterContext) MultiVariableDeclaration() IMultiVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiVariableDeclarationContext)
}

func (s *LambdaParameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(KotlinParserCOLON, 0)
}

func (s *LambdaParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *LambdaParameterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *LambdaParameterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *LambdaParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLambdaParameter(s)
	}
}

func (s *LambdaParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLambdaParameter(s)
	}
}

func (p *KotlinParser) LambdaParameter() (localctx ILambdaParameterContext) {
	localctx = NewLambdaParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, KotlinParserRULE_lambdaParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2534)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserAT, KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2516)
			p.VariableDeclaration()
		}

	case KotlinParserLPAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2517)
			p.MultiVariableDeclaration()
		}
		p.SetState(2532)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 381, p.GetParserRuleContext()) == 1 {
			p.SetState(2521)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2518)
					p.Match(KotlinParserNL)
				}

				p.SetState(2523)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2524)
				p.Match(KotlinParserCOLON)
			}
			p.SetState(2528)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2525)
					p.Match(KotlinParserNL)
				}

				p.SetState(2530)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2531)
				p.Type_()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnonymousFunctionContext is an interface to support dynamic dispatch.
type IAnonymousFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousFunctionContext differentiates from other interfaces.
	IsAnonymousFunctionContext()
}

type AnonymousFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousFunctionContext() *AnonymousFunctionContext {
	var p = new(AnonymousFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_anonymousFunction
	return p
}

func (*AnonymousFunctionContext) IsAnonymousFunctionContext() {}

func NewAnonymousFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousFunctionContext {
	var p = new(AnonymousFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_anonymousFunction

	return p
}

func (s *AnonymousFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousFunctionContext) FunctionValueParameters() IFunctionValueParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionValueParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionValueParametersContext)
}

func (s *AnonymousFunctionContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *AnonymousFunctionContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *AnonymousFunctionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AnonymousFunctionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AnonymousFunctionContext) TypeConstraints() ITypeConstraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConstraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintsContext)
}

func (s *AnonymousFunctionContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *AnonymousFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnonymousFunction(s)
	}
}

func (s *AnonymousFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnonymousFunction(s)
	}
}

func (p *KotlinParser) AnonymousFunction() (localctx IAnonymousFunctionContext) {
	localctx = NewAnonymousFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, KotlinParserRULE_anonymousFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2536)
		p.Match(KotlinParserFUN)
	}
	p.SetState(2552)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext()) == 1 {
		p.SetState(2540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2537)
				p.Match(KotlinParserNL)
			}

			p.SetState(2542)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2543)
			p.Type_()
		}
		p.SetState(2547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2544)
				p.Match(KotlinParserNL)
			}

			p.SetState(2549)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2550)
			p.Match(KotlinParserDOT)
		}

	}
	p.SetState(2557)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2554)
			p.Match(KotlinParserNL)
		}

		p.SetState(2559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2560)
		p.FunctionValueParameters()
	}
	p.SetState(2575)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext()) == 1 {
		p.SetState(2564)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2561)
				p.Match(KotlinParserNL)
			}

			p.SetState(2566)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2567)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(2571)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2568)
				p.Match(KotlinParserNL)
			}

			p.SetState(2573)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2574)
			p.Type_()
		}

	}
	p.SetState(2584)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 391, p.GetParserRuleContext()) == 1 {
		p.SetState(2580)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2577)
				p.Match(KotlinParserNL)
			}

			p.SetState(2582)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2583)
			p.TypeConstraints()
		}

	}
	p.SetState(2593)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 393, p.GetParserRuleContext()) == 1 {
		p.SetState(2589)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2586)
				p.Match(KotlinParserNL)
			}

			p.SetState(2591)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2592)
			p.FunctionBody()
		}

	}

	return localctx
}

// IFunctionLiteralContext is an interface to support dynamic dispatch.
type IFunctionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionLiteralContext differentiates from other interfaces.
	IsFunctionLiteralContext()
}

type FunctionLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionLiteralContext() *FunctionLiteralContext {
	var p = new(FunctionLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionLiteral
	return p
}

func (*FunctionLiteralContext) IsFunctionLiteralContext() {}

func NewFunctionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionLiteralContext {
	var p = new(FunctionLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionLiteral

	return p
}

func (s *FunctionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionLiteralContext) LambdaLiteral() ILambdaLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaLiteralContext)
}

func (s *FunctionLiteralContext) AnonymousFunction() IAnonymousFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymousFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnonymousFunctionContext)
}

func (s *FunctionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionLiteral(s)
	}
}

func (s *FunctionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionLiteral(s)
	}
}

func (p *KotlinParser) FunctionLiteral() (localctx IFunctionLiteralContext) {
	localctx = NewFunctionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, KotlinParserRULE_functionLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2597)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserLCURL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2595)
			p.LambdaLiteral()
		}

	case KotlinParserFUN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2596)
			p.AnonymousFunction()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) DelegationSpecifiers() IDelegationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelegationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelegationSpecifiersContext)
}

func (s *ObjectLiteralContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ObjectLiteralContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ObjectLiteralContext) ClassBody() IClassBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassBodyContext)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterObjectLiteral(s)
	}
}

func (s *ObjectLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitObjectLiteral(s)
	}
}

func (p *KotlinParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, KotlinParserRULE_objectLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2631)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2599)
			p.Match(KotlinParserOBJECT)
		}
		p.SetState(2603)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2600)
				p.Match(KotlinParserNL)
			}

			p.SetState(2605)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2606)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(2610)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2607)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2612)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext())
		}
		{
			p.SetState(2613)
			p.DelegationSpecifiers()
		}
		p.SetState(2621)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 398, p.GetParserRuleContext()) == 1 {
			p.SetState(2617)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2614)
					p.Match(KotlinParserNL)
				}

				p.SetState(2619)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2620)
				p.ClassBody()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2623)
			p.Match(KotlinParserOBJECT)
		}
		p.SetState(2627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2624)
				p.Match(KotlinParserNL)
			}

			p.SetState(2629)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2630)
			p.ClassBody()
		}

	}

	return localctx
}

// IThisExpressionContext is an interface to support dynamic dispatch.
type IThisExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThisExpressionContext differentiates from other interfaces.
	IsThisExpressionContext()
}

type ThisExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThisExpressionContext() *ThisExpressionContext {
	var p = new(ThisExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_thisExpression
	return p
}

func (*ThisExpressionContext) IsThisExpressionContext() {}

func NewThisExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThisExpressionContext {
	var p = new(ThisExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_thisExpression

	return p
}

func (s *ThisExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ThisExpressionContext) THIS_AT() antlr.TerminalNode {
	return s.GetToken(KotlinParserTHIS_AT, 0)
}

func (s *ThisExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThisExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThisExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterThisExpression(s)
	}
}

func (s *ThisExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitThisExpression(s)
	}
}

func (p *KotlinParser) ThisExpression() (localctx IThisExpressionContext) {
	localctx = NewThisExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, KotlinParserRULE_thisExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2633)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserTHIS_AT || _la == KotlinParserTHIS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ISuperExpressionContext is an interface to support dynamic dispatch.
type ISuperExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuperExpressionContext differentiates from other interfaces.
	IsSuperExpressionContext()
}

type SuperExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuperExpressionContext() *SuperExpressionContext {
	var p = new(SuperExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_superExpression
	return p
}

func (*SuperExpressionContext) IsSuperExpressionContext() {}

func NewSuperExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuperExpressionContext {
	var p = new(SuperExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_superExpression

	return p
}

func (s *SuperExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SuperExpressionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *SuperExpressionContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *SuperExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SuperExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SuperExpressionContext) SUPER_AT() antlr.TerminalNode {
	return s.GetToken(KotlinParserSUPER_AT, 0)
}

func (s *SuperExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuperExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuperExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSuperExpression(s)
	}
}

func (s *SuperExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSuperExpression(s)
	}
}

func (p *KotlinParser) SuperExpression() (localctx ISuperExpressionContext) {
	localctx = NewSuperExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, KotlinParserRULE_superExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2659)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserSUPER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2635)
			p.Match(KotlinParserSUPER)
		}
		p.SetState(2652)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 403, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2636)
				p.Match(KotlinParserLANGLE)
			}
			p.SetState(2640)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2637)
					p.Match(KotlinParserNL)
				}

				p.SetState(2642)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2643)
				p.Type_()
			}
			p.SetState(2647)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2644)
					p.Match(KotlinParserNL)
				}

				p.SetState(2649)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2650)
				p.Match(KotlinParserRANGLE)
			}

		}
		p.SetState(2656)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 404, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2654)
				p.Match(KotlinParserAT)
			}
			{
				p.SetState(2655)
				p.SimpleIdentifier()
			}

		}

	case KotlinParserSUPER_AT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2658)
			p.Match(KotlinParserSUPER_AT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControlStructureBodyContext is an interface to support dynamic dispatch.
type IControlStructureBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlStructureBodyContext differentiates from other interfaces.
	IsControlStructureBodyContext()
}

type ControlStructureBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlStructureBodyContext() *ControlStructureBodyContext {
	var p = new(ControlStructureBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_controlStructureBody
	return p
}

func (*ControlStructureBodyContext) IsControlStructureBodyContext() {}

func NewControlStructureBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlStructureBodyContext {
	var p = new(ControlStructureBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_controlStructureBody

	return p
}

func (s *ControlStructureBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlStructureBodyContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ControlStructureBodyContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ControlStructureBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlStructureBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ControlStructureBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterControlStructureBody(s)
	}
}

func (s *ControlStructureBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitControlStructureBody(s)
	}
}

func (p *KotlinParser) ControlStructureBody() (localctx IControlStructureBodyContext) {
	localctx = NewControlStructureBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, KotlinParserRULE_controlStructureBody)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2663)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 406, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2661)
			p.Block()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2662)
			p.Statement()
		}

	}

	return localctx
}

// IIfExpressionContext is an interface to support dynamic dispatch.
type IIfExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfExpressionContext differentiates from other interfaces.
	IsIfExpressionContext()
}

type IfExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfExpressionContext() *IfExpressionContext {
	var p = new(IfExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_ifExpression
	return p
}

func (*IfExpressionContext) IsIfExpressionContext() {}

func NewIfExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfExpressionContext {
	var p = new(IfExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_ifExpression

	return p
}

func (s *IfExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IfExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfExpressionContext) AllControlStructureBody() []IControlStructureBodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem())
	var tst = make([]IControlStructureBodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IControlStructureBodyContext)
		}
	}

	return tst
}

func (s *IfExpressionContext) ControlStructureBody(i int) IControlStructureBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IControlStructureBodyContext)
}

func (s *IfExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *IfExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *IfExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterIfExpression(s)
	}
}

func (s *IfExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitIfExpression(s)
	}
}

func (p *KotlinParser) IfExpression() (localctx IIfExpressionContext) {
	localctx = NewIfExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, KotlinParserRULE_ifExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2759)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 422, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2665)
			p.Match(KotlinParserIF)
		}
		p.SetState(2669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2666)
				p.Match(KotlinParserNL)
			}

			p.SetState(2671)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2672)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(2676)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 408, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2673)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2678)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 408, p.GetParserRuleContext())
		}
		{
			p.SetState(2679)
			p.Expression()
		}
		p.SetState(2683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2680)
				p.Match(KotlinParserNL)
			}

			p.SetState(2685)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2686)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(2690)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 410, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2687)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2692)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 410, p.GetParserRuleContext())
		}
		{
			p.SetState(2693)
			p.ControlStructureBody()
		}
		p.SetState(2711)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 414, p.GetParserRuleContext()) == 1 {
			p.SetState(2695)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == KotlinParserSEMICOLON {
				{
					p.SetState(2694)
					p.Match(KotlinParserSEMICOLON)
				}

			}
			p.SetState(2700)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2697)
					p.Match(KotlinParserNL)
				}

				p.SetState(2702)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2703)
				p.Match(KotlinParserELSE)
			}
			p.SetState(2707)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2704)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(2709)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext())
			}
			{
				p.SetState(2710)
				p.ControlStructureBody()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2713)
			p.Match(KotlinParserIF)
		}
		p.SetState(2717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2714)
				p.Match(KotlinParserNL)
			}

			p.SetState(2719)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2720)
			p.Match(KotlinParserLPAREN)
		}
		p.SetState(2724)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2721)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2726)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext())
		}
		{
			p.SetState(2727)
			p.Expression()
		}
		p.SetState(2731)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2728)
				p.Match(KotlinParserNL)
			}

			p.SetState(2733)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2734)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(2738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2735)
				p.Match(KotlinParserNL)
			}

			p.SetState(2740)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(2748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == KotlinParserSEMICOLON {
			{
				p.SetState(2741)
				p.Match(KotlinParserSEMICOLON)
			}
			p.SetState(2745)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2742)
					p.Match(KotlinParserNL)
				}

				p.SetState(2747)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(2750)
			p.Match(KotlinParserELSE)
		}
		p.SetState(2754)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2751)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2756)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext())
		}
		{
			p.SetState(2757)
			p.ControlStructureBody()
		}

	}

	return localctx
}

// IWhenExpressionContext is an interface to support dynamic dispatch.
type IWhenExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenExpressionContext differentiates from other interfaces.
	IsWhenExpressionContext()
}

type WhenExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenExpressionContext() *WhenExpressionContext {
	var p = new(WhenExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_whenExpression
	return p
}

func (*WhenExpressionContext) IsWhenExpressionContext() {}

func NewWhenExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenExpressionContext {
	var p = new(WhenExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_whenExpression

	return p
}

func (s *WhenExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *WhenExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *WhenExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenExpressionContext) AllWhenEntry() []IWhenEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenEntryContext)(nil)).Elem())
	var tst = make([]IWhenEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenEntryContext)
		}
	}

	return tst
}

func (s *WhenExpressionContext) WhenEntry(i int) IWhenEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenEntryContext)
}

func (s *WhenExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterWhenExpression(s)
	}
}

func (s *WhenExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitWhenExpression(s)
	}
}

func (p *KotlinParser) WhenExpression() (localctx IWhenExpressionContext) {
	localctx = NewWhenExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, KotlinParserRULE_whenExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2761)
		p.Match(KotlinParserWHEN)
	}
	p.SetState(2765)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 423, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2762)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2767)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 423, p.GetParserRuleContext())
	}
	p.SetState(2772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserLPAREN {
		{
			p.SetState(2768)
			p.Match(KotlinParserLPAREN)
		}
		{
			p.SetState(2769)
			p.Expression()
		}
		{
			p.SetState(2770)
			p.Match(KotlinParserRPAREN)
		}

	}
	p.SetState(2777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2774)
			p.Match(KotlinParserNL)
		}

		p.SetState(2779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2780)
		p.Match(KotlinParserLCURL)
	}
	p.SetState(2784)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2781)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2786)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext())
	}
	p.SetState(2796)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2787)
				p.WhenEntry()
			}
			p.SetState(2791)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 427, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2788)
						p.Match(KotlinParserNL)
					}

				}
				p.SetState(2793)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 427, p.GetParserRuleContext())
			}

		}
		p.SetState(2798)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext())
	}
	p.SetState(2802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2799)
			p.Match(KotlinParserNL)
		}

		p.SetState(2804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2805)
		p.Match(KotlinParserRCURL)
	}

	return localctx
}

// IWhenEntryContext is an interface to support dynamic dispatch.
type IWhenEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenEntryContext differentiates from other interfaces.
	IsWhenEntryContext()
}

type WhenEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenEntryContext() *WhenEntryContext {
	var p = new(WhenEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_whenEntry
	return p
}

func (*WhenEntryContext) IsWhenEntryContext() {}

func NewWhenEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenEntryContext {
	var p = new(WhenEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_whenEntry

	return p
}

func (s *WhenEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenEntryContext) AllWhenCondition() []IWhenConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenConditionContext)(nil)).Elem())
	var tst = make([]IWhenConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenConditionContext)
		}
	}

	return tst
}

func (s *WhenEntryContext) WhenCondition(i int) IWhenConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenConditionContext)
}

func (s *WhenEntryContext) ControlStructureBody() IControlStructureBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlStructureBodyContext)
}

func (s *WhenEntryContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *WhenEntryContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *WhenEntryContext) Semi() ISemiContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISemiContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISemiContext)
}

func (s *WhenEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterWhenEntry(s)
	}
}

func (s *WhenEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitWhenEntry(s)
	}
}

func (p *KotlinParser) WhenEntry() (localctx IWhenEntryContext) {
	localctx = NewWhenEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, KotlinParserRULE_whenEntry)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2862)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserLPAREN, KotlinParserLSQUARE, KotlinParserLCURL, KotlinParserADD, KotlinParserSUB, KotlinParserINCR, KotlinParserDECR, KotlinParserEXCL_WS, KotlinParserEXCL_NO_WS, KotlinParserCOLONCOLON, KotlinParserAT, KotlinParserRETURN_AT, KotlinParserCONTINUE_AT, KotlinParserBREAK_AT, KotlinParserTHIS_AT, KotlinParserSUPER_AT, KotlinParserIMPORT, KotlinParserFUN, KotlinParserOBJECT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserTHIS, KotlinParserSUPER, KotlinParserWHERE, KotlinParserIF, KotlinParserWHEN, KotlinParserTRY, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserTHROW, KotlinParserRETURN, KotlinParserCONTINUE, KotlinParserBREAK, KotlinParserIS, KotlinParserIN, KotlinParserNOT_IS, KotlinParserNOT_IN, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserQUOTE_OPEN, KotlinParserTRIPLE_QUOTE_OPEN, KotlinParserRealLiteral, KotlinParserLongLiteral, KotlinParserIntegerLiteral, KotlinParserHexLiteral, KotlinParserBinLiteral, KotlinParserBooleanLiteral, KotlinParserNullLiteral, KotlinParserIdentifier, KotlinParserIdentifierAt, KotlinParserCharacterLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2807)
			p.WhenCondition()
		}
		p.SetState(2824)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 432, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(2811)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(2808)
						p.Match(KotlinParserNL)
					}

					p.SetState(2813)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2814)
					p.Match(KotlinParserCOMMA)
				}
				p.SetState(2818)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(2815)
							p.Match(KotlinParserNL)
						}

					}
					p.SetState(2820)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext())
				}
				{
					p.SetState(2821)
					p.WhenCondition()
				}

			}
			p.SetState(2826)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 432, p.GetParserRuleContext())
		}
		p.SetState(2830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2827)
				p.Match(KotlinParserNL)
			}

			p.SetState(2832)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2833)
			p.Match(KotlinParserARROW)
		}
		p.SetState(2837)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2834)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2839)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 434, p.GetParserRuleContext())
		}
		{
			p.SetState(2840)
			p.ControlStructureBody()
		}
		p.SetState(2842)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 435, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2841)
				p.Semi()
			}

		}

	case KotlinParserELSE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2844)
			p.Match(KotlinParserELSE)
		}
		p.SetState(2848)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2845)
				p.Match(KotlinParserNL)
			}

			p.SetState(2850)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2851)
			p.Match(KotlinParserARROW)
		}
		p.SetState(2855)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 437, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2852)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(2857)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 437, p.GetParserRuleContext())
		}
		{
			p.SetState(2858)
			p.ControlStructureBody()
		}
		p.SetState(2860)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2859)
				p.Semi()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWhenConditionContext is an interface to support dynamic dispatch.
type IWhenConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhenConditionContext differentiates from other interfaces.
	IsWhenConditionContext()
}

type WhenConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhenConditionContext() *WhenConditionContext {
	var p = new(WhenConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_whenCondition
	return p
}

func (*WhenConditionContext) IsWhenConditionContext() {}

func NewWhenConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenConditionContext {
	var p = new(WhenConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_whenCondition

	return p
}

func (s *WhenConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenConditionContext) RangeTest() IRangeTestContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeTestContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRangeTestContext)
}

func (s *WhenConditionContext) TypeTest() ITypeTestContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTestContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTestContext)
}

func (s *WhenConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterWhenCondition(s)
	}
}

func (s *WhenConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitWhenCondition(s)
	}
}

func (p *KotlinParser) WhenCondition() (localctx IWhenConditionContext) {
	localctx = NewWhenConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, KotlinParserRULE_whenCondition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2867)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserLPAREN, KotlinParserLSQUARE, KotlinParserLCURL, KotlinParserADD, KotlinParserSUB, KotlinParserINCR, KotlinParserDECR, KotlinParserEXCL_WS, KotlinParserEXCL_NO_WS, KotlinParserCOLONCOLON, KotlinParserAT, KotlinParserRETURN_AT, KotlinParserCONTINUE_AT, KotlinParserBREAK_AT, KotlinParserTHIS_AT, KotlinParserSUPER_AT, KotlinParserIMPORT, KotlinParserFUN, KotlinParserOBJECT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserTHIS, KotlinParserSUPER, KotlinParserWHERE, KotlinParserIF, KotlinParserWHEN, KotlinParserTRY, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserTHROW, KotlinParserRETURN, KotlinParserCONTINUE, KotlinParserBREAK, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserQUOTE_OPEN, KotlinParserTRIPLE_QUOTE_OPEN, KotlinParserRealLiteral, KotlinParserLongLiteral, KotlinParserIntegerLiteral, KotlinParserHexLiteral, KotlinParserBinLiteral, KotlinParserBooleanLiteral, KotlinParserNullLiteral, KotlinParserIdentifier, KotlinParserIdentifierAt, KotlinParserCharacterLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2864)
			p.Expression()
		}

	case KotlinParserIN, KotlinParserNOT_IN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2865)
			p.RangeTest()
		}

	case KotlinParserIS, KotlinParserNOT_IS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2866)
			p.TypeTest()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRangeTestContext is an interface to support dynamic dispatch.
type IRangeTestContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeTestContext differentiates from other interfaces.
	IsRangeTestContext()
}

type RangeTestContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeTestContext() *RangeTestContext {
	var p = new(RangeTestContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_rangeTest
	return p
}

func (*RangeTestContext) IsRangeTestContext() {}

func NewRangeTestContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeTestContext {
	var p = new(RangeTestContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_rangeTest

	return p
}

func (s *RangeTestContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeTestContext) InOperator() IInOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInOperatorContext)
}

func (s *RangeTestContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RangeTestContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *RangeTestContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *RangeTestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeTestContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeTestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterRangeTest(s)
	}
}

func (s *RangeTestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitRangeTest(s)
	}
}

func (p *KotlinParser) RangeTest() (localctx IRangeTestContext) {
	localctx = NewRangeTestContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, KotlinParserRULE_rangeTest)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2869)
		p.InOperator()
	}
	p.SetState(2873)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2870)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2875)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 441, p.GetParserRuleContext())
	}
	{
		p.SetState(2876)
		p.Expression()
	}

	return localctx
}

// ITypeTestContext is an interface to support dynamic dispatch.
type ITypeTestContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTestContext differentiates from other interfaces.
	IsTypeTestContext()
}

type TypeTestContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTestContext() *TypeTestContext {
	var p = new(TypeTestContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_typeTest
	return p
}

func (*TypeTestContext) IsTypeTestContext() {}

func NewTypeTestContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTestContext {
	var p = new(TypeTestContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_typeTest

	return p
}

func (s *TypeTestContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTestContext) IsOperator() IIsOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsOperatorContext)
}

func (s *TypeTestContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeTestContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TypeTestContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TypeTestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTestContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTypeTest(s)
	}
}

func (s *TypeTestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTypeTest(s)
	}
}

func (p *KotlinParser) TypeTest() (localctx ITypeTestContext) {
	localctx = NewTypeTestContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, KotlinParserRULE_typeTest)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2878)
		p.IsOperator()
	}
	p.SetState(2882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2879)
			p.Match(KotlinParserNL)
		}

		p.SetState(2884)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2885)
		p.Type_()
	}

	return localctx
}

// ITryExpressionContext is an interface to support dynamic dispatch.
type ITryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryExpressionContext differentiates from other interfaces.
	IsTryExpressionContext()
}

type TryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryExpressionContext() *TryExpressionContext {
	var p = new(TryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_tryExpression
	return p
}

func (*TryExpressionContext) IsTryExpressionContext() {}

func NewTryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryExpressionContext {
	var p = new(TryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_tryExpression

	return p
}

func (s *TryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TryExpressionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryExpressionContext) FinallyBlock() IFinallyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFinallyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFinallyBlockContext)
}

func (s *TryExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *TryExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *TryExpressionContext) AllCatchBlock() []ICatchBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICatchBlockContext)(nil)).Elem())
	var tst = make([]ICatchBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICatchBlockContext)
		}
	}

	return tst
}

func (s *TryExpressionContext) CatchBlock(i int) ICatchBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICatchBlockContext)
}

func (s *TryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterTryExpression(s)
	}
}

func (s *TryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitTryExpression(s)
	}
}

func (p *KotlinParser) TryExpression() (localctx ITryExpressionContext) {
	localctx = NewTryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, KotlinParserRULE_tryExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2887)
		p.Match(KotlinParserTRY)
	}
	p.SetState(2891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2888)
			p.Match(KotlinParserNL)
		}

		p.SetState(2893)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2894)
		p.Block()
	}
	p.SetState(2922)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 449, p.GetParserRuleContext()) {
	case 1:
		p.SetState(2902)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(2898)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == KotlinParserNL {
					{
						p.SetState(2895)
						p.Match(KotlinParserNL)
					}

					p.SetState(2900)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2901)
					p.CatchBlock()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2904)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 445, p.GetParserRuleContext())
		}
		p.SetState(2913)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 447, p.GetParserRuleContext()) == 1 {
			p.SetState(2909)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(2906)
					p.Match(KotlinParserNL)
				}

				p.SetState(2911)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2912)
				p.FinallyBlock()
			}

		}

	case 2:
		p.SetState(2918)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2915)
				p.Match(KotlinParserNL)
			}

			p.SetState(2920)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2921)
			p.FinallyBlock()
		}

	}

	return localctx
}

// ICatchBlockContext is an interface to support dynamic dispatch.
type ICatchBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchBlockContext differentiates from other interfaces.
	IsCatchBlockContext()
}

type CatchBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchBlockContext() *CatchBlockContext {
	var p = new(CatchBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_catchBlock
	return p
}

func (*CatchBlockContext) IsCatchBlockContext() {}

func NewCatchBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchBlockContext {
	var p = new(CatchBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_catchBlock

	return p
}

func (s *CatchBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchBlockContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *CatchBlockContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *CatchBlockContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CatchBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *CatchBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *CatchBlockContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *CatchBlockContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *CatchBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterCatchBlock(s)
	}
}

func (s *CatchBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitCatchBlock(s)
	}
}

func (p *KotlinParser) CatchBlock() (localctx ICatchBlockContext) {
	localctx = NewCatchBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, KotlinParserRULE_catchBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2924)
		p.Match(KotlinParserCATCH)
	}
	p.SetState(2928)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2925)
			p.Match(KotlinParserNL)
		}

		p.SetState(2930)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2931)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(2935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserAT || (((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99)))) != 0) {
		{
			p.SetState(2932)
			p.Annotation()
		}

		p.SetState(2937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2938)
		p.SimpleIdentifier()
	}
	{
		p.SetState(2939)
		p.Match(KotlinParserCOLON)
	}
	{
		p.SetState(2940)
		p.UserType()
	}
	{
		p.SetState(2941)
		p.Match(KotlinParserRPAREN)
	}
	p.SetState(2945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2942)
			p.Match(KotlinParserNL)
		}

		p.SetState(2947)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2948)
		p.Block()
	}

	return localctx
}

// IFinallyBlockContext is an interface to support dynamic dispatch.
type IFinallyBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFinallyBlockContext differentiates from other interfaces.
	IsFinallyBlockContext()
}

type FinallyBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFinallyBlockContext() *FinallyBlockContext {
	var p = new(FinallyBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_finallyBlock
	return p
}

func (*FinallyBlockContext) IsFinallyBlockContext() {}

func NewFinallyBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FinallyBlockContext {
	var p = new(FinallyBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_finallyBlock

	return p
}

func (s *FinallyBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *FinallyBlockContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FinallyBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *FinallyBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *FinallyBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FinallyBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FinallyBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFinallyBlock(s)
	}
}

func (s *FinallyBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFinallyBlock(s)
	}
}

func (p *KotlinParser) FinallyBlock() (localctx IFinallyBlockContext) {
	localctx = NewFinallyBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, KotlinParserRULE_finallyBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2950)
		p.Match(KotlinParserFINALLY)
	}
	p.SetState(2954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2951)
			p.Match(KotlinParserNL)
		}

		p.SetState(2956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2957)
		p.Block()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) ForStatement() IForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *LoopStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *LoopStatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLoopStatement(s)
	}
}

func (s *LoopStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLoopStatement(s)
	}
}

func (p *KotlinParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, KotlinParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2962)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2959)
			p.ForStatement()
		}

	case KotlinParserWHILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2960)
			p.WhileStatement()
		}

	case KotlinParserDO:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2961)
			p.DoWhileStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *ForStatementContext) MultiVariableDeclaration() IMultiVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiVariableDeclarationContext)
}

func (s *ForStatementContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ForStatementContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ForStatementContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *ForStatementContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ForStatementContext) ControlStructureBody() IControlStructureBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlStructureBodyContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (p *KotlinParser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, KotlinParserRULE_forStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2964)
		p.Match(KotlinParserFOR)
	}
	p.SetState(2968)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(2965)
			p.Match(KotlinParserNL)
		}

		p.SetState(2970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2971)
		p.Match(KotlinParserLPAREN)
	}
	p.SetState(2975)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 456, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2972)
				p.Annotation()
			}

		}
		p.SetState(2977)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 456, p.GetParserRuleContext())
	}
	p.SetState(2980)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserAT, KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(2978)
			p.VariableDeclaration()
		}

	case KotlinParserLPAREN:
		{
			p.SetState(2979)
			p.MultiVariableDeclaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2982)
		p.Match(KotlinParserIN)
	}
	{
		p.SetState(2983)
		p.Expression()
	}
	{
		p.SetState(2984)
		p.Match(KotlinParserRPAREN)
	}
	p.SetState(2988)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 458, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2985)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(2990)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 458, p.GetParserRuleContext())
	}
	p.SetState(2992)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 459, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2991)
			p.ControlStructureBody()
		}

	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) ControlStructureBody() IControlStructureBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlStructureBodyContext)
}

func (s *WhileStatementContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *WhileStatementContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (p *KotlinParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, KotlinParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3030)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 464, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2994)
			p.Match(KotlinParserWHILE)
		}
		p.SetState(2998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(2995)
				p.Match(KotlinParserNL)
			}

			p.SetState(3000)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3001)
			p.Match(KotlinParserLPAREN)
		}
		{
			p.SetState(3002)
			p.Expression()
		}
		{
			p.SetState(3003)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(3007)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3004)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(3009)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext())
		}
		{
			p.SetState(3010)
			p.ControlStructureBody()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3012)
			p.Match(KotlinParserWHILE)
		}
		p.SetState(3016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3013)
				p.Match(KotlinParserNL)
			}

			p.SetState(3018)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3019)
			p.Match(KotlinParserLPAREN)
		}
		{
			p.SetState(3020)
			p.Expression()
		}
		{
			p.SetState(3021)
			p.Match(KotlinParserRPAREN)
		}
		p.SetState(3025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3022)
				p.Match(KotlinParserNL)
			}

			p.SetState(3027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3028)
			p.Match(KotlinParserSEMICOLON)
		}

	}

	return localctx
}

// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoWhileStatementContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *DoWhileStatementContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *DoWhileStatementContext) ControlStructureBody() IControlStructureBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlStructureBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlStructureBodyContext)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoWhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterDoWhileStatement(s)
	}
}

func (s *DoWhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitDoWhileStatement(s)
	}
}

func (p *KotlinParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, KotlinParserRULE_doWhileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3032)
		p.Match(KotlinParserDO)
	}
	p.SetState(3036)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3033)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(3038)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext())
	}
	p.SetState(3040)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 466, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3039)
			p.ControlStructureBody()
		}

	}
	p.SetState(3045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(3042)
			p.Match(KotlinParserNL)
		}

		p.SetState(3047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3048)
		p.Match(KotlinParserWHILE)
	}
	p.SetState(3052)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(3049)
			p.Match(KotlinParserNL)
		}

		p.SetState(3054)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3055)
		p.Match(KotlinParserLPAREN)
	}
	{
		p.SetState(3056)
		p.Expression()
	}
	{
		p.SetState(3057)
		p.Match(KotlinParserRPAREN)
	}

	return localctx
}

// IJumpExpressionContext is an interface to support dynamic dispatch.
type IJumpExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJumpExpressionContext differentiates from other interfaces.
	IsJumpExpressionContext()
}

type JumpExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJumpExpressionContext() *JumpExpressionContext {
	var p = new(JumpExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_jumpExpression
	return p
}

func (*JumpExpressionContext) IsJumpExpressionContext() {}

func NewJumpExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JumpExpressionContext {
	var p = new(JumpExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_jumpExpression

	return p
}

func (s *JumpExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *JumpExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JumpExpressionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *JumpExpressionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *JumpExpressionContext) RETURN_AT() antlr.TerminalNode {
	return s.GetToken(KotlinParserRETURN_AT, 0)
}

func (s *JumpExpressionContext) CONTINUE_AT() antlr.TerminalNode {
	return s.GetToken(KotlinParserCONTINUE_AT, 0)
}

func (s *JumpExpressionContext) BREAK_AT() antlr.TerminalNode {
	return s.GetToken(KotlinParserBREAK_AT, 0)
}

func (s *JumpExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JumpExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JumpExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterJumpExpression(s)
	}
}

func (s *JumpExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitJumpExpression(s)
	}
}

func (p *KotlinParser) JumpExpression() (localctx IJumpExpressionContext) {
	localctx = NewJumpExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, KotlinParserRULE_jumpExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserTHROW:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3059)
			p.Match(KotlinParserTHROW)
		}
		p.SetState(3063)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3060)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(3065)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 469, p.GetParserRuleContext())
		}
		{
			p.SetState(3066)
			p.Expression()
		}

	case KotlinParserRETURN_AT, KotlinParserRETURN:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3067)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KotlinParserRETURN_AT || _la == KotlinParserRETURN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(3069)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3068)
				p.Expression()
			}

		}

	case KotlinParserCONTINUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3071)
			p.Match(KotlinParserCONTINUE)
		}

	case KotlinParserCONTINUE_AT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3072)
			p.Match(KotlinParserCONTINUE_AT)
		}

	case KotlinParserBREAK:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3073)
			p.Match(KotlinParserBREAK)
		}

	case KotlinParserBREAK_AT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3074)
			p.Match(KotlinParserBREAK_AT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallableReferenceContext is an interface to support dynamic dispatch.
type ICallableReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallableReferenceContext differentiates from other interfaces.
	IsCallableReferenceContext()
}

type CallableReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallableReferenceContext() *CallableReferenceContext {
	var p = new(CallableReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_callableReference
	return p
}

func (*CallableReferenceContext) IsCallableReferenceContext() {}

func NewCallableReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallableReferenceContext {
	var p = new(CallableReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_callableReference

	return p
}

func (s *CallableReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *CallableReferenceContext) SimpleIdentifier() ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *CallableReferenceContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *CallableReferenceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *CallableReferenceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *CallableReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallableReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallableReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterCallableReference(s)
	}
}

func (s *CallableReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitCallableReference(s)
	}
}

func (p *KotlinParser) CallableReference() (localctx ICallableReferenceContext) {
	localctx = NewCallableReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, KotlinParserRULE_callableReference)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == KotlinParserLPAREN || _la == KotlinParserAT || (((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(KotlinParserIMPORT-60))|(1<<(KotlinParserCONSTRUCTOR-60))|(1<<(KotlinParserBY-60))|(1<<(KotlinParserCOMPANION-60))|(1<<(KotlinParserINIT-60))|(1<<(KotlinParserWHERE-60))|(1<<(KotlinParserCATCH-60))|(1<<(KotlinParserFINALLY-60)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(KotlinParserOUT-94))|(1<<(KotlinParserGETTER-94))|(1<<(KotlinParserSETTER-94))|(1<<(KotlinParserDYNAMIC-94))|(1<<(KotlinParserAT_FIELD-94))|(1<<(KotlinParserAT_PROPERTY-94))|(1<<(KotlinParserAT_GET-94))|(1<<(KotlinParserAT_SET-94))|(1<<(KotlinParserAT_RECEIVER-94))|(1<<(KotlinParserAT_PARAM-94))|(1<<(KotlinParserAT_SETPARAM-94))|(1<<(KotlinParserAT_DELEGATE-94))|(1<<(KotlinParserPUBLIC-94))|(1<<(KotlinParserPRIVATE-94))|(1<<(KotlinParserPROTECTED-94))|(1<<(KotlinParserINTERNAL-94))|(1<<(KotlinParserENUM-94))|(1<<(KotlinParserSEALED-94))|(1<<(KotlinParserANNOTATION-94))|(1<<(KotlinParserDATA-94))|(1<<(KotlinParserINNER-94))|(1<<(KotlinParserTAILREC-94))|(1<<(KotlinParserOPERATOR-94))|(1<<(KotlinParserINLINE-94))|(1<<(KotlinParserINFIX-94))|(1<<(KotlinParserEXTERNAL-94))|(1<<(KotlinParserSUSPEND-94))|(1<<(KotlinParserOVERRIDE-94))|(1<<(KotlinParserABSTRACT-94))|(1<<(KotlinParserFINAL-94))|(1<<(KotlinParserOPEN-94)))) != 0) || (((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(KotlinParserCONST-126))|(1<<(KotlinParserLATEINIT-126))|(1<<(KotlinParserVARARG-126))|(1<<(KotlinParserNOINLINE-126))|(1<<(KotlinParserCROSSINLINE-126))|(1<<(KotlinParserREIFIED-126))|(1<<(KotlinParserEXPECT-126))|(1<<(KotlinParserACTUAL-126))|(1<<(KotlinParserIdentifier-126)))) != 0) {
		{
			p.SetState(3077)
			p.ReceiverType()
		}

	}
	p.SetState(3083)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(3080)
			p.Match(KotlinParserNL)
		}

		p.SetState(3085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3086)
		p.Match(KotlinParserCOLONCOLON)
	}
	p.SetState(3090)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == KotlinParserNL {
		{
			p.SetState(3087)
			p.Match(KotlinParserNL)
		}

		p.SetState(3092)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3095)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserIMPORT, KotlinParserCONSTRUCTOR, KotlinParserBY, KotlinParserCOMPANION, KotlinParserINIT, KotlinParserWHERE, KotlinParserCATCH, KotlinParserFINALLY, KotlinParserOUT, KotlinParserGETTER, KotlinParserSETTER, KotlinParserDYNAMIC, KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserREIFIED, KotlinParserEXPECT, KotlinParserACTUAL, KotlinParserIdentifier:
		{
			p.SetState(3093)
			p.SimpleIdentifier()
		}

	case KotlinParserCLASS:
		{
			p.SetState(3094)
			p.Match(KotlinParserCLASS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssignmentAndOperatorContext is an interface to support dynamic dispatch.
type IAssignmentAndOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentAndOperatorContext differentiates from other interfaces.
	IsAssignmentAndOperatorContext()
}

type AssignmentAndOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentAndOperatorContext() *AssignmentAndOperatorContext {
	var p = new(AssignmentAndOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_assignmentAndOperator
	return p
}

func (*AssignmentAndOperatorContext) IsAssignmentAndOperatorContext() {}

func NewAssignmentAndOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentAndOperatorContext {
	var p = new(AssignmentAndOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_assignmentAndOperator

	return p
}

func (s *AssignmentAndOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *AssignmentAndOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentAndOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentAndOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAssignmentAndOperator(s)
	}
}

func (s *AssignmentAndOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAssignmentAndOperator(s)
	}
}

func (p *KotlinParser) AssignmentAndOperator() (localctx IAssignmentAndOperatorContext) {
	localctx = NewAssignmentAndOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, KotlinParserRULE_assignmentAndOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3097)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-29)&-(0x1f+1)) == 0 && ((1<<uint((_la-29)))&((1<<(KotlinParserADD_ASSIGNMENT-29))|(1<<(KotlinParserSUB_ASSIGNMENT-29))|(1<<(KotlinParserMULT_ASSIGNMENT-29))|(1<<(KotlinParserDIV_ASSIGNMENT-29))|(1<<(KotlinParserMOD_ASSIGNMENT-29)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IEqualityOperatorContext is an interface to support dynamic dispatch.
type IEqualityOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityOperatorContext differentiates from other interfaces.
	IsEqualityOperatorContext()
}

type EqualityOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityOperatorContext() *EqualityOperatorContext {
	var p = new(EqualityOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_equalityOperator
	return p
}

func (*EqualityOperatorContext) IsEqualityOperatorContext() {}

func NewEqualityOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityOperatorContext {
	var p = new(EqualityOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_equalityOperator

	return p
}

func (s *EqualityOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *EqualityOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterEqualityOperator(s)
	}
}

func (s *EqualityOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitEqualityOperator(s)
	}
}

func (p *KotlinParser) EqualityOperator() (localctx IEqualityOperatorContext) {
	localctx = NewEqualityOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, KotlinParserRULE_equalityOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3099)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(KotlinParserEXCL_EQ-48))|(1<<(KotlinParserEXCL_EQEQ-48))|(1<<(KotlinParserEQEQ-48))|(1<<(KotlinParserEQEQEQ-48)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitComparisonOperator(s)
	}
}

func (p *KotlinParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, KotlinParserRULE_comparisonOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3101)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(KotlinParserLANGLE-44))|(1<<(KotlinParserRANGLE-44))|(1<<(KotlinParserLE-44))|(1<<(KotlinParserGE-44)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IInOperatorContext is an interface to support dynamic dispatch.
type IInOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInOperatorContext differentiates from other interfaces.
	IsInOperatorContext()
}

type InOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInOperatorContext() *InOperatorContext {
	var p = new(InOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_inOperator
	return p
}

func (*InOperatorContext) IsInOperatorContext() {}

func NewInOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InOperatorContext {
	var p = new(InOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_inOperator

	return p
}

func (s *InOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *InOperatorContext) NOT_IN() antlr.TerminalNode {
	return s.GetToken(KotlinParserNOT_IN, 0)
}

func (s *InOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterInOperator(s)
	}
}

func (s *InOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitInOperator(s)
	}
}

func (p *KotlinParser) InOperator() (localctx IInOperatorContext) {
	localctx = NewInOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, KotlinParserRULE_inOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3103)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserIN || _la == KotlinParserNOT_IN) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IIsOperatorContext is an interface to support dynamic dispatch.
type IIsOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsOperatorContext differentiates from other interfaces.
	IsIsOperatorContext()
}

type IsOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsOperatorContext() *IsOperatorContext {
	var p = new(IsOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_isOperator
	return p
}

func (*IsOperatorContext) IsIsOperatorContext() {}

func NewIsOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsOperatorContext {
	var p = new(IsOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_isOperator

	return p
}

func (s *IsOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *IsOperatorContext) NOT_IS() antlr.TerminalNode {
	return s.GetToken(KotlinParserNOT_IS, 0)
}

func (s *IsOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IsOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterIsOperator(s)
	}
}

func (s *IsOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitIsOperator(s)
	}
}

func (p *KotlinParser) IsOperator() (localctx IIsOperatorContext) {
	localctx = NewIsOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, KotlinParserRULE_isOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3105)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserIS || _la == KotlinParserNOT_IS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IAdditiveOperatorContext is an interface to support dynamic dispatch.
type IAdditiveOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveOperatorContext differentiates from other interfaces.
	IsAdditiveOperatorContext()
}

type AdditiveOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveOperatorContext() *AdditiveOperatorContext {
	var p = new(AdditiveOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_additiveOperator
	return p
}

func (*AdditiveOperatorContext) IsAdditiveOperatorContext() {}

func NewAdditiveOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveOperatorContext {
	var p = new(AdditiveOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_additiveOperator

	return p
}

func (s *AdditiveOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *AdditiveOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAdditiveOperator(s)
	}
}

func (s *AdditiveOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAdditiveOperator(s)
	}
}

func (p *KotlinParser) AdditiveOperator() (localctx IAdditiveOperatorContext) {
	localctx = NewAdditiveOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, KotlinParserRULE_additiveOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3107)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserADD || _la == KotlinParserSUB) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IMultiplicativeOperatorContext is an interface to support dynamic dispatch.
type IMultiplicativeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeOperatorContext differentiates from other interfaces.
	IsMultiplicativeOperatorContext()
}

type MultiplicativeOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeOperatorContext() *MultiplicativeOperatorContext {
	var p = new(MultiplicativeOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiplicativeOperator
	return p
}

func (*MultiplicativeOperatorContext) IsMultiplicativeOperatorContext() {}

func NewMultiplicativeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeOperatorContext {
	var p = new(MultiplicativeOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiplicativeOperator

	return p
}

func (s *MultiplicativeOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *MultiplicativeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiplicativeOperator(s)
	}
}

func (s *MultiplicativeOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiplicativeOperator(s)
	}
}

func (p *KotlinParser) MultiplicativeOperator() (localctx IMultiplicativeOperatorContext) {
	localctx = NewMultiplicativeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, KotlinParserRULE_multiplicativeOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3109)
	_la = p.GetTokenStream().LA(1)

	if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<KotlinParserMULT)|(1<<KotlinParserMOD)|(1<<KotlinParserDIV))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IAsOperatorContext is an interface to support dynamic dispatch.
type IAsOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsOperatorContext differentiates from other interfaces.
	IsAsOperatorContext()
}

type AsOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsOperatorContext() *AsOperatorContext {
	var p = new(AsOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_asOperator
	return p
}

func (*AsOperatorContext) IsAsOperatorContext() {}

func NewAsOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsOperatorContext {
	var p = new(AsOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_asOperator

	return p
}

func (s *AsOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *AsOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAsOperator(s)
	}
}

func (s *AsOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAsOperator(s)
	}
}

func (p *KotlinParser) AsOperator() (localctx IAsOperatorContext) {
	localctx = NewAsOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, KotlinParserRULE_asOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3111)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserAS_SAFE || _la == KotlinParserAS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IPrefixUnaryOperatorContext is an interface to support dynamic dispatch.
type IPrefixUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixUnaryOperatorContext differentiates from other interfaces.
	IsPrefixUnaryOperatorContext()
}

type PrefixUnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixUnaryOperatorContext() *PrefixUnaryOperatorContext {
	var p = new(PrefixUnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_prefixUnaryOperator
	return p
}

func (*PrefixUnaryOperatorContext) IsPrefixUnaryOperatorContext() {}

func NewPrefixUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixUnaryOperatorContext {
	var p = new(PrefixUnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_prefixUnaryOperator

	return p
}

func (s *PrefixUnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixUnaryOperatorContext) Excl() IExclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclContext)
}

func (s *PrefixUnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixUnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixUnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPrefixUnaryOperator(s)
	}
}

func (s *PrefixUnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPrefixUnaryOperator(s)
	}
}

func (p *KotlinParser) PrefixUnaryOperator() (localctx IPrefixUnaryOperatorContext) {
	localctx = NewPrefixUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, KotlinParserRULE_prefixUnaryOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3118)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserINCR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3113)
			p.Match(KotlinParserINCR)
		}

	case KotlinParserDECR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3114)
			p.Match(KotlinParserDECR)
		}

	case KotlinParserSUB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3115)
			p.Match(KotlinParserSUB)
		}

	case KotlinParserADD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3116)
			p.Match(KotlinParserADD)
		}

	case KotlinParserEXCL_WS, KotlinParserEXCL_NO_WS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3117)
			p.Excl()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPostfixUnaryOperatorContext is an interface to support dynamic dispatch.
type IPostfixUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixUnaryOperatorContext differentiates from other interfaces.
	IsPostfixUnaryOperatorContext()
}

type PostfixUnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixUnaryOperatorContext() *PostfixUnaryOperatorContext {
	var p = new(PostfixUnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_postfixUnaryOperator
	return p
}

func (*PostfixUnaryOperatorContext) IsPostfixUnaryOperatorContext() {}

func NewPostfixUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixUnaryOperatorContext {
	var p = new(PostfixUnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_postfixUnaryOperator

	return p
}

func (s *PostfixUnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixUnaryOperatorContext) EXCL_NO_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserEXCL_NO_WS, 0)
}

func (s *PostfixUnaryOperatorContext) Excl() IExclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclContext)
}

func (s *PostfixUnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixUnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixUnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPostfixUnaryOperator(s)
	}
}

func (s *PostfixUnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPostfixUnaryOperator(s)
	}
}

func (p *KotlinParser) PostfixUnaryOperator() (localctx IPostfixUnaryOperatorContext) {
	localctx = NewPostfixUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, KotlinParserRULE_postfixUnaryOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3124)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserINCR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3120)
			p.Match(KotlinParserINCR)
		}

	case KotlinParserDECR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3121)
			p.Match(KotlinParserDECR)
		}

	case KotlinParserEXCL_NO_WS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3122)
			p.Match(KotlinParserEXCL_NO_WS)
		}
		{
			p.SetState(3123)
			p.Excl()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMemberAccessOperatorContext is an interface to support dynamic dispatch.
type IMemberAccessOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberAccessOperatorContext differentiates from other interfaces.
	IsMemberAccessOperatorContext()
}

type MemberAccessOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberAccessOperatorContext() *MemberAccessOperatorContext {
	var p = new(MemberAccessOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_memberAccessOperator
	return p
}

func (*MemberAccessOperatorContext) IsMemberAccessOperatorContext() {}

func NewMemberAccessOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberAccessOperatorContext {
	var p = new(MemberAccessOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_memberAccessOperator

	return p
}

func (s *MemberAccessOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberAccessOperatorContext) SafeNav() ISafeNavContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISafeNavContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISafeNavContext)
}

func (s *MemberAccessOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberAccessOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberAccessOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMemberAccessOperator(s)
	}
}

func (s *MemberAccessOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMemberAccessOperator(s)
	}
}

func (p *KotlinParser) MemberAccessOperator() (localctx IMemberAccessOperatorContext) {
	localctx = NewMemberAccessOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, KotlinParserRULE_memberAccessOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3129)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3126)
			p.Match(KotlinParserDOT)
		}

	case KotlinParserQUEST_NO_WS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3127)
			p.SafeNav()
		}

	case KotlinParserCOLONCOLON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3128)
			p.Match(KotlinParserCOLONCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModifiersContext is an interface to support dynamic dispatch.
type IModifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifiersContext differentiates from other interfaces.
	IsModifiersContext()
}

type ModifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifiersContext() *ModifiersContext {
	var p = new(ModifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_modifiers
	return p
}

func (*ModifiersContext) IsModifiersContext() {}

func NewModifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifiersContext {
	var p = new(ModifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_modifiers

	return p
}

func (s *ModifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifiersContext) AllAnnotation() []IAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationContext)(nil)).Elem())
	var tst = make([]IAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationContext)
		}
	}

	return tst
}

func (s *ModifiersContext) Annotation(i int) IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *ModifiersContext) AllModifier() []IModifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierContext)(nil)).Elem())
	var tst = make([]IModifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierContext)
		}
	}

	return tst
}

func (s *ModifiersContext) Modifier(i int) IModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierContext)
}

func (s *ModifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterModifiers(s)
	}
}

func (s *ModifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitModifiers(s)
	}
}

func (p *KotlinParser) Modifiers() (localctx IModifiersContext) {
	localctx = NewModifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, KotlinParserRULE_modifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3133)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(3133)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case KotlinParserAT, KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
				{
					p.SetState(3131)
					p.Annotation()
				}

			case KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL, KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER, KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND, KotlinParserOVERRIDE, KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN, KotlinParserCONST, KotlinParserLATEINIT, KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE, KotlinParserEXPECT, KotlinParserACTUAL:
				{
					p.SetState(3132)
					p.Modifier()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3135)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 480, p.GetParserRuleContext())
	}

	return localctx
}

// IModifierContext is an interface to support dynamic dispatch.
type IModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierContext differentiates from other interfaces.
	IsModifierContext()
}

type ModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierContext() *ModifierContext {
	var p = new(ModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_modifier
	return p
}

func (*ModifierContext) IsModifierContext() {}

func NewModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierContext {
	var p = new(ModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_modifier

	return p
}

func (s *ModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierContext) ClassModifier() IClassModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClassModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClassModifierContext)
}

func (s *ModifierContext) MemberModifier() IMemberModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMemberModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMemberModifierContext)
}

func (s *ModifierContext) VisibilityModifier() IVisibilityModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVisibilityModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVisibilityModifierContext)
}

func (s *ModifierContext) FunctionModifier() IFunctionModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionModifierContext)
}

func (s *ModifierContext) PropertyModifier() IPropertyModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPropertyModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPropertyModifierContext)
}

func (s *ModifierContext) InheritanceModifier() IInheritanceModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInheritanceModifierContext)
}

func (s *ModifierContext) ParameterModifier() IParameterModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterModifierContext)
}

func (s *ModifierContext) PlatformModifier() IPlatformModifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlatformModifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlatformModifierContext)
}

func (s *ModifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ModifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterModifier(s)
	}
}

func (s *ModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitModifier(s)
	}
}

func (p *KotlinParser) Modifier() (localctx IModifierContext) {
	localctx = NewModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, KotlinParserRULE_modifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3145)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserENUM, KotlinParserSEALED, KotlinParserANNOTATION, KotlinParserDATA, KotlinParserINNER:
		{
			p.SetState(3137)
			p.ClassModifier()
		}

	case KotlinParserOVERRIDE, KotlinParserLATEINIT:
		{
			p.SetState(3138)
			p.MemberModifier()
		}

	case KotlinParserPUBLIC, KotlinParserPRIVATE, KotlinParserPROTECTED, KotlinParserINTERNAL:
		{
			p.SetState(3139)
			p.VisibilityModifier()
		}

	case KotlinParserTAILREC, KotlinParserOPERATOR, KotlinParserINLINE, KotlinParserINFIX, KotlinParserEXTERNAL, KotlinParserSUSPEND:
		{
			p.SetState(3140)
			p.FunctionModifier()
		}

	case KotlinParserCONST:
		{
			p.SetState(3141)
			p.PropertyModifier()
		}

	case KotlinParserABSTRACT, KotlinParserFINAL, KotlinParserOPEN:
		{
			p.SetState(3142)
			p.InheritanceModifier()
		}

	case KotlinParserVARARG, KotlinParserNOINLINE, KotlinParserCROSSINLINE:
		{
			p.SetState(3143)
			p.ParameterModifier()
		}

	case KotlinParserEXPECT, KotlinParserACTUAL:
		{
			p.SetState(3144)
			p.PlatformModifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3150)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3147)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(3152)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext())
	}

	return localctx
}

// IClassModifierContext is an interface to support dynamic dispatch.
type IClassModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClassModifierContext differentiates from other interfaces.
	IsClassModifierContext()
}

type ClassModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassModifierContext() *ClassModifierContext {
	var p = new(ClassModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_classModifier
	return p
}

func (*ClassModifierContext) IsClassModifierContext() {}

func NewClassModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassModifierContext {
	var p = new(ClassModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_classModifier

	return p
}

func (s *ClassModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *ClassModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterClassModifier(s)
	}
}

func (s *ClassModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitClassModifier(s)
	}
}

func (p *KotlinParser) ClassModifier() (localctx IClassModifierContext) {
	localctx = NewClassModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, KotlinParserRULE_classModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3153)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-111)&-(0x1f+1)) == 0 && ((1<<uint((_la-111)))&((1<<(KotlinParserENUM-111))|(1<<(KotlinParserSEALED-111))|(1<<(KotlinParserANNOTATION-111))|(1<<(KotlinParserDATA-111))|(1<<(KotlinParserINNER-111)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IMemberModifierContext is an interface to support dynamic dispatch.
type IMemberModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMemberModifierContext differentiates from other interfaces.
	IsMemberModifierContext()
}

type MemberModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberModifierContext() *MemberModifierContext {
	var p = new(MemberModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_memberModifier
	return p
}

func (*MemberModifierContext) IsMemberModifierContext() {}

func NewMemberModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberModifierContext {
	var p = new(MemberModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_memberModifier

	return p
}

func (s *MemberModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *MemberModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMemberModifier(s)
	}
}

func (s *MemberModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMemberModifier(s)
	}
}

func (p *KotlinParser) MemberModifier() (localctx IMemberModifierContext) {
	localctx = NewMemberModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, KotlinParserRULE_memberModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3155)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserOVERRIDE || _la == KotlinParserLATEINIT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IVisibilityModifierContext is an interface to support dynamic dispatch.
type IVisibilityModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVisibilityModifierContext differentiates from other interfaces.
	IsVisibilityModifierContext()
}

type VisibilityModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVisibilityModifierContext() *VisibilityModifierContext {
	var p = new(VisibilityModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_visibilityModifier
	return p
}

func (*VisibilityModifierContext) IsVisibilityModifierContext() {}

func NewVisibilityModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VisibilityModifierContext {
	var p = new(VisibilityModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_visibilityModifier

	return p
}

func (s *VisibilityModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *VisibilityModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VisibilityModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VisibilityModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterVisibilityModifier(s)
	}
}

func (s *VisibilityModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitVisibilityModifier(s)
	}
}

func (p *KotlinParser) VisibilityModifier() (localctx IVisibilityModifierContext) {
	localctx = NewVisibilityModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, KotlinParserRULE_visibilityModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3157)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(KotlinParserPUBLIC-107))|(1<<(KotlinParserPRIVATE-107))|(1<<(KotlinParserPROTECTED-107))|(1<<(KotlinParserINTERNAL-107)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IVarianceModifierContext is an interface to support dynamic dispatch.
type IVarianceModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarianceModifierContext differentiates from other interfaces.
	IsVarianceModifierContext()
}

type VarianceModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarianceModifierContext() *VarianceModifierContext {
	var p = new(VarianceModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_varianceModifier
	return p
}

func (*VarianceModifierContext) IsVarianceModifierContext() {}

func NewVarianceModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarianceModifierContext {
	var p = new(VarianceModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_varianceModifier

	return p
}

func (s *VarianceModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *VarianceModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarianceModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarianceModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterVarianceModifier(s)
	}
}

func (s *VarianceModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitVarianceModifier(s)
	}
}

func (p *KotlinParser) VarianceModifier() (localctx IVarianceModifierContext) {
	localctx = NewVarianceModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, KotlinParserRULE_varianceModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3159)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserIN || _la == KotlinParserOUT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFunctionModifierContext is an interface to support dynamic dispatch.
type IFunctionModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionModifierContext differentiates from other interfaces.
	IsFunctionModifierContext()
}

type FunctionModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionModifierContext() *FunctionModifierContext {
	var p = new(FunctionModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_functionModifier
	return p
}

func (*FunctionModifierContext) IsFunctionModifierContext() {}

func NewFunctionModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionModifierContext {
	var p = new(FunctionModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_functionModifier

	return p
}

func (s *FunctionModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *FunctionModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterFunctionModifier(s)
	}
}

func (s *FunctionModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitFunctionModifier(s)
	}
}

func (p *KotlinParser) FunctionModifier() (localctx IFunctionModifierContext) {
	localctx = NewFunctionModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, KotlinParserRULE_functionModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3161)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(KotlinParserTAILREC-116))|(1<<(KotlinParserOPERATOR-116))|(1<<(KotlinParserINLINE-116))|(1<<(KotlinParserINFIX-116))|(1<<(KotlinParserEXTERNAL-116))|(1<<(KotlinParserSUSPEND-116)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IPropertyModifierContext is an interface to support dynamic dispatch.
type IPropertyModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPropertyModifierContext differentiates from other interfaces.
	IsPropertyModifierContext()
}

type PropertyModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPropertyModifierContext() *PropertyModifierContext {
	var p = new(PropertyModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_propertyModifier
	return p
}

func (*PropertyModifierContext) IsPropertyModifierContext() {}

func NewPropertyModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PropertyModifierContext {
	var p = new(PropertyModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_propertyModifier

	return p
}

func (s *PropertyModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *PropertyModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PropertyModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PropertyModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPropertyModifier(s)
	}
}

func (s *PropertyModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPropertyModifier(s)
	}
}

func (p *KotlinParser) PropertyModifier() (localctx IPropertyModifierContext) {
	localctx = NewPropertyModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, KotlinParserRULE_propertyModifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3163)
		p.Match(KotlinParserCONST)
	}

	return localctx
}

// IInheritanceModifierContext is an interface to support dynamic dispatch.
type IInheritanceModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInheritanceModifierContext differentiates from other interfaces.
	IsInheritanceModifierContext()
}

type InheritanceModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInheritanceModifierContext() *InheritanceModifierContext {
	var p = new(InheritanceModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_inheritanceModifier
	return p
}

func (*InheritanceModifierContext) IsInheritanceModifierContext() {}

func NewInheritanceModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceModifierContext {
	var p = new(InheritanceModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_inheritanceModifier

	return p
}

func (s *InheritanceModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *InheritanceModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InheritanceModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterInheritanceModifier(s)
	}
}

func (s *InheritanceModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitInheritanceModifier(s)
	}
}

func (p *KotlinParser) InheritanceModifier() (localctx IInheritanceModifierContext) {
	localctx = NewInheritanceModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, KotlinParserRULE_inheritanceModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3165)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-123)&-(0x1f+1)) == 0 && ((1<<uint((_la-123)))&((1<<(KotlinParserABSTRACT-123))|(1<<(KotlinParserFINAL-123))|(1<<(KotlinParserOPEN-123)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IParameterModifierContext is an interface to support dynamic dispatch.
type IParameterModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterModifierContext differentiates from other interfaces.
	IsParameterModifierContext()
}

type ParameterModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterModifierContext() *ParameterModifierContext {
	var p = new(ParameterModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_parameterModifier
	return p
}

func (*ParameterModifierContext) IsParameterModifierContext() {}

func NewParameterModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterModifierContext {
	var p = new(ParameterModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_parameterModifier

	return p
}

func (s *ParameterModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *ParameterModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterParameterModifier(s)
	}
}

func (s *ParameterModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitParameterModifier(s)
	}
}

func (p *KotlinParser) ParameterModifier() (localctx IParameterModifierContext) {
	localctx = NewParameterModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, KotlinParserRULE_parameterModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3167)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(KotlinParserVARARG-128))|(1<<(KotlinParserNOINLINE-128))|(1<<(KotlinParserCROSSINLINE-128)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IReificationModifierContext is an interface to support dynamic dispatch.
type IReificationModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReificationModifierContext differentiates from other interfaces.
	IsReificationModifierContext()
}

type ReificationModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReificationModifierContext() *ReificationModifierContext {
	var p = new(ReificationModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_reificationModifier
	return p
}

func (*ReificationModifierContext) IsReificationModifierContext() {}

func NewReificationModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReificationModifierContext {
	var p = new(ReificationModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_reificationModifier

	return p
}

func (s *ReificationModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *ReificationModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReificationModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReificationModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterReificationModifier(s)
	}
}

func (s *ReificationModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitReificationModifier(s)
	}
}

func (p *KotlinParser) ReificationModifier() (localctx IReificationModifierContext) {
	localctx = NewReificationModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, KotlinParserRULE_reificationModifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3169)
		p.Match(KotlinParserREIFIED)
	}

	return localctx
}

// IPlatformModifierContext is an interface to support dynamic dispatch.
type IPlatformModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlatformModifierContext differentiates from other interfaces.
	IsPlatformModifierContext()
}

type PlatformModifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlatformModifierContext() *PlatformModifierContext {
	var p = new(PlatformModifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_platformModifier
	return p
}

func (*PlatformModifierContext) IsPlatformModifierContext() {}

func NewPlatformModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlatformModifierContext {
	var p = new(PlatformModifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_platformModifier

	return p
}

func (s *PlatformModifierContext) GetParser() antlr.Parser { return s.parser }
func (s *PlatformModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlatformModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlatformModifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterPlatformModifier(s)
	}
}

func (s *PlatformModifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitPlatformModifier(s)
	}
}

func (p *KotlinParser) PlatformModifier() (localctx IPlatformModifierContext) {
	localctx = NewPlatformModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, KotlinParserRULE_platformModifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3171)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserEXPECT || _la == KotlinParserACTUAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ILabelContext is an interface to support dynamic dispatch.
type ILabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelContext differentiates from other interfaces.
	IsLabelContext()
}

type LabelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelContext() *LabelContext {
	var p = new(LabelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_label
	return p
}

func (*LabelContext) IsLabelContext() {}

func NewLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelContext {
	var p = new(LabelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_label

	return p
}

func (s *LabelContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelContext) IdentifierAt() antlr.TerminalNode {
	return s.GetToken(KotlinParserIdentifierAt, 0)
}

func (s *LabelContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *LabelContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *LabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterLabel(s)
	}
}

func (s *LabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitLabel(s)
	}
}

func (p *KotlinParser) Label() (localctx ILabelContext) {
	localctx = NewLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, KotlinParserRULE_label)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3173)
		p.Match(KotlinParserIdentifierAt)
	}
	p.SetState(3177)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3174)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(3179)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 483, p.GetParserRuleContext())
	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) SingleAnnotation() ISingleAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingleAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingleAnnotationContext)
}

func (s *AnnotationContext) MultiAnnotation() IMultiAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiAnnotationContext)
}

func (s *AnnotationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *AnnotationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnnotation(s)
	}
}

func (s *AnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnnotation(s)
	}
}

func (p *KotlinParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, KotlinParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3182)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3180)
			p.SingleAnnotation()
		}

	case 2:
		{
			p.SetState(3181)
			p.MultiAnnotation()
		}

	}
	p.SetState(3187)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3184)
				p.Match(KotlinParserNL)
			}

		}
		p.SetState(3189)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext())
	}

	return localctx
}

// ISingleAnnotationContext is an interface to support dynamic dispatch.
type ISingleAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingleAnnotationContext differentiates from other interfaces.
	IsSingleAnnotationContext()
}

type SingleAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingleAnnotationContext() *SingleAnnotationContext {
	var p = new(SingleAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_singleAnnotation
	return p
}

func (*SingleAnnotationContext) IsSingleAnnotationContext() {}

func NewSingleAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SingleAnnotationContext {
	var p = new(SingleAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_singleAnnotation

	return p
}

func (s *SingleAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *SingleAnnotationContext) AnnotationUseSiteTarget() IAnnotationUseSiteTargetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationUseSiteTargetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationUseSiteTargetContext)
}

func (s *SingleAnnotationContext) UnescapedAnnotation() IUnescapedAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnescapedAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnescapedAnnotationContext)
}

func (s *SingleAnnotationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SingleAnnotationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SingleAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SingleAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSingleAnnotation(s)
	}
}

func (s *SingleAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSingleAnnotation(s)
	}
}

func (p *KotlinParser) SingleAnnotation() (localctx ISingleAnnotationContext) {
	localctx = NewSingleAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, KotlinParserRULE_singleAnnotation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3208)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3190)
			p.AnnotationUseSiteTarget()
		}
		p.SetState(3194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3191)
				p.Match(KotlinParserNL)
			}

			p.SetState(3196)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3197)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(3201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3198)
				p.Match(KotlinParserNL)
			}

			p.SetState(3203)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3204)
			p.UnescapedAnnotation()
		}

	case KotlinParserAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3206)
			p.Match(KotlinParserAT)
		}
		{
			p.SetState(3207)
			p.UnescapedAnnotation()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMultiAnnotationContext is an interface to support dynamic dispatch.
type IMultiAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiAnnotationContext differentiates from other interfaces.
	IsMultiAnnotationContext()
}

type MultiAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiAnnotationContext() *MultiAnnotationContext {
	var p = new(MultiAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_multiAnnotation
	return p
}

func (*MultiAnnotationContext) IsMultiAnnotationContext() {}

func NewMultiAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiAnnotationContext {
	var p = new(MultiAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_multiAnnotation

	return p
}

func (s *MultiAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiAnnotationContext) AnnotationUseSiteTarget() IAnnotationUseSiteTargetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationUseSiteTargetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationUseSiteTargetContext)
}

func (s *MultiAnnotationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *MultiAnnotationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *MultiAnnotationContext) AllUnescapedAnnotation() []IUnescapedAnnotationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnescapedAnnotationContext)(nil)).Elem())
	var tst = make([]IUnescapedAnnotationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnescapedAnnotationContext)
		}
	}

	return tst
}

func (s *MultiAnnotationContext) UnescapedAnnotation(i int) IUnescapedAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnescapedAnnotationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnescapedAnnotationContext)
}

func (s *MultiAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterMultiAnnotation(s)
	}
}

func (s *MultiAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitMultiAnnotation(s)
	}
}

func (p *KotlinParser) MultiAnnotation() (localctx IMultiAnnotationContext) {
	localctx = NewMultiAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, KotlinParserRULE_multiAnnotation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3241)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserAT_FIELD, KotlinParserAT_PROPERTY, KotlinParserAT_GET, KotlinParserAT_SET, KotlinParserAT_RECEIVER, KotlinParserAT_PARAM, KotlinParserAT_SETPARAM, KotlinParserAT_DELEGATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3210)
			p.AnnotationUseSiteTarget()
		}
		p.SetState(3214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3211)
				p.Match(KotlinParserNL)
			}

			p.SetState(3216)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3217)
			p.Match(KotlinParserCOLON)
		}
		p.SetState(3221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == KotlinParserNL {
			{
				p.SetState(3218)
				p.Match(KotlinParserNL)
			}

			p.SetState(3223)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3224)
			p.Match(KotlinParserLSQUARE)
		}
		p.SetState(3226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(KotlinParserIMPORT-60))|(1<<(KotlinParserCONSTRUCTOR-60))|(1<<(KotlinParserBY-60))|(1<<(KotlinParserCOMPANION-60))|(1<<(KotlinParserINIT-60))|(1<<(KotlinParserWHERE-60))|(1<<(KotlinParserCATCH-60))|(1<<(KotlinParserFINALLY-60)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(KotlinParserOUT-94))|(1<<(KotlinParserGETTER-94))|(1<<(KotlinParserSETTER-94))|(1<<(KotlinParserDYNAMIC-94))|(1<<(KotlinParserPUBLIC-94))|(1<<(KotlinParserPRIVATE-94))|(1<<(KotlinParserPROTECTED-94))|(1<<(KotlinParserINTERNAL-94))|(1<<(KotlinParserENUM-94))|(1<<(KotlinParserSEALED-94))|(1<<(KotlinParserANNOTATION-94))|(1<<(KotlinParserDATA-94))|(1<<(KotlinParserINNER-94))|(1<<(KotlinParserTAILREC-94))|(1<<(KotlinParserOPERATOR-94))|(1<<(KotlinParserINLINE-94))|(1<<(KotlinParserINFIX-94))|(1<<(KotlinParserEXTERNAL-94))|(1<<(KotlinParserSUSPEND-94))|(1<<(KotlinParserOVERRIDE-94))|(1<<(KotlinParserABSTRACT-94))|(1<<(KotlinParserFINAL-94))|(1<<(KotlinParserOPEN-94)))) != 0) || (((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(KotlinParserCONST-126))|(1<<(KotlinParserLATEINIT-126))|(1<<(KotlinParserVARARG-126))|(1<<(KotlinParserNOINLINE-126))|(1<<(KotlinParserCROSSINLINE-126))|(1<<(KotlinParserREIFIED-126))|(1<<(KotlinParserEXPECT-126))|(1<<(KotlinParserACTUAL-126))|(1<<(KotlinParserIdentifier-126)))) != 0) {
			{
				p.SetState(3225)
				p.UnescapedAnnotation()
			}

			p.SetState(3228)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3230)
			p.Match(KotlinParserRSQUARE)
		}

	case KotlinParserAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3232)
			p.Match(KotlinParserAT)
		}
		{
			p.SetState(3233)
			p.Match(KotlinParserLSQUARE)
		}
		p.SetState(3235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(KotlinParserIMPORT-60))|(1<<(KotlinParserCONSTRUCTOR-60))|(1<<(KotlinParserBY-60))|(1<<(KotlinParserCOMPANION-60))|(1<<(KotlinParserINIT-60))|(1<<(KotlinParserWHERE-60))|(1<<(KotlinParserCATCH-60))|(1<<(KotlinParserFINALLY-60)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(KotlinParserOUT-94))|(1<<(KotlinParserGETTER-94))|(1<<(KotlinParserSETTER-94))|(1<<(KotlinParserDYNAMIC-94))|(1<<(KotlinParserPUBLIC-94))|(1<<(KotlinParserPRIVATE-94))|(1<<(KotlinParserPROTECTED-94))|(1<<(KotlinParserINTERNAL-94))|(1<<(KotlinParserENUM-94))|(1<<(KotlinParserSEALED-94))|(1<<(KotlinParserANNOTATION-94))|(1<<(KotlinParserDATA-94))|(1<<(KotlinParserINNER-94))|(1<<(KotlinParserTAILREC-94))|(1<<(KotlinParserOPERATOR-94))|(1<<(KotlinParserINLINE-94))|(1<<(KotlinParserINFIX-94))|(1<<(KotlinParserEXTERNAL-94))|(1<<(KotlinParserSUSPEND-94))|(1<<(KotlinParserOVERRIDE-94))|(1<<(KotlinParserABSTRACT-94))|(1<<(KotlinParserFINAL-94))|(1<<(KotlinParserOPEN-94)))) != 0) || (((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(KotlinParserCONST-126))|(1<<(KotlinParserLATEINIT-126))|(1<<(KotlinParserVARARG-126))|(1<<(KotlinParserNOINLINE-126))|(1<<(KotlinParserCROSSINLINE-126))|(1<<(KotlinParserREIFIED-126))|(1<<(KotlinParserEXPECT-126))|(1<<(KotlinParserACTUAL-126))|(1<<(KotlinParserIdentifier-126)))) != 0) {
			{
				p.SetState(3234)
				p.UnescapedAnnotation()
			}

			p.SetState(3237)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3239)
			p.Match(KotlinParserRSQUARE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnnotationUseSiteTargetContext is an interface to support dynamic dispatch.
type IAnnotationUseSiteTargetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationUseSiteTargetContext differentiates from other interfaces.
	IsAnnotationUseSiteTargetContext()
}

type AnnotationUseSiteTargetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationUseSiteTargetContext() *AnnotationUseSiteTargetContext {
	var p = new(AnnotationUseSiteTargetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_annotationUseSiteTarget
	return p
}

func (*AnnotationUseSiteTargetContext) IsAnnotationUseSiteTargetContext() {}

func NewAnnotationUseSiteTargetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationUseSiteTargetContext {
	var p = new(AnnotationUseSiteTargetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_annotationUseSiteTarget

	return p
}

func (s *AnnotationUseSiteTargetContext) GetParser() antlr.Parser { return s.parser }
func (s *AnnotationUseSiteTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationUseSiteTargetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationUseSiteTargetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterAnnotationUseSiteTarget(s)
	}
}

func (s *AnnotationUseSiteTargetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitAnnotationUseSiteTarget(s)
	}
}

func (p *KotlinParser) AnnotationUseSiteTarget() (localctx IAnnotationUseSiteTargetContext) {
	localctx = NewAnnotationUseSiteTargetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, KotlinParserRULE_annotationUseSiteTarget)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3243)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-99)&-(0x1f+1)) == 0 && ((1<<uint((_la-99)))&((1<<(KotlinParserAT_FIELD-99))|(1<<(KotlinParserAT_PROPERTY-99))|(1<<(KotlinParserAT_GET-99))|(1<<(KotlinParserAT_SET-99))|(1<<(KotlinParserAT_RECEIVER-99))|(1<<(KotlinParserAT_PARAM-99))|(1<<(KotlinParserAT_SETPARAM-99))|(1<<(KotlinParserAT_DELEGATE-99)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IUnescapedAnnotationContext is an interface to support dynamic dispatch.
type IUnescapedAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnescapedAnnotationContext differentiates from other interfaces.
	IsUnescapedAnnotationContext()
}

type UnescapedAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnescapedAnnotationContext() *UnescapedAnnotationContext {
	var p = new(UnescapedAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_unescapedAnnotation
	return p
}

func (*UnescapedAnnotationContext) IsUnescapedAnnotationContext() {}

func NewUnescapedAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnescapedAnnotationContext {
	var p = new(UnescapedAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_unescapedAnnotation

	return p
}

func (s *UnescapedAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *UnescapedAnnotationContext) ConstructorInvocation() IConstructorInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorInvocationContext)
}

func (s *UnescapedAnnotationContext) UserType() IUserTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeContext)
}

func (s *UnescapedAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnescapedAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnescapedAnnotationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterUnescapedAnnotation(s)
	}
}

func (s *UnescapedAnnotationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitUnescapedAnnotation(s)
	}
}

func (p *KotlinParser) UnescapedAnnotation() (localctx IUnescapedAnnotationContext) {
	localctx = NewUnescapedAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, KotlinParserRULE_unescapedAnnotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3247)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 494, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3245)
			p.ConstructorInvocation()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3246)
			p.UserType()
		}

	}

	return localctx
}

// ISimpleIdentifierContext is an interface to support dynamic dispatch.
type ISimpleIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleIdentifierContext differentiates from other interfaces.
	IsSimpleIdentifierContext()
}

type SimpleIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleIdentifierContext() *SimpleIdentifierContext {
	var p = new(SimpleIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_simpleIdentifier
	return p
}

func (*SimpleIdentifierContext) IsSimpleIdentifierContext() {}

func NewSimpleIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleIdentifierContext {
	var p = new(SimpleIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_simpleIdentifier

	return p
}

func (s *SimpleIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleIdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(KotlinParserIdentifier, 0)
}

func (s *SimpleIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSimpleIdentifier(s)
	}
}

func (s *SimpleIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSimpleIdentifier(s)
	}
}

func (p *KotlinParser) SimpleIdentifier() (localctx ISimpleIdentifierContext) {
	localctx = NewSimpleIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, KotlinParserRULE_simpleIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3249)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(KotlinParserIMPORT-60))|(1<<(KotlinParserCONSTRUCTOR-60))|(1<<(KotlinParserBY-60))|(1<<(KotlinParserCOMPANION-60))|(1<<(KotlinParserINIT-60))|(1<<(KotlinParserWHERE-60))|(1<<(KotlinParserCATCH-60))|(1<<(KotlinParserFINALLY-60)))) != 0) || (((_la-94)&-(0x1f+1)) == 0 && ((1<<uint((_la-94)))&((1<<(KotlinParserOUT-94))|(1<<(KotlinParserGETTER-94))|(1<<(KotlinParserSETTER-94))|(1<<(KotlinParserDYNAMIC-94))|(1<<(KotlinParserPUBLIC-94))|(1<<(KotlinParserPRIVATE-94))|(1<<(KotlinParserPROTECTED-94))|(1<<(KotlinParserINTERNAL-94))|(1<<(KotlinParserENUM-94))|(1<<(KotlinParserSEALED-94))|(1<<(KotlinParserANNOTATION-94))|(1<<(KotlinParserDATA-94))|(1<<(KotlinParserINNER-94))|(1<<(KotlinParserTAILREC-94))|(1<<(KotlinParserOPERATOR-94))|(1<<(KotlinParserINLINE-94))|(1<<(KotlinParserINFIX-94))|(1<<(KotlinParserEXTERNAL-94))|(1<<(KotlinParserSUSPEND-94))|(1<<(KotlinParserOVERRIDE-94))|(1<<(KotlinParserABSTRACT-94))|(1<<(KotlinParserFINAL-94))|(1<<(KotlinParserOPEN-94)))) != 0) || (((_la-126)&-(0x1f+1)) == 0 && ((1<<uint((_la-126)))&((1<<(KotlinParserCONST-126))|(1<<(KotlinParserLATEINIT-126))|(1<<(KotlinParserVARARG-126))|(1<<(KotlinParserNOINLINE-126))|(1<<(KotlinParserCROSSINLINE-126))|(1<<(KotlinParserREIFIED-126))|(1<<(KotlinParserEXPECT-126))|(1<<(KotlinParserACTUAL-126))|(1<<(KotlinParserIdentifier-126)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) AllSimpleIdentifier() []ISimpleIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem())
	var tst = make([]ISimpleIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierContext) SimpleIdentifier(i int) ISimpleIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleIdentifierContext)
}

func (s *IdentifierContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *IdentifierContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *KotlinParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, KotlinParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3251)
		p.SimpleIdentifier()
	}
	p.SetState(3262)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 496, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(3255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == KotlinParserNL {
				{
					p.SetState(3252)
					p.Match(KotlinParserNL)
				}

				p.SetState(3257)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(3258)
				p.Match(KotlinParserDOT)
			}
			{
				p.SetState(3259)
				p.SimpleIdentifier()
			}

		}
		p.SetState(3264)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 496, p.GetParserRuleContext())
	}

	return localctx
}

// IShebangLineContext is an interface to support dynamic dispatch.
type IShebangLineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShebangLineContext differentiates from other interfaces.
	IsShebangLineContext()
}

type ShebangLineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShebangLineContext() *ShebangLineContext {
	var p = new(ShebangLineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_shebangLine
	return p
}

func (*ShebangLineContext) IsShebangLineContext() {}

func NewShebangLineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShebangLineContext {
	var p = new(ShebangLineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_shebangLine

	return p
}

func (s *ShebangLineContext) GetParser() antlr.Parser { return s.parser }

func (s *ShebangLineContext) ShebangLine() antlr.TerminalNode {
	return s.GetToken(KotlinParserShebangLine, 0)
}

func (s *ShebangLineContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *ShebangLineContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *ShebangLineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShebangLineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShebangLineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterShebangLine(s)
	}
}

func (s *ShebangLineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitShebangLine(s)
	}
}

func (p *KotlinParser) ShebangLine() (localctx IShebangLineContext) {
	localctx = NewShebangLineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, KotlinParserRULE_shebangLine)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3265)
		p.Match(KotlinParserShebangLine)
	}
	p.SetState(3267)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(3266)
				p.Match(KotlinParserNL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3269)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 497, p.GetParserRuleContext())
	}

	return localctx
}

// IQuestContext is an interface to support dynamic dispatch.
type IQuestContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuestContext differentiates from other interfaces.
	IsQuestContext()
}

type QuestContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuestContext() *QuestContext {
	var p = new(QuestContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_quest
	return p
}

func (*QuestContext) IsQuestContext() {}

func NewQuestContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuestContext {
	var p = new(QuestContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_quest

	return p
}

func (s *QuestContext) GetParser() antlr.Parser { return s.parser }

func (s *QuestContext) QUEST_NO_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUEST_NO_WS, 0)
}

func (s *QuestContext) QUEST_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUEST_WS, 0)
}

func (s *QuestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuestContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterQuest(s)
	}
}

func (s *QuestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitQuest(s)
	}
}

func (p *KotlinParser) Quest() (localctx IQuestContext) {
	localctx = NewQuestContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, KotlinParserRULE_quest)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3271)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserQUEST_WS || _la == KotlinParserQUEST_NO_WS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IElvisContext is an interface to support dynamic dispatch.
type IElvisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElvisContext differentiates from other interfaces.
	IsElvisContext()
}

type ElvisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElvisContext() *ElvisContext {
	var p = new(ElvisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_elvis
	return p
}

func (*ElvisContext) IsElvisContext() {}

func NewElvisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElvisContext {
	var p = new(ElvisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_elvis

	return p
}

func (s *ElvisContext) GetParser() antlr.Parser { return s.parser }

func (s *ElvisContext) QUEST_NO_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUEST_NO_WS, 0)
}

func (s *ElvisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElvisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElvisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterElvis(s)
	}
}

func (s *ElvisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitElvis(s)
	}
}

func (p *KotlinParser) Elvis() (localctx IElvisContext) {
	localctx = NewElvisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, KotlinParserRULE_elvis)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3273)
		p.Match(KotlinParserQUEST_NO_WS)
	}
	{
		p.SetState(3274)
		p.Match(KotlinParserCOLON)
	}

	return localctx
}

// ISafeNavContext is an interface to support dynamic dispatch.
type ISafeNavContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSafeNavContext differentiates from other interfaces.
	IsSafeNavContext()
}

type SafeNavContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySafeNavContext() *SafeNavContext {
	var p = new(SafeNavContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_safeNav
	return p
}

func (*SafeNavContext) IsSafeNavContext() {}

func NewSafeNavContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SafeNavContext {
	var p = new(SafeNavContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_safeNav

	return p
}

func (s *SafeNavContext) GetParser() antlr.Parser { return s.parser }

func (s *SafeNavContext) QUEST_NO_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserQUEST_NO_WS, 0)
}

func (s *SafeNavContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SafeNavContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SafeNavContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSafeNav(s)
	}
}

func (s *SafeNavContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSafeNav(s)
	}
}

func (p *KotlinParser) SafeNav() (localctx ISafeNavContext) {
	localctx = NewSafeNavContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, KotlinParserRULE_safeNav)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3276)
		p.Match(KotlinParserQUEST_NO_WS)
	}
	{
		p.SetState(3277)
		p.Match(KotlinParserDOT)
	}

	return localctx
}

// IExclContext is an interface to support dynamic dispatch.
type IExclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExclContext differentiates from other interfaces.
	IsExclContext()
}

type ExclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclContext() *ExclContext {
	var p = new(ExclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_excl
	return p
}

func (*ExclContext) IsExclContext() {}

func NewExclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclContext {
	var p = new(ExclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_excl

	return p
}

func (s *ExclContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclContext) EXCL_NO_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserEXCL_NO_WS, 0)
}

func (s *ExclContext) EXCL_WS() antlr.TerminalNode {
	return s.GetToken(KotlinParserEXCL_WS, 0)
}

func (s *ExclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterExcl(s)
	}
}

func (s *ExclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitExcl(s)
	}
}

func (p *KotlinParser) Excl() (localctx IExclContext) {
	localctx = NewExclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, KotlinParserRULE_excl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3279)
	_la = p.GetTokenStream().LA(1)

	if !(_la == KotlinParserEXCL_WS || _la == KotlinParserEXCL_NO_WS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ISemiContext is an interface to support dynamic dispatch.
type ISemiContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSemiContext differentiates from other interfaces.
	IsSemiContext()
}

type SemiContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySemiContext() *SemiContext {
	var p = new(SemiContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_semi
	return p
}

func (*SemiContext) IsSemiContext() {}

func NewSemiContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SemiContext {
	var p = new(SemiContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_semi

	return p
}

func (s *SemiContext) GetParser() antlr.Parser { return s.parser }

func (s *SemiContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SemiContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SemiContext) EOF() antlr.TerminalNode {
	return s.GetToken(KotlinParserEOF, 0)
}

func (s *SemiContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SemiContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SemiContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSemi(s)
	}
}

func (s *SemiContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSemi(s)
	}
}

func (p *KotlinParser) Semi() (localctx ISemiContext) {
	localctx = NewSemiContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, KotlinParserRULE_semi)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3289)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserSEMICOLON:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3281)
		_la = p.GetTokenStream().LA(1)

		if !(_la == KotlinParserNL || _la == KotlinParserSEMICOLON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(3285)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3282)
					p.Match(KotlinParserNL)
				}

			}
			p.SetState(3287)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext())
		}

	case KotlinParserEOF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3288)
			p.Match(KotlinParserEOF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISemisContext is an interface to support dynamic dispatch.
type ISemisContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSemisContext differentiates from other interfaces.
	IsSemisContext()
}

type SemisContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySemisContext() *SemisContext {
	var p = new(SemisContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = KotlinParserRULE_semis
	return p
}

func (*SemisContext) IsSemisContext() {}

func NewSemisContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SemisContext {
	var p = new(SemisContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = KotlinParserRULE_semis

	return p
}

func (s *SemisContext) GetParser() antlr.Parser { return s.parser }

func (s *SemisContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(KotlinParserNL)
}

func (s *SemisContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(KotlinParserNL, i)
}

func (s *SemisContext) EOF() antlr.TerminalNode {
	return s.GetToken(KotlinParserEOF, 0)
}

func (s *SemisContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SemisContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SemisContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.EnterSemis(s)
	}
}

func (s *SemisContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(KotlinParserListener); ok {
		listenerT.ExitSemis(s)
	}
}

func (p *KotlinParser) Semis() (localctx ISemisContext) {
	localctx = NewSemisContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, KotlinParserRULE_semis)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3297)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case KotlinParserNL, KotlinParserSEMICOLON:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3292)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(3291)
				_la = p.GetTokenStream().LA(1)

				if !(_la == KotlinParserNL || _la == KotlinParserSEMICOLON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3294)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 500, p.GetParserRuleContext())
		}

	case KotlinParserEOF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3296)
			p.Match(KotlinParserEOF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}
